/******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
            /******/
        }
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
            /******/
        };
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
        /******/
    }
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
            /******/
        }
        /******/
    };
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function (exports) {
/******/ 		if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
            /******/
        }
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
        /******/
    };
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function (value, mode) {
/******/ 		if (mode & 1) value = __webpack_require__(value);
/******/ 		if (mode & 8) return value;
/******/ 		if ((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
        /******/
    };
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
        /******/
    };
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
    /******/
})
/************************************************************************/
/******/({

/***/ "./Resources/vendor/app.js":
/*!*********************************!*\
  !*** ./Resources/vendor/app.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
                window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

                /***/
            }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

                /***/
            }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
                var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
                var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
                var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
                var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
                var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
                var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
                var lengua_esp = {
                    "sProcessing": "Procesando...",
                    "sLengthMenu": "Mostrar _MENU_ registros",
                    "sZeroRecords": "No se encontraron resultados",
                    "sEmptyTable": "Ningún dato disponible en esta tabla",
                    "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                    "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sSearch": "Buscar:",
                    "sUrl": "",
                    "sInfoThousands": ",",
                    "sLoadingRecords": "Cargando...",
                    "oPaginate": {
                        "sFirst": "Primero",
                        "sLast": "Último",
                        "sNext": "Siguiente",
                        "sPrevious": "Anterior"
                    },
                    "oAria": {
                        "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                    },
                    "buttons": {
                        "copy": "Copiar",
                        "colvis": "Visibilidad"
                    }
                }

                module.exports = function xhrAdapter(config) {
                    return new Promise(function dispatchXhrRequest(resolve, reject) {
                        var requestData = config.data;
                        var requestHeaders = config.headers;

                        if (utils.isFormData(requestData)) {
                            delete requestHeaders['Content-Type']; // Let the browser set it
                        }

                        var request = new XMLHttpRequest();

                        // HTTP basic authentication
                        if (config.auth) {
                            var username = config.auth.username || '';
                            var password = config.auth.password || '';
                            requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                        }

                        var fullPath = buildFullPath(config.baseURL, config.url);
                        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

                        // Set the request timeout in MS
                        request.timeout = config.timeout;

                        // Listen for ready state
                        request.onreadystatechange = function handleLoad() {
                            if (!request || request.readyState !== 4) {
                                return;
                            }

                            // The request errored out and we didn't get a response, this will be
                            // handled by onerror instead
                            // With one exception: request that using file: protocol, most browsers
                            // will return status as 0 even though it's a successful request
                            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                                return;
                            }

                            // Prepare the response
                            var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                            var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
                            var response = {
                                data: responseData,
                                status: request.status,
                                statusText: request.statusText,
                                headers: responseHeaders,
                                config: config,
                                request: request
                            };

                            settle(resolve, reject, response);

                            // Clean up request
                            request = null;
                        };

                        // Handle browser request cancellation (as opposed to a manual cancellation)
                        request.onabort = function handleAbort() {
                            if (!request) {
                                return;
                            }

                            reject(createError('Request aborted', config, 'ECONNABORTED', request));

                            // Clean up request
                            request = null;
                        };

                        // Handle low level network errors
                        request.onerror = function handleError() {
                            // Real errors are hidden from us by the browser
                            // onerror should only fire if it's a network error
                            reject(createError('Network Error', config, null, request));

                            // Clean up request
                            request = null;
                        };

                        // Handle timeout
                        request.ontimeout = function handleTimeout() {
                            var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
                            if (config.timeoutErrorMessage) {
                                timeoutErrorMessage = config.timeoutErrorMessage;
                            }
                            reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
                                request));

                            // Clean up request
                            request = null;
                        };

                        // Add xsrf header
                        // This is only done if running in a standard browser environment.
                        // Specifically not if we're in a web worker, or react-native.
                        if (utils.isStandardBrowserEnv()) {
                            var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

                            // Add xsrf header
                            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
                                cookies.read(config.xsrfCookieName) :
                                undefined;

                            if (xsrfValue) {
                                requestHeaders[config.xsrfHeaderName] = xsrfValue;
                            }
                        }

                        // Add headers to the request
                        if ('setRequestHeader' in request) {
                            utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                                if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                                    // Remove Content-Type if data is undefined
                                    delete requestHeaders[key];
                                } else {
                                    // Otherwise add header to the request
                                    request.setRequestHeader(key, val);
                                }
                            });
                        }

                        // Add withCredentials to request if needed
                        if (!utils.isUndefined(config.withCredentials)) {
                            request.withCredentials = !!config.withCredentials;
                        }

                        // Add responseType to request if needed
                        if (config.responseType) {
                            try {
                                request.responseType = config.responseType;
                            } catch (e) {
                                // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                                // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                                if (config.responseType !== 'json') {
                                    throw e;
                                }
                            }
                        }

                        // Handle progress if needed
                        if (typeof config.onDownloadProgress === 'function') {
                            request.addEventListener('progress', config.onDownloadProgress);
                        }

                        // Not all browsers support upload events
                        if (typeof config.onUploadProgress === 'function' && request.upload) {
                            request.upload.addEventListener('progress', config.onUploadProgress);
                        }

                        if (config.cancelToken) {
                            // Handle cancellation
                            config.cancelToken.promise.then(function onCanceled(cancel) {
                                if (!request) {
                                    return;
                                }

                                request.abort();
                                reject(cancel);
                                // Clean up request
                                request = null;
                            });
                        }

                        if (requestData === undefined) {
                            requestData = null;
                        }

                        // Send the request
                        request.send(requestData);
                    });
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
                var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
                var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
                var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
                var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

                /**
                 * Create an instance of Axios
                 *
                 * @param {Object} defaultConfig The default config for the instance
                 * @return {Axios} A new instance of Axios
                 */
                function createInstance(defaultConfig) {
                    var context = new Axios(defaultConfig);
                    var instance = bind(Axios.prototype.request, context);

                    // Copy axios.prototype to instance
                    utils.extend(instance, Axios.prototype, context);

                    // Copy context to instance
                    utils.extend(instance, context);

                    return instance;
                }

                // Create the default instance to be exported
                var axios = createInstance(defaults);

                // Expose Axios class to allow class inheritance
                axios.Axios = Axios;

                // Factory for creating new instances
                axios.create = function create(instanceConfig) {
                    return createInstance(mergeConfig(axios.defaults, instanceConfig));
                };

                // Expose Cancel & CancelToken
                axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
                axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
                axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

                // Expose all/spread
                axios.all = function all(promises) {
                    return Promise.all(promises);
                };
                axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

                module.exports = axios;

                // Allow use of default import syntax in TypeScript
                module.exports.default = axios;


                /***/
            }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * A `Cancel` is an object that is thrown when an operation is canceled.
                 *
                 * @class
                 * @param {string=} message The message.
                 */
                function Cancel(message) {
                    this.message = message;
                }

                Cancel.prototype.toString = function toString() {
                    return 'Cancel' + (this.message ? ': ' + this.message : '');
                };

                Cancel.prototype.__CANCEL__ = true;

                module.exports = Cancel;


                /***/
            }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

                /**
                 * A `CancelToken` is an object that can be used to request cancellation of an operation.
                 *
                 * @class
                 * @param {Function} executor The executor function.
                 */
                function CancelToken(executor) {
                    if (typeof executor !== 'function') {
                        throw new TypeError('executor must be a function.');
                    }

                    var resolvePromise;
                    this.promise = new Promise(function promiseExecutor(resolve) {
                        resolvePromise = resolve;
                    });

                    var token = this;
                    executor(function cancel(message) {
                        if (token.reason) {
                            // Cancellation has already been requested
                            return;
                        }

                        token.reason = new Cancel(message);
                        resolvePromise(token.reason);
                    });
                }

                /**
                 * Throws a `Cancel` if cancellation has been requested.
                 */
                CancelToken.prototype.throwIfRequested = function throwIfRequested() {
                    if (this.reason) {
                        throw this.reason;
                    }
                };

                /**
                 * Returns an object that contains a new `CancelToken` and a function that, when called,
                 * cancels the `CancelToken`.
                 */
                CancelToken.source = function source() {
                    var cancel;
                    var token = new CancelToken(function executor(c) {
                        cancel = c;
                    });
                    return {
                        token: token,
                        cancel: cancel
                    };
                };

                module.exports = CancelToken;


                /***/
            }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                module.exports = function isCancel(value) {
                    return !!(value && value.__CANCEL__);
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
                var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
                var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
                var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
                var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

                /**
                 * Create a new instance of Axios
                 *
                 * @param {Object} instanceConfig The default config for the instance
                 */
                function Axios(instanceConfig) {
                    this.defaults = instanceConfig;
                    this.interceptors = {
                        request: new InterceptorManager(),
                        response: new InterceptorManager()
                    };
                }

                /**
                 * Dispatch a request
                 *
                 * @param {Object} config The config specific for this request (merged with this.defaults)
                 */
                Axios.prototype.request = function request(config) {
                    /*eslint no-param-reassign:0*/
                    // Allow for axios('example/url'[, config]) a la fetch API
                    if (typeof config === 'string') {
                        config = arguments[1] || {};
                        config.url = arguments[0];
                    } else {
                        config = config || {};
                    }

                    config = mergeConfig(this.defaults, config);

                    // Set config.method
                    if (config.method) {
                        config.method = config.method.toLowerCase();
                    } else if (this.defaults.method) {
                        config.method = this.defaults.method.toLowerCase();
                    } else {
                        config.method = 'get';
                    }

                    // Hook up interceptors middleware
                    var chain = [dispatchRequest, undefined];
                    var promise = Promise.resolve(config);

                    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                        chain.unshift(interceptor.fulfilled, interceptor.rejected);
                    });

                    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                        chain.push(interceptor.fulfilled, interceptor.rejected);
                    });

                    while (chain.length) {
                        promise = promise.then(chain.shift(), chain.shift());
                    }

                    return promise;
                };

                Axios.prototype.getUri = function getUri(config) {
                    config = mergeConfig(this.defaults, config);
                    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
                };

                // Provide aliases for supported request methods
                utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
                    /*eslint func-names:0*/
                    Axios.prototype[method] = function (url, config) {
                        return this.request(utils.merge(config || {}, {
                            method: method,
                            url: url
                        }));
                    };
                });

                utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                    /*eslint func-names:0*/
                    Axios.prototype[method] = function (url, data, config) {
                        return this.request(utils.merge(config || {}, {
                            method: method,
                            url: url,
                            data: data
                        }));
                    };
                });

                module.exports = Axios;


                /***/
            }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                function InterceptorManager() {
                    this.handlers = [];
                }

                /**
                 * Add a new interceptor to the stack
                 *
                 * @param {Function} fulfilled The function to handle `then` for a `Promise`
                 * @param {Function} rejected The function to handle `reject` for a `Promise`
                 *
                 * @return {Number} An ID used to remove interceptor later
                 */
                InterceptorManager.prototype.use = function use(fulfilled, rejected) {
                    this.handlers.push({
                        fulfilled: fulfilled,
                        rejected: rejected
                    });
                    return this.handlers.length - 1;
                };

                /**
                 * Remove an interceptor from the stack
                 *
                 * @param {Number} id The ID that was returned by `use`
                 */
                InterceptorManager.prototype.eject = function eject(id) {
                    if (this.handlers[id]) {
                        this.handlers[id] = null;
                    }
                };

                /**
                 * Iterate over all the registered interceptors
                 *
                 * This method is particularly useful for skipping over any
                 * interceptors that may have become `null` calling `eject`.
                 *
                 * @param {Function} fn The function to call for each interceptor
                 */
                InterceptorManager.prototype.forEach = function forEach(fn) {
                    utils.forEach(this.handlers, function forEachHandler(h) {
                        if (h !== null) {
                            fn(h);
                        }
                    });
                };

                module.exports = InterceptorManager;


                /***/
            }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
                var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

                /**
                 * Creates a new URL by combining the baseURL with the requestedURL,
                 * only when the requestedURL is not already an absolute URL.
                 * If the requestURL is absolute, this function returns the requestedURL untouched.
                 *
                 * @param {string} baseURL The base URL
                 * @param {string} requestedURL Absolute or relative URL to combine
                 * @returns {string} The combined full path
                 */
                module.exports = function buildFullPath(baseURL, requestedURL) {
                    if (baseURL && !isAbsoluteURL(requestedURL)) {
                        return combineURLs(baseURL, requestedURL);
                    }
                    return requestedURL;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

                /**
                 * Create an Error with the specified message, config, error code, request and response.
                 *
                 * @param {string} message The error message.
                 * @param {Object} config The config.
                 * @param {string} [code] The error code (for example, 'ECONNABORTED').
                 * @param {Object} [request] The request.
                 * @param {Object} [response] The response.
                 * @returns {Error} The created error.
                 */
                module.exports = function createError(message, config, code, request, response) {
                    var error = new Error(message);
                    return enhanceError(error, config, code, request, response);
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
                var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
                var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
                var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

                /**
                 * Throws a `Cancel` if cancellation has been requested.
                 */
                function throwIfCancellationRequested(config) {
                    if (config.cancelToken) {
                        config.cancelToken.throwIfRequested();
                    }
                }

                /**
                 * Dispatch a request to the server using the configured adapter.
                 *
                 * @param {object} config The config that is to be used for the request
                 * @returns {Promise} The Promise to be fulfilled
                 */
                module.exports = function dispatchRequest(config) {
                    throwIfCancellationRequested(config);

                    // Ensure headers exist
                    config.headers = config.headers || {};

                    // Transform request data
                    config.data = transformData(
                        config.data,
                        config.headers,
                        config.transformRequest
                    );

                    // Flatten headers
                    config.headers = utils.merge(
                        config.headers.common || {},
                        config.headers[config.method] || {},
                        config.headers
                    );

                    utils.forEach(
                        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                        function cleanHeaderConfig(method) {
                            delete config.headers[method];
                        }
                    );

                    var adapter = config.adapter || defaults.adapter;

                    return adapter(config).then(function onAdapterResolution(response) {
                        throwIfCancellationRequested(config);

                        // Transform response data
                        response.data = transformData(
                            response.data,
                            response.headers,
                            config.transformResponse
                        );

                        return response;
                    }, function onAdapterRejection(reason) {
                        if (!isCancel(reason)) {
                            throwIfCancellationRequested(config);

                            // Transform response data
                            if (reason && reason.response) {
                                reason.response.data = transformData(
                                    reason.response.data,
                                    reason.response.headers,
                                    config.transformResponse
                                );
                            }
                        }

                        return Promise.reject(reason);
                    });
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * Update an Error with the specified config, error code, and response.
                 *
                 * @param {Error} error The error to update.
                 * @param {Object} config The config.
                 * @param {string} [code] The error code (for example, 'ECONNABORTED').
                 * @param {Object} [request] The request.
                 * @param {Object} [response] The response.
                 * @returns {Error} The error.
                 */
                module.exports = function enhanceError(error, config, code, request, response) {
                    error.config = config;
                    if (code) {
                        error.code = code;
                    }

                    error.request = request;
                    error.response = response;
                    error.isAxiosError = true;

                    error.toJSON = function () {
                        return {
                            // Standard
                            message: this.message,
                            name: this.name,
                            // Microsoft
                            description: this.description,
                            number: this.number,
                            // Mozilla
                            fileName: this.fileName,
                            lineNumber: this.lineNumber,
                            columnNumber: this.columnNumber,
                            stack: this.stack,
                            // Axios
                            config: this.config,
                            code: this.code
                        };
                    };
                    return error;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

                /**
                 * Config-specific merge-function which creates a new config-object
                 * by merging two configuration objects together.
                 *
                 * @param {Object} config1
                 * @param {Object} config2
                 * @returns {Object} New object resulting from merging config2 to config1
                 */
                module.exports = function mergeConfig(config1, config2) {
                    // eslint-disable-next-line no-param-reassign
                    config2 = config2 || {};
                    var config = {};

                    var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
                    var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
                    var defaultToConfig2Keys = [
                        'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
                        'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
                        'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
                        'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
                        'httpsAgent', 'cancelToken', 'socketPath'
                    ];

                    utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
                        if (typeof config2[prop] !== 'undefined') {
                            config[prop] = config2[prop];
                        }
                    });

                    utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
                        if (utils.isObject(config2[prop])) {
                            config[prop] = utils.deepMerge(config1[prop], config2[prop]);
                        } else if (typeof config2[prop] !== 'undefined') {
                            config[prop] = config2[prop];
                        } else if (utils.isObject(config1[prop])) {
                            config[prop] = utils.deepMerge(config1[prop]);
                        } else if (typeof config1[prop] !== 'undefined') {
                            config[prop] = config1[prop];
                        }
                    });

                    utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
                        if (typeof config2[prop] !== 'undefined') {
                            config[prop] = config2[prop];
                        } else if (typeof config1[prop] !== 'undefined') {
                            config[prop] = config1[prop];
                        }
                    });

                    var axiosKeys = valueFromConfig2Keys
                        .concat(mergeDeepPropertiesKeys)
                        .concat(defaultToConfig2Keys);

                    var otherKeys = Object
                        .keys(config2)
                        .filter(function filterAxiosKeys(key) {
                            return axiosKeys.indexOf(key) === -1;
                        });

                    utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
                        if (typeof config2[prop] !== 'undefined') {
                            config[prop] = config2[prop];
                        } else if (typeof config1[prop] !== 'undefined') {
                            config[prop] = config1[prop];
                        }
                    });

                    return config;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

                /**
                 * Resolve or reject a Promise based on response status.
                 *
                 * @param {Function} resolve A function that resolves the promise.
                 * @param {Function} reject A function that rejects the promise.
                 * @param {object} response The response.
                 */
                module.exports = function settle(resolve, reject, response) {
                    var validateStatus = response.config.validateStatus;
                    if (!validateStatus || validateStatus(response.status)) {
                        resolve(response);
                    } else {
                        reject(createError(
                            'Request failed with status code ' + response.status,
                            response.config,
                            null,
                            response.request,
                            response
                        ));
                    }
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                /**
                 * Transform the data for a request or a response
                 *
                 * @param {Object|String} data The data to be transformed
                 * @param {Array} headers The headers for the request or response
                 * @param {Array|Function} fns A single function or Array of functions
                 * @returns {*} The resulting transformed data
                 */
                module.exports = function transformData(data, headers, fns) {
                    /*eslint no-param-reassign:0*/
                    utils.forEach(fns, function transform(fn) {
                        data = fn(data, headers);
                    });

                    return data;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";
/* WEBPACK VAR INJECTION */(function (process) {

                    var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
                    var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

                    var DEFAULT_CONTENT_TYPE = {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };

                    function setContentTypeIfUnset(headers, value) {
                        if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                            headers['Content-Type'] = value;
                        }
                    }

                    function getDefaultAdapter() {
                        var adapter;
                        if (typeof XMLHttpRequest !== 'undefined') {
                            // For browsers use XHR adapter
                            adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
                        } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                            // For node use HTTP adapter
                            adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
                        }
                        return adapter;
                    }

                    var defaults = {
                        adapter: getDefaultAdapter(),

                        transformRequest: [function transformRequest(data, headers) {
                            normalizeHeaderName(headers, 'Accept');
                            normalizeHeaderName(headers, 'Content-Type');
                            if (utils.isFormData(data) ||
                                utils.isArrayBuffer(data) ||
                                utils.isBuffer(data) ||
                                utils.isStream(data) ||
                                utils.isFile(data) ||
                                utils.isBlob(data)
                            ) {
                                return data;
                            }
                            if (utils.isArrayBufferView(data)) {
                                return data.buffer;
                            }
                            if (utils.isURLSearchParams(data)) {
                                setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                                return data.toString();
                            }
                            if (utils.isObject(data)) {
                                setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                                return JSON.stringify(data);
                            }
                            return data;
                        }],

                        transformResponse: [function transformResponse(data) {
                            /*eslint no-param-reassign:0*/
                            if (typeof data === 'string') {
                                try {
                                    data = JSON.parse(data);
                                } catch (e) { /* Ignore */ }
                            }
                            return data;
                        }],

                        /**
                         * A timeout in milliseconds to abort a request. If set to 0 (default) a
                         * timeout is not created.
                         */
                        timeout: 0,

                        xsrfCookieName: 'XSRF-TOKEN',
                        xsrfHeaderName: 'X-XSRF-TOKEN',

                        maxContentLength: -1,

                        validateStatus: function validateStatus(status) {
                            return status >= 200 && status < 300;
                        }
                    };

                    defaults.headers = {
                        common: {
                            'Accept': 'application/json, text/plain, */*'
                        }
                    };

                    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
                        defaults.headers[method] = {};
                    });

                    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
                    });

                    module.exports = defaults;

                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                module.exports = function bind(fn, thisArg) {
                    return function wrap() {
                        var args = new Array(arguments.length);
                        for (var i = 0; i < args.length; i++) {
                            args[i] = arguments[i];
                        }
                        return fn.apply(thisArg, args);
                    };
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                function encode(val) {
                    return encodeURIComponent(val).
                        replace(/%40/gi, '@').
                        replace(/%3A/gi, ':').
                        replace(/%24/g, '$').
                        replace(/%2C/gi, ',').
                        replace(/%20/g, '+').
                        replace(/%5B/gi, '[').
                        replace(/%5D/gi, ']');
                }

                /**
                 * Build a URL by appending params to the end
                 *
                 * @param {string} url The base of the url (e.g., http://www.google.com)
                 * @param {object} [params] The params to be appended
                 * @returns {string} The formatted url
                 */
                module.exports = function buildURL(url, params, paramsSerializer) {
                    /*eslint no-param-reassign:0*/
                    if (!params) {
                        return url;
                    }

                    var serializedParams;
                    if (paramsSerializer) {
                        serializedParams = paramsSerializer(params);
                    } else if (utils.isURLSearchParams(params)) {
                        serializedParams = params.toString();
                    } else {
                        var parts = [];

                        utils.forEach(params, function serialize(val, key) {
                            if (val === null || typeof val === 'undefined') {
                                return;
                            }

                            if (utils.isArray(val)) {
                                key = key + '[]';
                            } else {
                                val = [val];
                            }

                            utils.forEach(val, function parseValue(v) {
                                if (utils.isDate(v)) {
                                    v = v.toISOString();
                                } else if (utils.isObject(v)) {
                                    v = JSON.stringify(v);
                                }
                                parts.push(encode(key) + '=' + encode(v));
                            });
                        });

                        serializedParams = parts.join('&');
                    }

                    if (serializedParams) {
                        var hashmarkIndex = url.indexOf('#');
                        if (hashmarkIndex !== -1) {
                            url = url.slice(0, hashmarkIndex);
                        }

                        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
                    }

                    return url;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * Creates a new URL by combining the specified URLs
                 *
                 * @param {string} baseURL The base URL
                 * @param {string} relativeURL The relative URL
                 * @returns {string} The combined URL
                 */
                module.exports = function combineURLs(baseURL, relativeURL) {
                    return relativeURL
                        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                        : baseURL;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                module.exports = (
                    utils.isStandardBrowserEnv() ?

                        // Standard browser envs support document.cookie
                        (function standardBrowserEnv() {
                            return {
                                write: function write(name, value, expires, path, domain, secure) {
                                    var cookie = [];
                                    cookie.push(name + '=' + encodeURIComponent(value));

                                    if (utils.isNumber(expires)) {
                                        cookie.push('expires=' + new Date(expires).toGMTString());
                                    }

                                    if (utils.isString(path)) {
                                        cookie.push('path=' + path);
                                    }

                                    if (utils.isString(domain)) {
                                        cookie.push('domain=' + domain);
                                    }

                                    if (secure === true) {
                                        cookie.push('secure');
                                    }

                                    document.cookie = cookie.join('; ');
                                },

                                read: function read(name) {
                                    var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                                    return (match ? decodeURIComponent(match[3]) : null);
                                },

                                remove: function remove(name) {
                                    this.write(name, '', Date.now() - 86400000);
                                }
                            };
                        })() :

                        // Non standard browser env (web workers, react-native) lack needed support.
                        (function nonStandardBrowserEnv() {
                            return {
                                write: function write() { },
                                read: function read() { return null; },
                                remove: function remove() { }
                            };
                        })()
                );


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * Determines whether the specified URL is absolute
                 *
                 * @param {string} url The URL to test
                 * @returns {boolean} True if the specified URL is absolute, otherwise false
                 */
                module.exports = function isAbsoluteURL(url) {
                    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
                    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
                    // by any combination of letters, digits, plus, period, or hyphen.
                    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                module.exports = (
                    utils.isStandardBrowserEnv() ?

                        // Standard browser envs have full support of the APIs needed to test
                        // whether the request URL is of the same origin as current location.
                        (function standardBrowserEnv() {
                            var msie = /(msie|trident)/i.test(navigator.userAgent);
                            var urlParsingNode = document.createElement('a');
                            var originURL;

                            /**
                          * Parse a URL to discover it's components
                          *
                          * @param {String} url The URL to be parsed
                          * @returns {Object}
                          */
                            function resolveURL(url) {
                                var href = url;

                                if (msie) {
                                    // IE needs attribute set twice to normalize properties
                                    urlParsingNode.setAttribute('href', href);
                                    href = urlParsingNode.href;
                                }

                                urlParsingNode.setAttribute('href', href);

                                // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                                return {
                                    href: urlParsingNode.href,
                                    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                                    host: urlParsingNode.host,
                                    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                                    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                                    hostname: urlParsingNode.hostname,
                                    port: urlParsingNode.port,
                                    pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                        urlParsingNode.pathname :
                                        '/' + urlParsingNode.pathname
                                };
                            }

                            originURL = resolveURL(window.location.href);

                            /**
                          * Determine if a URL shares the same origin as the current location
                          *
                          * @param {String} requestURL The URL to test
                          * @returns {boolean} True if URL shares the same origin, otherwise false
                          */
                            return function isURLSameOrigin(requestURL) {
                                var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                                return (parsed.protocol === originURL.protocol &&
                                    parsed.host === originURL.host);
                            };
                        })() :

                        // Non standard browser envs (web workers, react-native) lack needed support.
                        (function nonStandardBrowserEnv() {
                            return function isURLSameOrigin() {
                                return true;
                            };
                        })()
                );


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

                module.exports = function normalizeHeaderName(headers, normalizedName) {
                    utils.forEach(headers, function processHeader(value, name) {
                        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                            headers[normalizedName] = value;
                            delete headers[name];
                        }
                    });
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                // Headers whose duplicates are ignored by node
                // c.f. https://nodejs.org/api/http.html#http_message_headers
                var ignoreDuplicateOf = [
                    'age', 'authorization', 'content-length', 'content-type', 'etag',
                    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
                    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
                    'referer', 'retry-after', 'user-agent'
                ];

                /**
                 * Parse headers into an object
                 *
                 * ```
                 * Date: Wed, 27 Aug 2014 08:58:49 GMT
                 * Content-Type: application/json
                 * Connection: keep-alive
                 * Transfer-Encoding: chunked
                 * ```
                 *
                 * @param {String} headers Headers needing to be parsed
                 * @returns {Object} Headers parsed into an object
                 */
                module.exports = function parseHeaders(headers) {
                    var parsed = {};
                    var key;
                    var val;
                    var i;

                    if (!headers) { return parsed; }

                    utils.forEach(headers.split('\n'), function parser(line) {
                        i = line.indexOf(':');
                        key = utils.trim(line.substr(0, i)).toLowerCase();
                        val = utils.trim(line.substr(i + 1));

                        if (key) {
                            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                                return;
                            }
                            if (key === 'set-cookie') {
                                parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                            } else {
                                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                            }
                        }
                    });

                    return parsed;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * Syntactic sugar for invoking a function and expanding an array for arguments.
                 *
                 * Common use case would be to use `Function.prototype.apply`.
                 *
                 *  ```js
                 *  function f(x, y, z) {}
                 *  var args = [1, 2, 3];
                 *  f.apply(null, args);
                 *  ```
                 *
                 * With `spread` this example can be re-written.
                 *
                 *  ```js
                 *  spread(function(x, y, z) {})([1, 2, 3]);
                 *  ```
                 *
                 * @param {Function} callback
                 * @returns {Function}
                 */
                module.exports = function spread(callback) {
                    return function wrap(arr) {
                        return callback.apply(null, arr);
                    };
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

                /*global toString:true*/

                // utils is a library of generic helper functions non-specific to axios

                var toString = Object.prototype.toString;

                /**
                 * Determine if a value is an Array
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is an Array, otherwise false
                 */
                function isArray(val) {
                    return toString.call(val) === '[object Array]';
                }

                /**
                 * Determine if a value is undefined
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if the value is undefined, otherwise false
                 */
                function isUndefined(val) {
                    return typeof val === 'undefined';
                }

                /**
                 * Determine if a value is a Buffer
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Buffer, otherwise false
                 */
                function isBuffer(val) {
                    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
                        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
                }

                /**
                 * Determine if a value is an ArrayBuffer
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
                 */
                function isArrayBuffer(val) {
                    return toString.call(val) === '[object ArrayBuffer]';
                }

                /**
                 * Determine if a value is a FormData
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is an FormData, otherwise false
                 */
                function isFormData(val) {
                    return (typeof FormData !== 'undefined') && (val instanceof FormData);
                }

                /**
                 * Determine if a value is a view on an ArrayBuffer
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
                 */
                function isArrayBufferView(val) {
                    var result;
                    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                        result = ArrayBuffer.isView(val);
                    } else {
                        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
                    }
                    return result;
                }

                /**
                 * Determine if a value is a String
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a String, otherwise false
                 */
                function isString(val) {
                    return typeof val === 'string';
                }

                /**
                 * Determine if a value is a Number
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Number, otherwise false
                 */
                function isNumber(val) {
                    return typeof val === 'number';
                }

                /**
                 * Determine if a value is an Object
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is an Object, otherwise false
                 */
                function isObject(val) {
                    return val !== null && typeof val === 'object';
                }

                /**
                 * Determine if a value is a Date
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Date, otherwise false
                 */
                function isDate(val) {
                    return toString.call(val) === '[object Date]';
                }

                /**
                 * Determine if a value is a File
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a File, otherwise false
                 */
                function isFile(val) {
                    return toString.call(val) === '[object File]';
                }

                /**
                 * Determine if a value is a Blob
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Blob, otherwise false
                 */
                function isBlob(val) {
                    return toString.call(val) === '[object Blob]';
                }

                /**
                 * Determine if a value is a Function
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Function, otherwise false
                 */
                function isFunction(val) {
                    return toString.call(val) === '[object Function]';
                }

                /**
                 * Determine if a value is a Stream
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Stream, otherwise false
                 */
                function isStream(val) {
                    return isObject(val) && isFunction(val.pipe);
                }

                /**
                 * Determine if a value is a URLSearchParams object
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
                 */
                function isURLSearchParams(val) {
                    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
                }

                /**
                 * Trim excess whitespace off the beginning and end of a string
                 *
                 * @param {String} str The String to trim
                 * @returns {String} The String freed of excess whitespace
                 */
                function trim(str) {
                    return str.replace(/^\s*/, '').replace(/\s*$/, '');
                }

                /**
                 * Determine if we're running in a standard browser environment
                 *
                 * This allows axios to run in a web worker, and react-native.
                 * Both environments support XMLHttpRequest, but not fully standard globals.
                 *
                 * web workers:
                 *  typeof window -> undefined
                 *  typeof document -> undefined
                 *
                 * react-native:
                 *  navigator.product -> 'ReactNative'
                 * nativescript
                 *  navigator.product -> 'NativeScript' or 'NS'
                 */
                function isStandardBrowserEnv() {
                    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                        navigator.product === 'NativeScript' ||
                        navigator.product === 'NS')) {
                        return false;
                    }
                    return (
                        typeof window !== 'undefined' &&
                        typeof document !== 'undefined'
                    );
                }

                /**
                 * Iterate over an Array or an Object invoking a function for each item.
                 *
                 * If `obj` is an Array callback will be called passing
                 * the value, index, and complete array for each item.
                 *
                 * If 'obj' is an Object callback will be called passing
                 * the value, key, and complete object for each property.
                 *
                 * @param {Object|Array} obj The object to iterate
                 * @param {Function} fn The callback to invoke for each item
                 */
                function forEach(obj, fn) {
                    // Don't bother if no value provided
                    if (obj === null || typeof obj === 'undefined') {
                        return;
                    }

                    // Force an array if not already something iterable
                    if (typeof obj !== 'object') {
                        /*eslint no-param-reassign:0*/
                        obj = [obj];
                    }

                    if (isArray(obj)) {
                        // Iterate over array values
                        for (var i = 0, l = obj.length; i < l; i++) {
                            fn.call(null, obj[i], i, obj);
                        }
                    } else {
                        // Iterate over object keys
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                                fn.call(null, obj[key], key, obj);
                            }
                        }
                    }
                }

                /**
                 * Accepts varargs expecting each argument to be an object, then
                 * immutably merges the properties of each object and returns result.
                 *
                 * When multiple objects contain the same key the later object in
                 * the arguments list will take precedence.
                 *
                 * Example:
                 *
                 * ```js
                 * var result = merge({foo: 123}, {foo: 456});
                 * console.log(result.foo); // outputs 456
                 * ```
                 *
                 * @param {Object} obj1 Object to merge
                 * @returns {Object} Result of all merge properties
                 */
                function merge(/* obj1, obj2, obj3, ... */) {
                    var result = {};
                    function assignValue(val, key) {
                        if (typeof result[key] === 'object' && typeof val === 'object') {
                            result[key] = merge(result[key], val);
                        } else {
                            result[key] = val;
                        }
                    }

                    for (var i = 0, l = arguments.length; i < l; i++) {
                        forEach(arguments[i], assignValue);
                    }
                    return result;
                }

                /**
                 * Function equal to merge with the difference being that no reference
                 * to original objects is kept.
                 *
                 * @see merge
                 * @param {Object} obj1 Object to merge
                 * @returns {Object} Result of all merge properties
                 */
                function deepMerge(/* obj1, obj2, obj3, ... */) {
                    var result = {};
                    function assignValue(val, key) {
                        if (typeof result[key] === 'object' && typeof val === 'object') {
                            result[key] = deepMerge(result[key], val);
                        } else if (typeof val === 'object') {
                            result[key] = deepMerge({}, val);
                        } else {
                            result[key] = val;
                        }
                    }

                    for (var i = 0, l = arguments.length; i < l; i++) {
                        forEach(arguments[i], assignValue);
                    }
                    return result;
                }

                /**
                 * Extends object a by mutably adding to it the properties of object b.
                 *
                 * @param {Object} a The object to be extended
                 * @param {Object} b The object to copy properties from
                 * @param {Object} thisArg The object to bind function to
                 * @return {Object} The resulting value of object a
                 */
                function extend(a, b, thisArg) {
                    forEach(b, function assignValue(val, key) {
                        if (thisArg && typeof val === 'function') {
                            a[key] = bind(val, thisArg);
                        } else {
                            a[key] = val;
                        }
                    });
                    return a;
                }

                module.exports = {
                    isArray: isArray,
                    isArrayBuffer: isArrayBuffer,
                    isBuffer: isBuffer,
                    isFormData: isFormData,
                    isArrayBufferView: isArrayBufferView,
                    isString: isString,
                    isNumber: isNumber,
                    isObject: isObject,
                    isUndefined: isUndefined,
                    isDate: isDate,
                    isFile: isFile,
                    isBlob: isBlob,
                    isFunction: isFunction,
                    isStream: isStream,
                    isURLSearchParams: isURLSearchParams,
                    isStandardBrowserEnv: isStandardBrowserEnv,
                    forEach: forEach,
                    merge: merge,
                    deepMerge: deepMerge,
                    extend: extend,
                    trim: trim
                };


                /***/
            }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports) {

                // shim for using process in browser
                var process = module.exports = {};

                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.

                var cachedSetTimeout;
                var cachedClearTimeout;

                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function () {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                }())
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }


                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }



                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;

                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }

                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;

                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }

                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };

                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};

                function noop() { }

                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;

                process.listeners = function (name) { return [] }

                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };

                process.cwd = function () { return '/' };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () { return 0; };


                /***/
            }),

/***/ 0:
/*!***************************************!*\
  !*** multi ./Resources/vendor/app.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                module.exports = __webpack_require__(/*! D:\visual studio\Tecflex\SISCOP\Sln_CBX_Web_SISCOP\CBX_Web_SISCOP\Resources\vendor\app.js */"./Resources/vendor/app.js");


                /***/
            })

        /******/
    });
/*
------------------------------------------
    JavaScript INDEX
    ===================

    1. General functions
    2. Horario Functions
    3. Marcador Functions
    4. Centro de Costos Functions
    5. Planilla
    6. Grupo
    7. Tipo Personal
    8. Categoría
    9. Cargo
    10. Unidad Organizacional
    11. Jerarquía Organizacional
    12. Feriado
    13. Variable
    14. Empleado
    15. Cambio Documento de Identidad
    16. Perfil
    17. Periodo de Pago
    18. Grupo de Liquidación
    19. Pagina Principal
    20. Papeleta de Salida
    21. Campos Adicionales I
    22. Jornada diaria(Se remplazará código del SITE)
    23. Regla de Negocio
    24. Cálculo Manual
    25. Reportes
    26. Campos Adicionales II
    27. Empleado
    28. Mantenimiento Servicio (de sisfood)
    29. Mantenimiento Regla de Negocio Comedor (de sisfood)

*/

const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);
const product = urlParams.get('intIdMenu')

const capitalize = (s) => {
    if (typeof s !== 'string') return ''
    return s.charAt(0).toUpperCase() + s.slice(1)
}

window.SISCOP.profile.forEach(e => {
    var item = e.menu.find(x => x.intIdMenu === parseInt(product))
    if (item) {
        $("#PadreMenu_txt").html(item.strNomMenu)
        $("#HijoMenu_txt").html(item.strSubMenu)
    }
})

//all ready functions
$(document).ready(function () {
    //if (typeof Date.prototype.GetHora !== 'function') { timeStamp.prototype.GetHora = function () { if (this === null) return ''; return ('00' + this. .getHours()).slice(-2) + ":" + ('00' + this.getMinutes()).slice(-2); } }
    //global functions
    init_sidebar();
    navCurrentHistory();
    init_ProgresBar();
    init_InputMask();
    init_TagsInput();
    switcheryLoad();
    cargarDaterangePicker();
    init_daterangepicker();
    //añadido pruebas 10.03.2021 ES:
    init_daterangepicker_custom();
    init_checkBox_styles();
    init_datatables_net();
    init_SmartWizard();
    init_compose();
    init_charts();
    //calcu_one();
    calcu_two();
    calcu_third();
    calcu_one_reportes();
    //calcu_two_reportes();
    //calcu_third_reportes();
    //habilitar_check();
    DescargarUnidades();
    //LlenarPeriodo();


    //_datatableCargo();

    //$('#Legal').keypress(function () {
    //    console.log("Handler for .keypress() called.");
    //});

    //$('#chk1').change(function () {
    //    alert($(this).prop('checked'))
    //})

    let arrayCheckedConsumos = [];
    let dataConsumoGlobal = null;
    let dataConsumoGlobal7 = null;
    let datahorariocheck3 = [];
    let dataCheckConsumos = [];
    let dataConsumosCheckBackup = [];
});






let arrayCheckedConsumos = [];
let dataCheckConsumos = [];

function GetCampJerar() {
    $.post(
        '/Organizacion/GetCampJerar',
        {},
        (response) => {
            response.forEach(element => {
                $('#campJerar').append(
                    ' <option value="' + element.IntIdJerOrg + '">' + element.strNomJerOrg + '</option>'
                );
            });
        }
    );
}

/* 1. General functions */
/*---------------------------------------------- */
/**
 * Resize function without multiple trigger
 *
 * Usage:
 * $(window).smartresize(function(){
 *     // code here
 * });
 */
(function ($, sr) {
    // debouncing function from John Hann
    // http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
    var debounce = function (func, threshold, execAsap) {
        var timeout;

        return function debounced() {
            var obj = this, args = arguments;
            function delayed() {
                if (!execAsap)
                    func.apply(obj, args);
                timeout = null;
            }

            if (timeout)
                clearTimeout(timeout);
            else if (execAsap)
                func.apply(obj, args);

            timeout = setTimeout(delayed, threshold || 100);
        };
    };

    // smartresize
    jQuery.fn[sr] = function (fn) { return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr); };

})(jQuery, 'smartresize');
/**
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

const APPCONFIG = {
    "loaderHtml": `<div class="container-loadin"><div class="loading-circle-app-div"><div class="loading-circle-app"></div></div></div>`,
    "config": {
        "dateFormat": "DD/MM/YYYY",
    }
}

//miercoles17.03.21
var CURRENT_URL = window.location.href.split('#')[0].split('?')[0],
    $BODY = $('body'),
    $MENU_TOGGLE = $('#menu_toggle'),
    $SIDEBAR_MENU = $('#sidebar-menu'),
    $SIDEBAR_FOOTER = $('.sidebar-footer'),
    $LEFT_COL = $('.left_col'),
    $RIGHT_COL = $('.right_col'),
    $NAV_MENU = $('.nav_menu'),
    $FOOTER = $('footer');



// Sidebar
function init_sidebar() {
    // TODO: This is some kind of easy fix, maybe we can improve this
    var setContentHeight = function () {
        // reset height
        $RIGHT_COL.css('min-height', $(window).height());

        var bodyHeight = $BODY.outerHeight(),
            footerHeight = $BODY.hasClass('footer_fixed') ? -10 : $FOOTER.height(),
            leftColHeight = $LEFT_COL.eq(1).height() + $SIDEBAR_FOOTER.height(),
            contentHeight = bodyHeight < leftColHeight ? leftColHeight : bodyHeight;

        // normalize content
        contentHeight -= $NAV_MENU.height() + footerHeight;

        $RIGHT_COL.css('min-height', contentHeight);
    };

    $SIDEBAR_MENU.find('a').on('click', function (ev) {
        console.log('clicked - sidebar_menu');
        var $li = $(this).parent();

        if ($li.is('.active')) {
            $li.removeClass('active active-sm');
            $('ul:first', $li).slideUp(function () {
                setContentHeight();
            });
        } else {
            // prevent closing menu if we are on child menu
            if (!$li.parent().is('.child_menu')) {
                $SIDEBAR_MENU.find('li').removeClass('active active-sm');
                $SIDEBAR_MENU.find('li ul').slideUp();
            } else {
                if ($BODY.is(".nav-sm")) {
                    $li.parent().find("li").removeClass("active active-sm");
                    $li.parent().find("li ul").slideUp();
                }
            }
            $li.addClass('active');

            $('ul:first', $li).slideDown(function () {
                setContentHeight();
            });
        }
    });

    // toggle small or large menu //miercoles17.03.21
    $MENU_TOGGLE.on('click', function () {
        console.log('clicked - menu toggle');

        if ($BODY.hasClass('nav-md')) {
            $(".site_title img").attr("src", "/images/logo_short.jpeg");
            $(".site_title").addClass("p-0")
            $SIDEBAR_MENU.find('li.active ul').hide();
            $SIDEBAR_MENU.find('li.active').addClass('active-sm').removeClass('active');
        } else {
            $(".site_title img").attr("src", "/images/logo_layout.png");
            $(".site_title").removeClass("p-0")
            $SIDEBAR_MENU.find('li.active-sm ul').show();
            $SIDEBAR_MENU.find('li.active-sm').addClass('active').removeClass('active-sm');
        }

        $BODY.toggleClass('nav-md nav-sm');

        setContentHeight();

        $('.dataTable').each(function () { $(this).dataTable().fnDraw(); });
    });

    // check active menu
    $SIDEBAR_MENU.find('a[href="' + CURRENT_URL + '"]').parent('li').addClass('current-page');

    $SIDEBAR_MENU.find('a').filter(function () {
        return this.href == CURRENT_URL;
    }).parent('li').addClass('current-page').parents('ul').slideDown(function () {
        setContentHeight();
    }).parent().addClass('active');

    // recompute content when resizing
    $(window).smartresize(function () {
        setContentHeight();
    });

    setContentHeight();

    //fixed sidebar
    if ($.fn.mCustomScrollbar) {
        $('.menu_fixed').mCustomScrollbar({
            autoHideScrollbar: true,
            theme: 'minimal',
            mouseWheel: { preventDefault: true }
        });
    }
};
//Fin Sidebar



// Progressbar
function init_ProgresBar() {
    if ($(".progress .progress-bar")[0]) {
        $('.progress .progress-bar').progressbar();
    }
}
// /Progressbar

/* SMART WIZARD */

function init_SmartWizard() {

    if (typeof ($.fn.smartWizard) === 'undefined') { return; }

    $('#wizard').smartWizard({
        selected: 0,
        //labelNext: 'Siguiente',
        //labelPrevious: 'Anterior',
        //labelFinish: 'Último',
        enableFinishButton: true,
        enableAllSteps: true
    });

    $('#wizard_verticle').smartWizard({
        transitionEffect: 'slide'
    });

    $('.buttonNext').hide();//.addClass('btn btn-success');
    $('.buttonPrevious').hide();//.addClass('btn btn-primary');
    $('.buttonFinish').hide();//.addClass('btn btn-default');

};

/* INPUT MASK */

function init_InputMask() {
    if (typeof ($.fn.inputmask) === 'undefined') { return; }
    $(":input").inputmask();
};

//Preview Image
function ShowPreview(input) {
    if (input.files && input.files[0]) {
        var ImageDir = new FileReader();
        ImageDir.onload = function (e) {
            $('#impPrev').attr('src', e.target.result);
        }
        ImageDir.readAsDataURL(input.files[0]);
    }
}


//tags input
function init_TagsInput() {

    if (typeof $.fn.tagsInput !== 'undefined') {

        $('#tags_1').tagsInput({
            width: 'auto'
        });
        $('#tags_2').tagsInput({
            width: 'auto'
        });



    }

};


//Navegation History current
function navCurrentHistory() {
    //count elements child of class breadcrumb
    var cantChild = $('.breadcrumb > a').length;
    cantChild = (cantChild - 1) * 10;  //(cantidad de elementos -1 ) * el tamaño de cada item de la clase .breadcrumb__step =>Default value=10%;
    cantChild = 100 - cantChild;    //100% (total del espacio) - tamño de items.
    /* console.log(cantChild); */
    //$('.breadcrumb a:last-child').css('width', cantChild + '%');
}

//icheck
function init_checkBox_styles() {
    if ($("input.flat")[0]) {
        $(document).ready(function () {
            $('input.flat').iCheck({
                checkboxClass: 'icheckbox_flat-blue',
                radioClass: 'iradio_flat-blue'
            });
        });
    }
}

// Switchery
function switcheryLoad() {

    if ($(".js-switch")[0]) {
        var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));
        elems.forEach(function (html) {
            var switchery = new Switchery(html, {
                color: '#26B99A'
            });
        });
    }

}

//Datatables.net formating
function init_datatables_net() {
    $('.datatables-net-format').dataTable({
        lengthMenu: [10, 25, 50],
        responsive: true,
        language: {
            lengthMenu: 'Mostrar _MENU_ Items',
            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
            infoEmpty: 'No hay Items para mostrar',
            search: 'Buscar: ',
            sSearchPlaceholder: 'Criterio de búsqueda',
            zeroRecords: 'No se encontraron registros coincidentes',
            infoFiltered: '(Filtrado de _MAX_ totales Items)',
            paginate: {
                previous: 'Anterior',
                next: 'Siguiente'
            }
        }
    });
}

////////////
////////////
function init_datatables_net_nuevo() {
    $('.datatables-net-format').dataTable({
        lengthMenu: [10, 25, 50],
        responsive: true,
        language: {
            lengthMenu: 'Mostrar _MENU_ Items',
            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
            infoEmpty: 'No hay Items para mostrar',
            search: 'Buscar: ',
            sSearchPlaceholder: 'Criterio de búsqueda',
            zeroRecords: 'No se encontraron registros coincidentes',
            infoFiltered: '(Filtrado de _MAX_ totales Items)',
            paginate: {
                previous: 'Anterior',
                next: 'Siguiente'
            }
        }
    });
}


function init_daterangepicker_custom(idDatepicker = 'rangedatepickergeneral', rangeDateInicial = { startDate: moment(), endDate: moment() }, dateFormato = 'DD/MM/YYYY', ) {

    var dateCurrent = moment().format(dateFormato);

    if (typeof ($.fn.daterangepicker) === 'undefined') { return; }

    var cb = function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
        $(`#${idDatepicker} span`).html(start.format(dateFormato) + ' - ' + end.format(dateFormato));
    };

    var optionSet1 = {
        startDate: rangeDateInicial.startDate,
        endDate: rangeDateInicial.endDate,
        minDate: '01/01/2000',
        maxDate: '12/31/2030',
        dateLimit: {
            months: 12 * 15
        },
        linkedCalendars: false,
        showDropdowns: true,
        showWeekNumbers: false,
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        ranges: {
            'Hoy': [moment(), moment()],
            'Ayer': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Últimos 7 días': [moment().subtract(6, 'days'), moment()],
            'últimos 30 días': [moment().subtract(29, 'days'), moment()],
            'Este Mes': [moment().startOf('month'), moment().endOf('month')],
            'último Mes': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            'último Año': [moment().subtract(0, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')]
        },
        opens: 'left',
        buttonClasses: ['btn btn-default'],
        applyClass: 'btn-small btn-primary',
        cancelClass: 'btn-small',
        format: dateFormato,
        separator: ' to ',
        locale: {
            applyLabel: 'Consultar',
            cancelLabel: 'Cancelar',
            fromLabel: 'From',
            toLabel: 'To',
            customRangeLabel: 'Elegir Rango',
            daysOfWeek: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sa'],
            monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
            firstDay: 1,
            format: dateFormato
        }
    };


    $(`#${idDatepicker} span`).html(rangeDateInicial.startDate.format(dateFormato) + ' - ' + rangeDateInicial.endDate.format(dateFormato));

    $(`#${idDatepicker}`).daterangepicker(optionSet1, cb);
    $(`#${idDatepicker}`).on('show.daterangepicker', function () {
        //console.log("show event fired");
    });
    $(`#${idDatepicker}`).on('hide.daterangepicker', function () {
        //console.log("hide event fired");
    });
    $(`#${idDatepicker}`).on('apply.daterangepicker', function (ev, picker) {
        // console.log("Fechas Aplicadas: " + picker.startDate.format(dateFormato) + " to " + picker.endDate.format(dateFormato));

    });
    $(`#${idDatepicker}`).on('cancel.daterangepicker', function (ev, picker) {
        //console.log("cancel event fired");
    });
    $('#options1').click(function () {
        $(`#${idDatepicker}`).data('daterangepicker').setOptions(optionSet1, cb);
    });
    $('#options2').click(function () {
        $(`#${idDatepicker}`).data('daterangepicker').setOptions(optionSet2, cb);
    });
    $('#destroy').click(function () {
        $(`#${idDatepicker}`).data('daterangepicker').remove();
    });

}


function init_daterangepicker() {

    
    //startDate.
    var dateCurrent = moment().format('DD/MM/YYYY').substr(-4, 4);
    fechaInicio = '01/01/' + dateCurrent; // moment().subtract(0, "day").format("DD/MM/YYYY");
    fechaFin = '31/12/' + dateCurrent; // moment().subtract(0, "day").format("DD/MM/YYYY"); 

    if (typeof ($.fn.daterangepicker) === 'undefined') { return; }

    var cb = function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
        $('.range-datepicker span').html(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
    };

    var optionSet1 = {
        //startDate: moment(),
        //endDate: moment(),
        startDate: fechaInicio,
        endDate: fechaFin,
        minDate: '01/01/2010',
        maxDate: '12/31/2030',
        dateLimit: {
            months: 12
        },
        linkedCalendars: false,
        showDropdowns: true,
        showWeekNumbers: false,
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        ranges: {
            'Hoy': [moment(), moment()],// ], HGM 08.03.21 FECHAS DATAPICKER moment().format("DD/MM/YYYY"), moment().format("DD/MM/YYYY")
            //moment().startOf('day').format("DD/MM/YYYY"), moment().add(0, "day").endOf('day').format("DD/MM/YYYY")
            'Ayer': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Últimos 7 días': [moment().subtract(6, 'days'), moment()],
            'últimos 30 días': [moment().subtract(29, 'days'), moment()],
            'Este Mes': [moment().startOf('month'), moment().endOf('month')],
            'último Mes': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            'último Año': [moment().subtract(0, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')]
        },
        opens: 'left',
        buttonClasses: ['btn btn-default'],
        applyClass: 'btn-small btn-primary',
        cancelClass: 'btn-small',
        format: 'DD/MM/YYYY',
        separator: ' to ',
        language: 'es',
        locale: {
            applyLabel: 'Consultar',
            cancelLabel: 'Cancelar',
            fromLabel: 'From',
            toLabel: 'To',
            customRangeLabel: 'Elegir Rango',
            daysOfWeek: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sa'],
            monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
            firstDay: 1,
            format: 'DD/MM/YYYY'
        }
    };

    $('.range-datepicker span').html(fechaInicio + ' - ' + fechaFin);

    $('.range-datepicker').daterangepicker(optionSet1, cb);
    $('.range-datepicker').on('showCalendar.daterangepicker', function () {
        //$(".calendar.left").find("td.available:contains('10')").click()
        //$(".calendar.left").hide()
        console.log("show event fired TEST");
    });
    $('.range-datepicker').on('hide.daterangepicker', function () {
        console.log("hide event fired");
    });
    $('.range-datepicker').on('apply.daterangepicker', function (ev, picker) {
        console.log("Fechas Aplicadas: " + picker.startDate.format('DD/MM/YYYY') + " to " + picker.endDate.format('DD/MM/YYYY'));

    });
    $('.range-datepicker').on('cancel.daterangepicker', function (ev, picker) {
        console.log("cancel event fired");
    });
    $('#options1').click(function () {
        $('.range-datepicker').data('daterangepicker').setOptions(optionSet1, cb);
    });
    $('#options2').click(function () {
        $('.range-datepicker').data('daterangepicker').setOptions(optionSet2, cb);
    });
    $('#destroy').click(function () {
        $('.range-datepicker').data('daterangepicker').remove();
    });

}

//datatable settings
var _datatableLanguaje = {
    lengthMenu: 'Mostrar _MENU_ Items',
    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
    infoEmpty: 'No hay Items para mostrar',
    search: 'Buscar: ',
    sSearchPlaceholder: 'Criterio de búsqueda',
    zeroRecords: 'No se encontraron registros coincidentes',
    infoFiltered: '(Filtrado de _MAX_  Items en total)',
    paginate: {
        previous: 'Anterior',
        next: 'Siguiente'
    }
};

//Theme Charts
var theme = {
    color: [
        '#26B99A', '#34495E', '#BDC3C7', '#3498DB',
        '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
    ],

    title: {
        itemGap: 8,
        textStyle: {
            fontWeight: 'normal',
            color: '#408829'
        }
    },

    dataRange: {
        color: ['#1f610a', '#97b58d']
    },

    toolbox: {
        color: ['#408829', '#408829', '#408829', '#408829']
    },

    tooltip: {
        backgroundColor: 'rgba(0,0,0,0.5)',
        axisPointer: {
            type: 'line',
            lineStyle: {
                color: '#408829',
                type: 'dashed'
            },
            crossStyle: {
                color: '#408829'
            },
            shadowStyle: {
                color: 'rgba(200,200,200,0.3)'
            }
        }
    },

    dataZoom: {
        dataBackgroundColor: '#eee',
        fillerColor: 'rgba(64,136,41,0.2)',
        handleColor: '#408829'
    },
    grid: {
        borderWidth: 0
    },

    categoryAxis: {
        axisLine: {
            lineStyle: {
                color: '#408829'
            }
        },
        splitLine: {
            lineStyle: {
                color: ['#eee']
            }
        }
    },

    valueAxis: {
        axisLine: {
            lineStyle: {
                color: '#408829'
            }
        },
        splitArea: {
            show: true,
            areaStyle: {
                color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
            }
        },
        splitLine: {
            lineStyle: {
                color: ['#eee']
            }
        }
    },
    timeline: {
        lineStyle: {
            color: '#408829'
        },
        controlStyle: {
            normal: { color: '#408829' },
            emphasis: { color: '#408829' }
        }
    },

    k: {
        itemStyle: {
            normal: {
                color: '#68a54a',
                color0: '#a9cba2',
                lineStyle: {
                    width: 1,
                    color: '#408829',
                    color0: '#86b379'
                }
            }
        }
    },
    map: {
        itemStyle: {
            normal: {
                areaStyle: {
                    color: '#ddd'
                },
                label: {
                    textStyle: {
                        color: '#c12e34'
                    }
                }
            },
            emphasis: {
                areaStyle: {
                    color: '#99d2dd'
                },
                label: {
                    textStyle: {
                        color: '#c12e34'
                    }
                }
            }
        }
    },
    force: {
        itemStyle: {
            normal: {
                linkStyle: {
                    strokeColor: '#408829'
                }
            }
        }
    },
    chord: {
        padding: 4,
        itemStyle: {
            normal: {
                lineStyle: {
                    width: 1,
                    color: 'rgba(128, 128, 128, 0.5)'
                },
                chordStyle: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    }
                }
            },
            emphasis: {
                lineStyle: {
                    width: 1,
                    color: 'rgba(128, 128, 128, 0.5)'
                },
                chordStyle: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    }
                }
            }
        }
    },
    gauge: {
        startAngle: 225,
        endAngle: -45,
        axisLine: {
            show: true,
            lineStyle: {
                color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                width: 8
            }
        },
        axisTick: {
            splitNumber: 10,
            length: 12,
            lineStyle: {
                color: 'auto'
            }
        },
        axisLabel: {
            textStyle: {
                color: 'auto'
            }
        },
        splitLine: {
            length: 18,
            lineStyle: {
                color: 'auto'
            }
        },
        pointer: {
            length: '90%',
            color: 'auto'
        },
        title: {
            textStyle: {
                color: '#333'
            }
        },
        detail: {
            textStyle: {
                color: 'auto'
            }
        }
    },
    textStyle: {
        fontFamily: 'Arial, Verdana, sans-serif'
    }
};

/*---------------------------------------------- */
/**2. Horario Functions */
/**------------------------------------------------ */

function cargarDaterangePicker() {
    $('#date_desde').daterangepicker({
        singleDatePicker: true,
        singleClasses: "picker_1"
    }, function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
    });

    $('#date_hasta').daterangepicker({
        singleDatePicker: true,
        singleClasses: "picker_1"
    }, function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
    });

    $('#date_extra1').daterangepicker({
        singleDatePicker: true,
        singleClasses: "picker_1"
    }, function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
    });
}

function ListarJerarquia() {

    //ComboJerarquia
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: '' },
        (response) => {
            $('#cboJerar').empty();
            $('#cboJerar').append('<option value="0">Seleccione</option>');

            response.forEach(element => {
                $('#cboJerarquica').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });
}

$('#filActivo').on('change', function () {
    validarSession()
    TablaHorario();
});

$('#cboJerarquica').on('change', function () {
    validarSession()
    TablaHorario();
});

$('#filtroHor').keyup(function () {
    validarSession()
    TablaHorario();
});

function CambiosNumdIA() {

    $('#btn-edita-dias').on('click', function () {

        var IntLength = $('#1').html();

        if (IntLength !== undefined) {


            swal({
                title: "Generar Horario",
                text: "Al cambiar el inicio o la duración, El horario perderá las jornadas asignadas",
                type: "info",
                showCancelButton: true,
                confirmButtonText: "Sí, Continuar",
                cancelButtonText: "No, cancelar",
            }).then(function (isConfirm) {
                $('#txt_Num_Dias').attr('disabled', false);
                $('#TipoDia').attr('disabled', false);
                $('#btn-genra-horario').show();
                $('#btn-edita-dias').hide();
                $('#cuerpo').empty();
                $('#external-events-listing').empty();
            }, function (dismiss) {
                if (dismiss == 'cancel') {
                    swal("Cancelado", "La Operación fue cancelada", "error");
                }
            });
        } else if (IntLength == undefined) {

            $('#txt_Num_Dias').attr('disabled', false);
            $('#TipoDia').attr('disabled', false);
            $('#btn-genra-horario').show();
            $('#btn-edita-dias').hide();



        }

    });

}
var _varTablaHorario;

function TablaHorario() {
    var filtroActivo = $('#filActivo').val();
    var strfiltro = $('#filtroHor').val();
    var filtrojer = $('#cboJerarquica').val();

    $.ajax({
        url: '/Asistencia/GetTablaFiltradaHorario',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response);

            if (typeof _varTablaHorario !== 'undefined') {
                _varTablaHorario.destroy();
            }
            _varTablaHorario = $('#datatable-horario').DataTable({
                data: response,
                columns: [
                    { data: 'strCoHorario' },
                    { data: 'strDeHorario' },
                    { data: 'strExtra1' },
                    { data: 'strExtra2' },
                    { data: 'strExtra3' },
                    { data: 'strExtra4' },
                    { data: null },
                    { data: 'intIdHorario' },
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }, {
                        targets: [7],//intIdTipFisc
                        visible: false,
                        searchable: false
                    },

                ],
                dom: 'lBfrtip',
            });

            $('#datatable-horario  tbody').on('click', 'tr button.btn-delete', function () {
                validarSession()
                var data = _varTablaHorario.row($(this).parents('tr')).data();

                if (data == null) {
                    data = null;

                    var data = _varTablaHorario.row($(this).parents('li')).data();
                    intentEliminarHorario(data['intIdHorario'], data['strDeHorario']);

                } else {

                    var data = _varTablaHorario.row($(this).parents('tr')).data();
                    intentEliminarHorario(data['intIdHorario'], data['strDeHorario']);

                }


            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#datatable-horario  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaHorario.row($(this).parents('tr')).data();
    if (data == null) {
        var data = _varTablaHorario.row($(this).parents('li')).data();
        cardarDatosHorario(data);
    } else {
        cardarDatosHorario(data);
    }

});

function intentEliminarHorario(idHora, strNomHora) {
    swal({
        title: "Eliminar Horario",
        text: "¿Está seguro de eliminar el Horario   ''<strong>" + strNomHora + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaHorario(idHora);
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaHorario(idHora) {

    $.post(
        '/Asistencia/EliminarHorario',
        { intIdHorario: idHora },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaHorario();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function cardarDatosHorario(data) {
    $('.form-hide-horario').show();
    $.post(
        '/Asistencia/EditarHorario',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-horario .x_content').empty();
                $('.form-hide-horario .x_content').html(response);

                $('#Dias_next').on('click', function () {
                    $('#btn-edita-dias').on('click', function () {

                        swal({
                            title: "Generar Horario",
                            text: "Al cambiar el inicio o la duración, El horario perderá las jornadas asignadas",
                            type: "info",
                            showCancelButton: true,
                            confirmButtonText: "Sí, Continuar",
                            cancelButtonText: "No, cancelar",
                        }).then(function (isConfirm) {
                            $('#txt_Num_Dias').attr('disabled', false);
                            $('#TipoDia').attr('disabled', false);
                            $('#btn-genra-horario').show();
                            $('#btn-edita-dias').hide();
                            $('#cuerpo').empty();
                            $('#external-events-listing').empty();
                            return;
                        }, function (dismiss) {
                            if (dismiss == 'cancel') {
                                swal("Cancelado", "La Operación fue cancelada", "error");
                            }
                        });
                    });
                });

                $('#btn-edita-dias').on('click', function () {
                    swal({
                        title: "Generar Horario",
                        text: "Al cambiar el inicio o la duración, El horario perderá las jornadas asignadas",
                        type: "info",
                        showCancelButton: true,
                        confirmButtonText: "Sí, Continuar",
                        cancelButtonText: "No, cancelar",
                    }).then(function (isConfirm) {
                        $('#txt_Num_Dias').attr('disabled', false);
                        $('#TipoDia').attr('disabled', false);
                        $('#btn-genra-horario').show();
                        $('#btn-edita-dias').hide();
                        $('#cuerpo').empty();
                        $('#external-events-listing').empty();
                        return;
                    }, function (dismiss) {
                        if (dismiss == 'cancel') {
                            swal("Cancelado", "La Operación fue cancelada", "error");
                        }
                    });
                });

                $('#btn-genra-horario').on('click', function () {
                    var NumeroDias = $('#txt_Num_Dias').val();
                    if (NumeroDias == 0 || NumeroDias < 0) {
                        new PNotify({
                            title: 'Número de Días',
                            text: '' + NumeroDias + ' no es un Número válido',
                            type: 'info',
                            delay: 3000,
                            styling: 'bootstrap3',
                            addclass: 'dark'
                        });

                        return;
                    } else if (NumeroDias !== 0) {
                        $('#txt_Num_Dias').attr('disabled', true);
                        $('#TipoDia').attr('disabled', true);
                        $('#btn-genra-horario').hide();
                        $('#btn-edita-dias').show();


                        if (NumeroDias !== null && NumeroDias > 0) {

                            CreaTabla();

                            $('#Dias_next').on('click', function () {
                                $('#btn-edita-dias').on('click', function () {
                                    swal({
                                        title: "Generar Horario",
                                        text: "Al cambiar el inicio o la duración, El horario perderá las jornadas asignadas",
                                        type: "info",
                                        showCancelButton: true,
                                        confirmButtonText: "Sí, Continuar",
                                        cancelButtonText: "No, cancelar",
                                    }).then(function (isConfirm) {
                                        $('#txt_Num_Dias').attr('disabled', false);
                                        $('#TipoDia').attr('disabled', false);
                                        $('#btn-genra-horario').show();
                                        $('#btn-edita-dias').hide();
                                        $('#cuerpo').empty();
                                        $('#external-events-listing').empty();
                                        return;
                                    }, function (dismiss) {
                                        if (dismiss == 'cancel') {
                                            swal("Cancelado", "La Operación fue cancelada", "error");
                                        }
                                    });
                                });
                            });

                        } else if (NumeroDias == null || NumeroDias == '') {


                            new PNotify({
                                title: 'Número de Días',
                                text: 'Complete los campos obligatorios',
                                type: 'info',
                                delay: 3000,
                                styling: 'bootstrap3',
                                addclass: 'dark'
                            });

                            alert('9');

                            $('#txt_Num_Dias').attr('disabled', false);
                            $('#TipoDia').attr('disabled', false);

                            $('#btn-genra-horario').show();
                            $('#btn-edita-dias').hide();

                            return;

                        }

                    }
                    //CambiosNumdIA();
                });

                $('#btn-update-horario').show();
                $('#btn-save-change-horario').hide();

                $.post(
                    '/Asistencia/ObtenerHorarioPorsuPK',
                    { intIdHorario: data.intIdHorario },
                    (response) => {
                        var element = response[0];
                        if (element.bitFlActivo == false) {
                            $('#idche').html('<input type="checkbox" id="chk-activo-Hor" class=" js-switch"  /> Activo');
                        } else if (element.bitFlActivo == true) {
                            $('#idche').html('<input type="checkbox" id="chk-activo-Hor" class=" js-switch" checked /> Activo');
                        }
                        switcheryLoad();

                        if (element.bitFlPrincipal === true) {
                            $('#checkPrincipal').iCheck('check')
                        }

                        $.post(
                            '/Asistencia/CamposAdicionales',
                            { strEntidad: 'TGHORARIO' },
                            (response) => {
                                console.log(response);
                                $('#containerCampose').empty();
                                response.forEach(element => {
                                    $('#containerCampose').append(
                                        ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                        + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');
                                });
                                $('#strHorarioCampo1').val(element.strHorarioCampo1);
                                $('#strHorarioCampo2').val(element.strHorarioCampo2);
                                $('#strHorarioCampo3').val(element.strHorarioCampo3);
                                $('#strHorarioCampo4').val(element.strHorarioCampo4);
                                $('#strHorarioCampo5').val(element.strHorarioCampo5);
                            });

                        $('#txt_Cod_Hor').val(element.strCoHorario);
                        $('#txt_Desc_Hor').val(element.strDeHorario);
                        $('#txt_Num_Dias').val(element.intTotalDias);
                        $('#IdHor').val(data.intIdHorario);
                        //ComboJerarquia
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: '' },
                            (response) => {
                                $('#cboJerar').empty();
                                $('#cboJerar').append('<option value="0">Seleccione</option>');

                                response.forEach(element => {
                                    $('#cboJerar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });
                                $("#cboJerar").val(element.intExtra1);
                            });

                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: element.intExtra1, strGrupo: 'JERAR', strSubGrupo: '' },
                            (response) => {
                                $('#cboUndOrg').empty();
                                $('#cboUndOrg').attr('disabled', false);

                                response.forEach(element => {
                                    $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });
                                $("#cboUndOrg").val(element.intIdUniOrg);

                                $.post(
                                    '/Asistencia/LlenarTipoUM',
                                    { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'DIA' },
                                    (response) => {
                                        response.forEach(element => {
                                            $('#TipoDia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                        });
                                        $('#TipoDia').val(element.intNumDiaIni);
                                        CreaTabla(data.intIdHorario);
                                    });
                            });
                    });
            }
            init_checkBox_styles()

        });
}

function CombosHorario() {

    //Combo Tipo de Dia
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGHORARIO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'DIA' },
        (response) => {

            response.forEach(element => {
                $('#TipoDia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });

    //ComboJerarquia
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: '' },
        (response) => {
            $('#cboJerar').empty();
            $('#cboJerar').append('<option value="0">Seleccione</option>');

            response.forEach(element => {
                $('#cboJerar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });

    //Combo UnidadOrganizacional
    $('#cboJerar').on('change', function () {

        var IntidJerar = $('#cboJerar option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: 'HORARIO' },
            (response) => {
                $('#cboUndOrg').empty();
                $('#cboUndOrg').attr('disabled', false);

                response.forEach(element => {
                    $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            });
    });

}

$('#btn-new-horario').on('click', function () {
    validarSession()
    $('.form-hide-horario').show();

    $.post(
        '/Asistencia/NuevoHorario',
        {},
        (response) => {
            if (response !== '') {

                $('.form-hide-horario .x_content').empty();
                $('.form-hide-horario .x_content').html(response);
                $('.form-hide-horario').show();

                switcheryLoad();//checked verde
                //init_calendar();
                CamposAdicionalesHorarios();
                CombosHorario();

                $('#btn-update-horario').hide();

                $('#btn-save-change-horario').show();
                $("#txt_Num_Dias").val(7)
                $('#btn-genra-horario').on('click', function () {

                    var NumeroDias = $('#txt_Num_Dias').val();
                    if (NumeroDias == 0 || NumeroDias < 0) {
                        new PNotify({
                            title: 'Número de Días',
                            text: '' + NumeroDias + ' no es un Número válido',
                            type: 'info',
                            delay: 3000,
                            styling: 'bootstrap3',
                            addclass: 'dark'
                        });

                        return;
                    }
                    else if (NumeroDias !== 0) {


                        $('#txt_Num_Dias').attr('disabled', true);
                        $('#TipoDia').attr('disabled', true);
                        $('#btn-genra-horario').hide();
                        $('#btn-edita-dias').show();


                        if (NumeroDias !== null && NumeroDias > 0) {
                            CreaTabla();
                            $('#btn-edita-dias').on('click', function () {



                                swal({
                                    title: "Generar Horario",
                                    text: "Al cambiar el inicio o la duración, El horario perderá las jornadas asignadas",
                                    type: "info",
                                    showCancelButton: true,
                                    confirmButtonText: "Sí, Continuar",
                                    cancelButtonText: "No, cancelar",

                                }).then(function (isConfirm) {
                                    $('#txt_Num_Dias').attr('disabled', false);
                                    $('#TipoDia').attr('disabled', false);
                                    $('#btn-genra-horario').show();
                                    $('#btn-edita-dias').hide();
                                    $('#cuerpo').empty();
                                    $('#external-events-listing').empty();
                                    return;
                                }, function (dismiss) {
                                    if (dismiss == 'cancel') {
                                        swal("Cancelado", "La Operación fue cancelada", "error");
                                    }
                                });
                            });

                            $('#Dias_next').on('click', function () {

                                $('#btn-edita-dias').on('click', function () {
                                    swal({
                                        title: "Generar Horario",
                                        text: "Al cambiar el inicio o la duración, El horario perderá las jornadas asignadas",
                                        type: "info",
                                        showCancelButton: true,
                                        confirmButtonText: "Sí, Continuar",
                                        cancelButtonText: "No, cancelar",
                                    }).then(function (isConfirm) {
                                        $('#txt_Num_Dias').attr('disabled', false);
                                        $('#TipoDia').attr('disabled', false);
                                        $('#btn-genra-horario').show();
                                        $('#btn-edita-dias').hide();
                                        $('#cuerpo').empty();
                                        $('#external-events-listing').empty();
                                        return;
                                    }, function (dismiss) {
                                        if (dismiss == 'cancel') {
                                            swal("Cancelado", "La Operación fue cancelada", "error");
                                        }
                                    });
                                });
                            });
                        }

                        else if (NumeroDias == null || NumeroDias == '') {
                            new PNotify({
                                title: 'Número de Días',
                                text: 'Complete los campos obligatorios',
                                type: 'info',
                                delay: 3000,
                                styling: 'bootstrap3',
                                addclass: 'dark'
                            });

                            $('#txt_Num_Dias').attr('disabled', false);
                            $('#TipoDia').attr('disabled', false);

                            $('#btn-genra-horario').show();
                            $('#btn-edita-dias').hide();
                            return;
                        }
                    }
                });

                //MaxCaracteres
                var txtCod = 'strCoHorario';
                var txtdes = 'strDeHorario';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGHORARIO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtCod) {
                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
            init_checkBox_styles()
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

    CambiosNumdIA();

    /* ADDING EVENTS */
    var currColor = '#3c8dbc' //Red by default
    //Color chooser button
    var colorChooser = $('#color-chooser-btn')
    $('#color-chooser > li > a').click(function (e) {
        e.preventDefault()
        //Save color
        currColor = $(this).css('color')
        //Add color effect to button
        $('#add-new-event').css({ 'background-color': currColor, 'border-color': currColor })
    });
    $('#add-new-event').click(function (e) {
        e.preventDefault()
        //Get value and make sure it is not null
        var val = $('#new-event').val()
        if (val.length == 0) {
            return
        }

        //Create events
        var event = $('<div />')
        event.css({
            'background-color': currColor,
            'border-color': currColor,
            'color': '#fff'
        }).addClass('external-event')
        event.html(val)
        $('#external-events').prepend(event)

        //Add draggable funtionality
        init_events(event)

        //Remove event from text input
        $('#new-event').val('')
    });



});

function init_calendar() {

    if (typeof ($.fn.fullCalendar) === 'undefined') { return; }
    console.log('init_calendar');

    var date = new Date(),
        d = date.getDate(),
        m = date.getMonth(),
        y = date.getFullYear(),
        started,
        categoryClass;

    var calendar = $('#calendar').fullCalendar({
        header: {
            left: 'prev,next today',
            center: 'title',
            right: 'month,agendaWeek,agendaDay,listMonth'
        },
        selectable: true,
        selectHelper: true,
        select: function (start, end, allDay) {
            $('#fc_create').click();

            started = start;
            ended = end;

            $(".antosubmit").on("click", function () {
                var title = $("#title").val();
                if (end) {
                    ended = end;
                }

                categoryClass = $("#event_type").val();

                if (title) {
                    calendar.fullCalendar('renderEvent', {
                        title: title,
                        start: started,
                        end: end,
                        allDay: allDay
                    },
                        true // make the event "stick"
                    );
                }

                $('#title').val('');

                calendar.fullCalendar('unselect');

                $('.antoclose').click();

                return false;
            });
        },
        eventClick: function (calEvent, jsEvent, view) {
            $('#fc_edit').click();
            $('#title2').val(calEvent.title);

            categoryClass = $("#event_type").val();

            $(".antosubmit2").on("click", function () {
                calEvent.title = $("#title2").val();

                calendar.fullCalendar('updateEvent', calEvent);
                $('.antoclose2').click();
            });

            calendar.fullCalendar('unselect');
        },
        editable: true,

    });

};

function editarHorario() {
    $('.form-hide-horario').show();
    $.post(
        '/Asistencia/EditarHorario',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-horario .x_content').empty();
                $('.form-hide-horario .x_content').html(response);
                $('.form-hide-horario').show();
                switcheryLoad();
                init_checkBox_styles();


            }
        });
}
var _varTablaJornadasXHorario;
$('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    e.target // newly activated tab
    e.relatedTarget // previous active tab
})

function TablaHorarioXJor() {
    $.post(
        '/Asistencia/GetTablaFiltradaJornadaDiariaHoraria',
        { IntActivoFilter: 2, strfilter: '', intfiltrojer: 2 },
        (response) => {
            console.log(response);
            $('#external-events-listing').empty();
            $('#external-events-listing').append('<h4>Jornadas Disponibles</h4>');

            response.forEach(element => {
                //añadido 25.02.2021 es
                var L1 = element.strLinea1;
                var L2 = element.strLinea2;
                var L3 = element.strLinea3;
                var L4 = element.strLinea4;
                var L5 = element.strLinea5;
                var L6 = element.strLinea6;
                var L7 = element.strLinea7;
                var L8 = element.strTipoServicio;//añadido 25.02.2021
                var L0 = "-------------------------------";

                //$('#Jornadas').append('<div id="drag' + i + '" class="col-md-2 col-sm-2 col-xs-2" draggable="true" ondragstart ="drag(event)" style="width:100px;heigth:100px;color:snow;background-color:' + element.strColor + '" >' + element.strCodJornada + ' &nbsp;[ &nbsp;' + element.timeHoraIni + ' &nbsp;] &nbsp;</div>');
                //$('#external-events-listing').append('<div data-toggle="tooltip" data-placement="top" id="drag' + i + '" class="col-md-2 col-sm-2 col-xs-2 drags' + y + '" draggable="true" Dato="' + element.intIdJornada + '"  title="' + element.strLinea1 + '\n' + element.strLinea2 + '\n' + element.strLinea4 + '\n' + element.strLinea5 + '\n' + element.strLinea6 + '\n \n' + element.strLinea7 +'" style="color:white;background-color:' + element.strColor + ';border-color:white;border-style: solid;border-width: 1px; width:60px;" >' + element.strLinea3  + '</div>');
                //$('#external-events-listing').append(`
                //<div data-placement="auto" class="p-1 col-md-2 col-sm-2 col-xs-2 drags" draggable="true" title="${element.strLinea1} \n ${element.strLinea2} \n ${element.strLinea4} \n ${element.strLinea5} \n ${element.strLinea6} \n \n ${element.strLinea7}">
                //    <div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${element.strLinea3}</div>
                //</div>
                //`)
                if (L8 == "") {
                    $('#external-events-listing').append(`
                    <div data-placement="auto" class="p-1 col-md-2 col-sm-2 col-xs-2 drags" draggable="true" title="${L2} \n ${L0} \n ${L1} \n ${L4} \n ${L6} \n ${L5} \n \n ${L7}">
                        <div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${L3}</div>
                    </div>
                    `)
                } else {
                    $('#external-events-listing').append(`
                    <div data-placement="auto" class="p-1 col-md-2 col-sm-2 col-xs-2 drags" draggable="true" title="${L2} \n ${L0} \n ${L1} \n ${L4} \n ${L8} \n ${L6} \n ${L5} \n \n ${L7}">
                        <div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${L3}</div>
                    </div>
                    `)
                }
                //fin
            });
            $(".drags").tooltip()

        });


}
function CamposAdicionalesHorarios() {
    $.post(
        '/Asistencia/CamposAdicionales',
        { strEntidad: 'TGHORARIO' },
        (response) => {
            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');
            });
        });
}
var _vartablaDia;

function CreaTabla(intIdHorario = null) {

    var cboInicia = $('#TipoDia').val();
    var DiaSemana = $('#TipoDia option:selected').html();
    var NumDiaas = $('#txt_Num_Dias').val();

    if (NumDiaas !== 0 && NumDiaas !== "" && cboInicia !== "" && cboInicia !== null) {

        if (typeof _vartablaDias !== 'undefined') {
            _vartablaDias.destroy();
        }

        $('#Header').empty();
        $('#cuerpo').empty();

        var fecha = moment()

        while (DiaSemana.toLowerCase() != fecha.locale('es').format('dddd').toLowerCase()) {
            var salida = fecha.add(1, 'd')
        }

        var header = '<tr>'
        for (var i = 0; i < 7; i++) {
            header += `<th>${capitalize(fecha.locale('es').format('dddd'))}</th>`
            fecha.add(1, 'd')
        }
        header += '</tr>'

        $('#Header').append(header)

        for (var i = 1; i <= NumDiaas; i += 7) {

            $('#cuerpo').append(`
                                <tr>
                                    <td style="height: 30px;" ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 1}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 2}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 3}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 4}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 5}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 6}">
                                </tr>`);

            if (i > NumDiaas) {
                $('#td' + i).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + i).attr('disabbled', true);
                $('#td' + i).addClass("notDrop")
            }
            if ((i + 1) > NumDiaas) {
                $('#td' + (i + 1)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 1)).attr('disabled', true);
                $('#td' + (i + 1)).addClass("notDrop")
            }
            if ((i + 2) > NumDiaas) {
                $('#td' + (i + 2)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 2)).attr('disabled', true);
                $('#td' + (i + 2)).addClass("notDrop")
            }
            if ((i + 3) > NumDiaas) {
                $('#td' + (i + 3)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 3)).attr('disabled', true);
                $('#td' + (i + 3)).addClass("notDrop")
            }
            if ((i + 4) > NumDiaas) {
                $('#td' + (i + 4)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 4)).attr('disabled', true);
                $('#td' + (i + 4)).addClass("notDrop")
            }
            if ((i + 5) > NumDiaas) {
                $('#td' + (i + 5)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 5)).attr('disabled', true);
                $('#td' + (i + 5)).addClass("notDrop")
            }
            if ((i + 6) > NumDiaas) {
                $('#td' + (i + 6)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 6)).attr('disabled', true);
                $('#td' + (i + 6)).addClass("notDrop")
            }
            if ((i + 7) > NumDiaas) {
                $('#td' + (i + 7)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 7)).attr('disabled', true);
                $('#td' + (i + 7)).addClass("notDrop")
            }

        }

        if (intIdHorario != null) {
            $.post(
                '/Asistencia/ListarHorJor',
                { intfiltrojer: intIdHorario },
                (response) => {
                    response.forEach(element => {

                        if (element.intIdJornada != 0) {
                            var html = `<div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${element.strCodJornada}</div>`
                            $("#td" + element.intNumDiaIni).html(html);
                        }
                    });
                    DtatableDia();
                })
        } else {
            DtatableDia();
        }
        TablaHorarioXJor();

    }
    else {
        new PNotify({
            title: 'Dìas',
            text: 'Ingrese el Numero de Dìas',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

}

function DtatableDia() {


    //var detalleHorJor = new Array();

    _vartablaDias = $('#Dias').DataTable({
        //lengthMenu: [[5, 3], [5, 3]],
        ordering: false,
        language: {
            lengthMenu: 'Mostrar _MENU_ Filas',
            info: '(*) Las Casillas en X no se grabarán',
            infoEmpty: 'No hay Items para mostrar',
            search: '',
            sSearchPlaceholder: '',
            zeroRecords: '',
            infoFiltered: '',
            paginate: {
                previous: 'Anterior',
                next: 'Siguiente'
            }
        },
    });

    $('#Dias_filter').html('<label class="btn btn-danger" id="btn-clear-Jornadas" title="Quitar Jornadas"><i class="fa fa-trash-o fa-2x"></i></label>');
    $('#Dias_filter').parent().removeClass()
    $('#Dias_filter').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
    $('#Dias_length').parent().removeClass()
    $('#Dias_length').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
    $('#Dias_info').parent().removeClass()
    $('#Dias_info').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
    $('#Dias_paginate').parent().removeClass()
    $('#Dias_paginate').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')

    $('#Dias').parent().removeClass()
    $('#Dias').parent().addClass('col-lg-12 col-md-12 col-sm-12 col-xs-12')
    
    $('#btn-clear-Jornadas').on('click', function () {


        var DIA = $('#txt_Num_Dias').val();

        $('#txt_Num_Dias').val(10);

        CreaTabla();

        $('#txt_Num_Dias').val(DIA);

        CreaTabla();


    });


}
var habilitador = 0;

$('#btn-save-change-horario').on('click', function () {
    validarSession()
    var _uorg = $('#cboUndOrg option:selected').val();   //selected
    var _codHor = $('#txt_Cod_Hor').val();
    var _descHor = $('#txt_Desc_Hor').val();
    var _TipoDia = $('#TipoDia option:selected').val();
    var _NumDias = $('#txt_Num_Dias').val();

    var _camp1 = $('#strHorarioCampo1').val();
    var _camp2 = $('#strHorarioCampo2').val();
    var _camp3 = $('#strHorarioCampo3').val();
    var _camp4 = $('#strHorarioCampo4').val();
    var _camp5 = $('#strHorarioCampo5').val();
    var _activo = $('#chk-activo-Hor').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');

    if (_uorg == null || _codHor === '' || _descHor === '' || _TipoDia == null) {
        new PNotify({
            title: 'Nuevo Horario',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt_Cod_Hor')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }

    var detalleHorJor = []
    var horarioVacio = true;

    $("#Dias").find('td:not(".notDrop")').each(function (index, value) {
        var dia = value.id.replace("td", "");
        var id = $(value).find(".dragJornada").attr('id')
        if (id != null)
            horarioVacio = false
        detalleHorJor.push({ intIdJornada: id, intNumDiaIni: dia })
    });

    if (detalleHorJor.length == 0 || horarioVacio) {
        new PNotify({
            title: 'Horario',
            text: 'Ingrese por lo menos una jornada',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    var Horario = {

        strCoHorario: _codHor,
        strDeHorario: _descHor,
        intIdUniOrg: _uorg,
        intTotalDias: _NumDias,
        intNumDiaIni: _TipoDia,
        strHorarioCampo1: _camp1,
        strHorarioCampo2: _camp2,
        strHorarioCampo3: _camp3,
        strHorarioCampo4: _camp4,
        strHorarioCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal

    }

    console.log(Horario)
    console.log(detalleHorJor)
    $.post(
        '/Asistencia/RegistrarEditarHorario',
        { ObjHorario: Horario, lISTAHorJor: detalleHorJor, intTipoOperacion: 1 },
        //'/Asistencia/RegistrarNuevoHorario',
        //{ ObjHorario: Horario, lISTAHorJor: detalleHorJor },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Horario',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaHorario();
                    $('.form-hide-horario').hide();
                    if (typeof _vartablaDias !== 'undefined') {
                        _vartablaDias.destroy();
                    }
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Horario';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Horario',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});

$('#btn-cancel-horario').on('click', function () {
    validarSession()
    $('.form-hide-horario').hide();
});

$('#btn-update-horario').on('click', function () {
    validarSession()
    var _uorg = $('#cboUndOrg option:selected').val();   //selected
    var _codHor = $('#txt_Cod_Hor').val();
    var _descHor = $('#txt_Desc_Hor').val();
    var _TipoDia = $('#TipoDia option:selected').val();
    var _NumDias = $('#txt_Num_Dias').val();

    var _camp1 = $('#strHorarioCampo1').val();
    var _camp2 = $('#strHorarioCampo2').val();
    var _camp3 = $('#strHorarioCampo3').val();
    var _camp4 = $('#strHorarioCampo4').val();
    var _camp5 = $('#strHorarioCampo5').val();
    var _activo = $('#chk-activo-Hor').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');

    var id_hor = $('#IdHor').val();

    if (_uorg === '' || _codHor === '' || _descHor === '' || _TipoDia == null) {
        new PNotify({
            title: 'Nuevo Horario',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt_Cod_Hor')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }

    var detalleHorJor = []
    var horarioVacio = true;
    $("#Dias").find('td:not(".notDrop")').each(function (index, value) {
        var dia = value.id.replace("td", "");
        var id = $(value).find(".dragJornada").attr('id')
        if (id != null)
            horarioVacio = false
        detalleHorJor.push({ intIdJornada: id, intNumDiaIni: dia })
    });

    if (detalleHorJor.length == 0 || horarioVacio) {
        new PNotify({
            title: 'Horario',
            text: 'Ingrese por lo menos una jornada',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    var Horario = {
        strCoHorario: _codHor,
        strDeHorario: _descHor,
        intIdUniOrg: _uorg,
        intTotalDias: _NumDias,
        intNumDiaIni: _TipoDia,
        strHorarioCampo1: _camp1,
        strHorarioCampo2: _camp2,
        strHorarioCampo3: _camp3,
        strHorarioCampo4: _camp4,
        strHorarioCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal,
        intIdHorario: id_hor,
    }

    console.log(Horario)
    console.log(detalleHorJor)
    $.post(
        '/Asistencia/RegistrarEditarHorario',
        { ObjHorario: Horario, lISTAHorJor: detalleHorJor, intTipoOperacion: 2 },
        //'/Asistencia/ActualizarHorario',
        //{ ObjHorario: Horario, lISTAHorJor: detalleHorJor },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Horario',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaHorario();
                    $('.form-hide-horario').hide();
                    if (typeof _vartablaDias !== 'undefined') {
                        _vartablaDias.destroy();
                    }
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Horario';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Horario',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#RemoveJornada').on('click', function () {
    alert('eliminar');
});

/**------------------------------------------------ */
/**3. Marcador Functions */
/**-------------------------------------------- */

$('#filActiMarc').on('change', function () {
    validarSession()
    TablaMarcador();
});
$('#filtroMarc').keyup(function () {
    validarSession()
    TablaMarcador();
});
$('#btn-new-Marcador').on('click', function () {
    validarSession()
    $('#btn-update-marcador').hide();
    $('#btn-save-change-marcador').show();

    $('.form-hide-Marcador').show();
    $.post(
        '/Organizacion/NuevoMarcador',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-Marcador .x_content').empty();
                $('.form-hide-Marcador .x_content').html(response);
                $('.form-hide-Marcador').show();
                BuscarUnidades();
                switcheryLoad();//checked verde

                //MaxCaracteres
                var txtIP = 'strNumIP';
                var txtdes = 'strDesMarcador';
                //var txtPuer = 'intNumPuerto';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGMARCADOR' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtIP) {
                                $('#Valip').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-cancel-marcador').on('click', function () {
    validarSession()
    $('.form-hide-Marcador').hide();
});
var _varTablaMarcador;

function TablaMarcador() {

    var filtrosActivo = $('#filActiMarc').val();
    var strfiltro = $('#filtroMarc').val();

    $.ajax({
        url: '/Organizacion/GetTablaMarcador',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            console.log(_varTablaMarcador);
            if (typeof _varTablaMarcador !== 'undefined') {
                _varTablaMarcador.destroy();
            }

            console.log('en TablaMarcador');
            console.log(response);

            _varTablaMarcador = $('#tablaMarcador').DataTable({
                data: response,
                columns: [
                    { data: 'intNumMarcador' },
                    { data: 'strDesMarcador' },
                    { data: 'NumIPNumPort' },
                    { data: 'strNomJerOrg' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'strNumIP' },
                    { data: 'intNumPuerto' },
                    { data: 'intIdMarcador' },
                    { data: 'intTipoMarcad' },
                    { data: 'intTipoFunc' },
                    { data: 'strMarcadCampo1' },
                    { data: 'strMarcadCampo2' },
                    { data: 'strMarcadCampo3' },
                    { data: 'strMarcadCampo4' },
                    { data: 'strMarcadCampo5' },
                    { data: 'intIdUniOrg' },
                    { data: 'bitTipoComu' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [0],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//IntIdCCosto
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//intIdTipFisc
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strPlaniCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [15],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [16],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [17],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },

                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });

            $('#tablaMarcador tbody').on('click', 'tr button.btn-delete', function () {
                validarSession()
                var data = _varTablaMarcador.row($(this).parents('tr')).data();

                if (data == null) {
                    data = null;

                    var data = _varTablaMarcador.row($(this).parents('li')).data();
                    intentEliminarMarcador(data['intIdMarcador'], data['strDesMarcador']);

                } else {

                    var data = _varTablaMarcador.row($(this).parents('tr')).data();
                    intentEliminarMarcador(data['intIdMarcador'], data['strDesMarcador']);

                }
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#tablaMarcador tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaMarcador.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaMarcador.row($(this).parents('li')).data();
        cardarDatosMarcador(data);
    } else {
        var data = _varTablaMarcador.row($(this).parents('tr')).data();
        cardarDatosMarcador(data);
    }
});

function intentEliminarMarcador(idMarcador, strNomMarcador) {

    swal({
        title: "Eliminar Marcador",
        text: "¿Está seguro de eliminar el Marcador   ''<strong>" + strNomMarcador + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaMarcador(idMarcador);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaMarcador(idMarcador) {

    $.post(
        '/Organizacion/EliminarMarcador',
        { intIdMarcador: idMarcador },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaMarcador('', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function cardarDatosMarcador(data) {

    $('#btn-update-marcador').show();
    $('#btn-save-change-marcador').hide();

    var objDatosMarcador = {
        intIdMarcador: data['intIdMarcador'],
        intNumMarcador: data['intNumMarcador'],
        strDesMarcador: data['strDesMarcador'],
        intTipoMarcad: data['intTipoMarcad'],
        intTipoFunc: data['intTipoFunc'],
        strNumIP: data['strNumIP'],
        intNumPuerto: data['intNumPuerto'],

        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],

        strMarcadCampo1: data['strMarcadCampo1'],
        strMarcadCampo2: data['strMarcadCampo2'],
        strMarcadCampo3: data['strMarcadCampo3'],
        strMarcadCampo4: data['strMarcadCampo4'],
        strMarcadCampo5: data['strMarcadCampo5'],
        bitTipoComu: data['bitTipoComu']

    }

    $.post(
        '/Organizacion/EditarMarcador',
        { ObjMarcador: objDatosMarcador },
        (response) => {

            if (response !== '') {
                $('.form-hide-Marcador .x_content').empty();
                $('.form-hide-Marcador .x_content').html(response);
                $('.form-hide-Marcador').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-Num-Marcador').val(objDatosMarcador.intNumMarcador);
                $('#txt-desc-Marcador').val(objDatosMarcador.strDesMarcador);
                $('#txt-IP-Marcado').val(objDatosMarcador.strNumIP);
                $('#txt-Puerto-Marcador').val(objDatosMarcador.intNumPuerto);
                $('#cboTipoFuncionalidad').val(objDatosMarcador.intTipoFunc);
                $('#cboTipoMarcador').val(objDatosMarcador.intTipoMarcad);

                $('#txtIdMarc').val(objDatosMarcador.intIdMarcador);


                if (objDatosMarcador.bitTipoComu == 1) {
                    $('#cboTipoComu').val(54);
                } if (objDatosMarcador.bitTipoComu == 0) {
                    $('#cboTipoComu').val(53);
                }
                //if (objDatosCargo.strEstadoActivo == 'Activo') {
                //    $('#chk-activo-Cargo ').prop('checked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = true;

                //} else {

                //    $('#chk-activo-Cargo ').prop('unchecked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = false;
                //}


                if (objDatosMarcador.strEstadoActivo == 'Activo') {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Marcador" class= "js-switch" checked /><script>switcheryLoad();</script >');

                } else {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Marcador" class= "js-switch" unchecked /><script>switcheryLoad();</script >');

                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGMARCADOR' },
                    (response) => {


                        $('#containerCampose').empty();
                        response.forEach(element => {
                            //alert(element.strTitulo);

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strMarcadCampo1').val(objDatosMarcador.strMarcadCampo1);
                        $('#strMarcadCampo2').val(objDatosMarcador.strMarcadCampo2);
                        $('#strMarcadCampo3').val(objDatosMarcador.strMarcadCampo3);
                        $('#strMarcadCampo4').val(objDatosMarcador.strMarcadCampo4);
                        $('#strMarcadCampo5').val(objDatosMarcador.strMarcadCampo5);
                    });

                //Bloque de llenados de CB
                var ides = objDatosMarcador.intIdUniOrg;
                var Idjerorg;
                $.post(
                    '/Organizacion/LlenarDatosMarcador',
                    { intIdUniOrg: ides },
                    (response) => {
                        response.forEach(element => {
                            Idjerorg = element.intIdJerOrg;
                        });
                        if (Idjerorg == 0 || !Idjerorg) {
                            $('#cbounidsupe').empty();
                            $('#cbounidsupe').attr('disabled', true);

                            return;
                        }
                        $('#cboJerarquia').val(Idjerorg);
                        $.post('/Organizacion/getUnidxJerarquia',
                            { IntIdJerOrg: Idjerorg },
                            (response) => {
                                if (true) {
                                    response.forEach(element => {

                                        $('#cbounidsupe').attr('disabled', false);
                                        $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');


                                        $('#cbounidsupe').val(ides);


                                    });

                                }
                            }
                        ).fail(function (result) {
                            alert('ERROR ' + result.status + ' ' + result.statusText);
                        });
                        $('#cbounidsupe').empty();

                        var txtIP = 'strNumIP';
                        var txtdes = 'strDesMarcador';

                        $.post(
                            '/Organizacion/ListarCaracteresMax',
                            { strMaestro: 'TGMARCADOR' },
                            (response) => {
                                response.forEach(element => {
                                    if (element.strColumnName == txtdes) {
                                        $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                    if (element.strColumnName == txtIP) {
                                        $('.Valip').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                });
                            });



                    });
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
//function BuscarMarcador() {

//	var filtrosActivo = $('#filActi').val();
//	var filtrojer = $('#campJerar').val();
//	var strfiltro = $('#filtro').val();
//	var activado;
//	$.post(
//		'/Organizacion/GetTablaMarcador',
//		{ IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer },
//		(response) => {
//			$('#tablaMarcador tbody').empty();
//			response.forEach(element => {
//				if (element.bitFlActivo = true) {
//					activado = "Activo";
//				}
//				else {
//					activado = "Inactivo";
//				}
//				$('#tablabodyMarcador').append(

//					'<tr> <th>' + element.intNumMarcador + '</th > <th> ' + element.strDesMarcador + '</th > <th> ' + element.strNumIP + '</th><th>' + element.strNomJerOrg + '</th ><th>' + Activo + '</th><th><a href="#" onclick="editarMarcador()" class="btn btn-success btn-xs"><i class="fa fa-pencil"></i> Editar  </a>' + '<a href = "#" onclick = "eliminarMarcador()" class= "btn btn-primary btn-xs" > <i class="fa fa-trash-o"></i> Eliminar </a ></th></tr>'
//				);
//			});

//		})
//}
function CamposAdicionalesMarcador() {
    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGMARCADOR' },
        (response) => {
            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');
            });
        });
}

$('#btn-save-change-marcador').on('click', function () {
    validarSession()
    $(".notifry_error").html("")

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _NumMarcador = $('#txt-Num-Marcador').val();
    var _desc = $('#txt-desc-Marcador').val();
    var _TipoMarcador = $('#cboTipoMarcador option:selected').val();
    var _IntNumPuerto = $('#txt-Puerto-Marcador').val();
    var _NumIp = $('#txt-IP-Marcado').val();
    var _TipoFunc = $('#cboTipoFuncionalidad option:selected').val();

    var variable = $('#cboTipoComu').val();
    var _TipoComu = null;
    if (variable == 53) {

        _TipoComu = false;
    } if (variable == 54) {
        _TipoComu = true;
    }
    //if (_TipoComu == null) {
    //    new PNotify({
    //        title: 'Nuevo Marcador',
    //        text: 'Seleccione el Tipo de  Comunicación',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });
    //    return;
    //}

    var _camp1 = $('#strMarcadCampo1').val();
    var _camp2 = $('#strMarcadCampo2').val();
    var _camp3 = $('#strMarcadCampo3').val();
    var _camp4 = $('#strMarcadCampo4').val();
    var _camp5 = $('#strMarcadCampo5').val();
    var _activo = $('#chk-activo-Marcador').is(':checked');

    if (_NumMarcador === '' || _desc === '' || _uorg === '' || _TipoComu == null) {
        new PNotify({
            title: 'Nuevo Marcador',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-Num-Marcador')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingresar un número menor de 10 digitos',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt-IP-Marcado')[0].validity.valid) {
        new PNotify({
            title: 'IP(*)',
            text: 'Ingresar una IP correcta',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt-Puerto-Marcador')[0].validity.valid) {
        new PNotify({
            title: 'Puerto(*)',
            text: 'Ingresar un puerto correcto, entre 0 y 65535',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    if (_uorg === '') {
        _uorg = null;
    }
    var Marcador = {

        intNumMarcador: _NumMarcador,
        strDesMarcador: _desc,
        intIdUniOrg: _uorg,
        intTipoFunc: _TipoFunc,
        intTipoMarcad: _TipoMarcador,  // Aún no se sabe de que campo o de donde se sacará PENDIENTE
        bitTipoComu: _TipoComu,
        strNumIP: _NumIp,
        intNumPuerto: _IntNumPuerto,
        strMarcadCampo1: _camp1,
        strMarcadCampo2: _camp2,
        strMarcadCampo3: _camp3,
        strMarcadCampo4: _camp4,
        strMarcadCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/RegistrarNuevoMarcador',
        { Marcador: Marcador },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Marcador',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaMarcador();
                    $('.form-hide-Marcador').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Marcador';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Marcador',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-update-marcador').on('click', function () {
    validarSession()
    $(".notifry_error").html("")

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _NumMarcador = $('#txt-Num-Marcador').val();
    var _desc = $('#txt-desc-Marcador').val();
    var _TipoMarcador = $('#cboTipoMarcador option:selected').val();
    var _IntNumPuerto = $('#txt-Puerto-Marcador').val();
    var _NumIp = $('#txt-IP-Marcado').val();
    var _TipoFunc = $('#cboTipoFuncionalidad option:selected').val();
    var variable = $('#cboTipoComu').val();
    // alert(variable);
    var _TipoComu = null;

    if (variable == 53) {
        //  alert('false');

        _TipoComu = false;

    } if (variable == 54) {
        // alert('true');
        _TipoComu = true;

    }

    //if (_TipoComu == null) {
    //    new PNotify({
    //        title: 'Nuevo Marcador',
    //        text: 'Seleccione el Tipo de  Marcador',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });
    //    return;
    //}
    var _camp1 = $('#strMarcadCampo1').val();
    var _camp2 = $('#strMarcadCampo2').val();
    var _camp3 = $('#strMarcadCampo3').val();
    var _camp4 = $('#strMarcadCampo4').val();
    var _camp5 = $('#strMarcadCampo5').val();
    var _activo = $('#chk-activo-Marcador').is(':checked');
    var _idMarc = $('#txtIdMarc').val();

    if (_NumMarcador === '' || _desc === '' || _uorg === '' || _TipoComu == null) {
        new PNotify({
            title: 'Actualización de Marcador',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_TipoComu !== null && _NumIp == null && _IntNumPuerto == null) {
        new PNotify({
            title: 'Actualización de Marcador',
            text: 'La IP debe ser ingresada',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-Num-Marcador')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingresar un número menor de 10 digitos',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt-IP-Marcado')[0].validity.valid) {
        new PNotify({
            title: 'IP(*)',
            text: 'Ingresar una IP correcta',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt-Puerto-Marcador')[0].validity.valid) {
        new PNotify({
            title: 'Puerto(*)',
            text: 'Ingresar un puerto correcto, entre 0 y 65535',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Marcador = {

        intNumMarcador: _NumMarcador,
        strDesMarcador: _desc,
        intIdUniOrg: _uorg,
        intTipoFunc: _TipoFunc,
        intTipoMarcad: _TipoMarcador,  // Aún no se sabe de que campo o de donde se sacará PENDIENTE
        bitTipoComu: _TipoComu,
        strNumIP: _NumIp,
        intNumPuerto: _IntNumPuerto,
        strMarcadCampo1: _camp1,
        strMarcadCampo2: _camp2,
        strMarcadCampo3: _camp3,
        strMarcadCampo4: _camp4,
        strMarcadCampo5: _camp5,
        bitFlActivo: _activo,
        intIdMarcador: _idMarc,

    }
    $.post(
        '/Organizacion/ActualizarMarcador',
        { objDatos: Marcador },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Marcador',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaMarcador();
                    $('.form-hide-Marcador').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Marcador';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Marcador',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

/**------------------------------------------------ */
/**4. Centro de Costos Functions */
/**------------------------------------------------ */

$('#filActiCC').on('change', function () {
    validarSession()
    TablaCentroCosto();
});
$('#cboDepenCC').on('change', function () {
    validarSession()
    TablaCentroCosto();
});
$('#filtroCC').keyup(function () {
    validarSession()
    TablaCentroCosto();
});
$('#btn-new-ccosto').on('click', function () {
    validarSession()
    $('#btn-save-change-ccosto').show();
    $('#btn-update-ccosto').hide();
    $('.form-hide-ccosto').show();
    $.post(
        '/Organizacion/NuevoCentroCosto',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-ccosto .x_content').empty();
                $('.form-hide-ccosto .x_content').html(response);
                $('.form-hide-ccosto').show();
                CamposAdicionalesCCosto();
                switcheryLoad();//checked verde


                //MaxCaracteres
                var txtCod = 'strCoCCosto';
                var txtdes = 'strDesCCosto';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCCOSTO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtCod) {
                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
var _varTablaCCosto;

function TablaCentroCosto() {
    var filtrosActivo = $('#filActiCC').val();
    var filtrojer = $('#cboDepenCC').val();
    var strfiltro = $('#filtroCC').val();

    $.ajax({
        url: '/Organizacion/getTablaCCosto',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _varTablaCCosto !== 'undefined') {
                _varTablaCCosto.destroy();
            }

            _varTablaCCosto = $('#tablaCentroCosto').DataTable({
                data: response,
                columns: [
                    { data: 'strCoCCosto' },
                    { data: 'strDesCCosto' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'IntIdCCosto' },
                    { data: 'intIdTipFisc' },
                    { data: 'bitFlActivo' },
                    { data: 'strCeCoCampo1' },
                    { data: 'strCeCoCampo2' },
                    { data: 'strCeCoCampo3' },
                    { data: 'strCeCoCampo4' },
                    { data: 'strCeCoCampo5' },
                    { data: 'IntIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//IntIdCCosto
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//intIdTipFisc
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strPlaniCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });

            $('#tablaCentroCosto  tbody').on('click', 'tr button.btn-delete', function () {
                validarSession()
                var data = _varTablaCCosto.row($(this).parents('tr')).data();

                if (data == null) {
                    data = null;

                    var data = _varTablaCCosto.row($(this).parents('li')).data();
                    intentEliminarCCosto(data['IntIdCCosto'], data['strDesCCosto']);

                } else {

                    var data = _varTablaCCosto.row($(this).parents('tr')).data();
                    intentEliminarCCosto(data['IntIdCCosto'], data['strDesCCosto']);

                }
            });

        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#tablaCentroCosto  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaCCosto.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaCCosto.row($(this).parents('li')).data();
        cardarDatosCCosto(data);
    } else {
        var data = _varTablaCCosto.row($(this).parents('tr')).data();
        cardarDatosCCosto(data);
    }
});

function intentEliminarCCosto(idCCosto, strNomCCosto) {

    swal({
        title: "Eliminar Centro de Costo",
        text: "¿Está seguro de eliminar el Centro de Costo   ''<strong>" + strNomCCosto + "</strong>''    ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaCCosto(idCCosto);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaCCosto(idCCosto) {

    $.post(
        '/Organizacion/EliminarCCosto',
        { IntIdCCosto: idCCosto },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaCentroCosto('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function cardarDatosCCosto(data) {

    $('#btn-update-ccosto').show();
    $('#btn-save-change-ccosto').hide();

    var objDatosCCosto = {
        IntIdCCosto: data['IntIdCCosto'],
        strCoCCosto: data['strCoCCosto'],
        strDesCCosto: data['strDesCCosto'],
        strNomJerOrg: data['strNomJerOrg'],
        IntIdCCosto: data['IntIdCCosto'],
        intIdTipFisc: data['intIdTipFisc'],
        intIdUniOrg: data['IntIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],

        strCeCoCampo1: data['strCeCoCampo1'],
        strCeCoCampo2: data['strCeCoCampo2'],
        strCeCoCampo3: data['strCeCoCampo3'],
        strCeCoCampo4: data['strCeCoCampo4'],
        strCeCoCampo5: data['strCeCoCampo5'],
        strDescripcion: data['strDescripcion']
    }


    $.post(
        '/Organizacion/EditarCCosto',
        { ObjCCosto: objDatosCCosto },
        (response) => {
            if (response !== '') {
                $('.form-hide-ccosto .x_content').empty();
                $('.form-hide-ccosto .x_content').html(response);
                $('.form-hide-ccosto').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-CCosto').val(objDatosCCosto.strCoCCosto);
                $('#txt-desc-CCosto').val(objDatosCCosto.strDesCCosto);
                $('#txtIdCCosto').val(objDatosCCosto.IntIdCCosto);
                $("#cboTipo").val(objDatosCCosto.intIdTipFisc);

                //if (objDatosCargo.strEstadoActivo == 'Activo') {
                //    $('#chk-activo-Cargo ').prop('checked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = true;

                //} else {

                //    $('#chk-activo-Cargo ').prop('unchecked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = false;
                //}


                if (objDatosCCosto.strEstadoActivo == 'Activo') {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-CCosto" class= "js-switch" checked /><script>switcheryLoad();</script >');

                } else {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-CCosto" class= "js-switch" unchecked /><script>switcheryLoad();</script >');

                }

                ////Bloque de Campos Adicionales
                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGCCOSTO' },
                    (response) => {

                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {
                            //alert(element.strTitulo);

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strCeCoCampo1').val(objDatosCCosto.strCeCoCampo1);
                        $('#strCeCoCampo2').val(objDatosCCosto.strCeCoCampo2);
                        $('#strCeCoCampo3').val(objDatosCCosto.strCeCoCampo3);
                        $('#strCeCoCampo4').val(objDatosCCosto.strCeCoCampo4);
                        $('#strCeCoCampo5').val(objDatosCCosto.strCeCoCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosCCosto.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');


                                if (element.intIdUniOrg == objDatosCCosto.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosCCosto.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();

                var txtcod = 'strCoCCosto';
                var txtdes = 'strDesCCosto';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCCOSTO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
$('#btn-save-change-ccosto').on('click', function () {
    validarSession()
    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-CCosto').val();
    var _desc = $('#txt-desc-CCosto').val();
    var _activo = $('#chk-activo-CCosto').is(':checked');
    var _TipoCCosto = $('#cboTipo option:selected').val();
    var _camp1 = $('#strCeCoCampo1').val();
    var _camp2 = $('#strCeCoCampo2').val();
    var _camp3 = $('#strCeCoCampo3').val();
    var _camp4 = $('#strCeCoCampo4').val();
    var _camp5 = $('#strCeCoCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Nuevo Centro de Costo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-CCosto')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var CCosto = {

        strCoCCosto: _codigo,
        strDesCCosto: _desc,
        intIdUniOrg: _uorg,
        intIdTipFisc: _TipoCCosto,
        strCeCoCampo1: _camp1,
        strCeCoCampo2: _camp2,
        strCeCoCampo3: _camp3,
        strCeCoCampo4: _camp4,
        strCeCoCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/RegistrarNuevoCCosto',
        { CCosto: CCosto },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Centro de Costo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaCentroCosto();
                    $('.form-hide-ccosto').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Centro de Costo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Centro de Costo',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3',
                            addclass: 'dark'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-update-ccosto').on('click', function () {
    validarSession()
    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-CCosto').val();
    var _desc = $('#txt-desc-CCosto').val();
    var _activo = $('#chk-activo-CCosto').is(':checked');
    var _TipoCCosto = $('#cboTipo option:selected').val();
    var _camp1 = $('#strCeCoCampo1').val();
    var _camp2 = $('#strCeCoCampo2').val();
    var _camp3 = $('#strCeCoCampo3').val();
    var _camp4 = $('#strCeCoCampo4').val();
    var _camp5 = $('#strCeCoCampo5').val();
    var _idCCosto = $('#txtIdCCosto').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Actualización de Centro de Costo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-CCosto')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var CCosto = {
        IntIdCCosto: _idCCosto,
        strCoCCosto: _codigo,
        strDesCCosto: _desc,
        intIdUniOrg: _uorg,
        intIdTipFisc: _TipoCCosto,
        strCeCoCampo1: _camp1,
        strCeCoCampo2: _camp2,
        strCeCoCampo3: _camp3,
        strCeCoCampo4: _camp4,
        strCeCoCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/ActualizarCCosto',
        { objDatos: CCosto },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {

                    new PNotify({
                        title: 'Actualización de Centro de Costo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaCentroCosto();
                    $('.form-hide-ccosto').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Centro de Costo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Centro de Costo',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3',
                            addclass: 'dark'

                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-cancel-ccosto').on('click', function () {
    validarSession()
    $('.form-hide-ccosto').hide();
});
function CamposAdicionalesCCosto() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGCCOSTO' },
        (response) => {

            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}

/**------------------------------------------ */
/**--------------5. Planilla----------------- */
/**------------------------------------------ */

$('#btn-new-planilla').on('click', function () {
    validarSession()
    $('.form-hide-planilla').show();
    $('#btn-update-planilla').hide();
    $('#btn-save-change-planilla').show();
    $.post(
        '/Organizacion/NuevaPlanilla',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-planilla .x_content').empty();
                $('.form-hide-planilla .x_content').html(response);
                $('.form-hide-planilla').show();
                switcheryLoad();//checked verde


                //MaxCaracteres
                var txtCod = 'strCoPlani';
                var txtdes = 'strDesPlani';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGPLANILLA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtCod) {
                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });


            }
            init_checkBox_styles()
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#filActiPlanilla').on('change', function () {
    validarSession()
    TablaPlanilla();
});
$('#cboDepenPlanilla').on('change', function () {
    validarSession()
    TablaPlanilla();
});
$('#filtroPlanilla').keyup(function () {
    validarSession()
    TablaPlanilla();
});
var _varTablaPlanilla;
function TablaPlanilla() {
    var filtrosActivo = $('#filActiPlanilla').val();
    var filtrojer = $('#cboDepenPlanilla').val();
    var strfiltro = $('#filtroPlanilla').val();

    $.ajax({
        url: '/Organizacion/getTablaPlanilla',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _varTablaPlanilla !== 'undefined') {
                _varTablaPlanilla.destroy();
            }

            _varTablaPlanilla = $('#tablaPlanilla').DataTable({
                data: response,
                columns: [

                    { data: 'strCoPlani' },
                    { data: 'strDesPlani' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdPlanilla' },
                    { data: 'bitFlActivo' },
                    { data: 'bitFlPrincipal' },
                    { data: 'strPlaniCampo1' },
                    { data: 'strPlaniCampo2' },
                    { data: 'strPlaniCampo3' },
                    { data: 'strPlaniCampo4' },
                    { data: 'strPlaniCampo5' },
                    { data: 'intIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//bitFlPrincipal
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#tablaPlanilla tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaPlanilla.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaPlanilla.row($(this).parents('li')).data();
        cardarDatosPlanilla(data);
    } else {
        var data = _varTablaPlanilla.row($(this).parents('tr')).data();
        cardarDatosPlanilla(data);
    }
});

$('#tablaPlanilla tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaPlanilla.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaPlanilla.row($(this).parents('li')).data();
        intentEliminarPlanilla(data['intIdPlanilla'], data['strDesPlani']);

    } else {

        var data = _varTablaPlanilla.row($(this).parents('tr')).data();
        intentEliminarPlanilla(data['intIdPlanilla'], data['strDesPlani']);

    }


});

function intentEliminarPlanilla(idPlanilla, strNomPlanilla) {

    swal({
        title: "Eliminar Planilla",
        text: "¿Está seguro de eliminar la Planilla   ''<strong>" + strNomPlanilla + "</strong>''  ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaPlanilla(idPlanilla);
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaPlanilla(idPlanilla) {

    $.post(
        '/Organizacion/EliminarPlanilla',
        { IdPlanilla: idPlanilla },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'EL REGISTRO NO SE PUEDE ELIMINAR';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaPlanilla('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function cardarDatosPlanilla(data) {

    $('#btn-update-planilla').show();
    $('#btn-save-change-planilla').hide();

    var objDatosPlanilla = {
        intIdPlanilla: data['intIdPlanilla'],
        strCoPlani: data['strCoPlani'],
        strDesPlani: data['strDesPlani'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],
        bitFlPrincipal: data['bitFlPrincipal'],

        strPlaniCampo1: data['strPlaniCampo1'],
        strPlaniCampo2: data['strPlaniCampo2'],
        strPlaniCampo3: data['strPlaniCampo3'],
        strPlaniCampo4: data['strPlaniCampo4'],
        strPlaniCampo5: data['strPlaniCampo5']
    }


    $.post(
        '/Organizacion/EditarPlanilla',
        { ObjPlanilla: objDatosPlanilla },
        (response) => {
            console.log(objDatosPlanilla)
            if (response !== '') {
                $('.form-hide-planilla .x_content').empty();
                $('.form-hide-planilla .x_content').html(response);
                $('.form-hide-planilla').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-Planilla').val(objDatosPlanilla.strCoPlani);
                $('#txt-desc-Planilla').val(objDatosPlanilla.strDesPlani);
                $('#txtIdPlan').val(objDatosPlanilla.intIdPlanilla);


                //if (objDatosCargo.strEstadoActivo == 'Activo') {
                //    $('#chk-activo-Cargo ').prop('checked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = true;

                //} else {

                //    $('#chk-activo-Cargo ').prop('unchecked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = false;
                //}


                if (objDatosPlanilla.strEstadoActivo == 'Activo') {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Planilla" class= "js-switch" checked /><script>switcheryLoad();</script >');

                } else {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Planilla" class= "js-switch" unchecked /><script>switcheryLoad();</script >');

                }

                if (objDatosPlanilla.bitFlPrincipal === true) {
                    $('#checkPrincipal').iCheck('check')
                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGPLANILLA' },
                    (response) => {


                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {
                            //alert(element.strTitulo);

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strPlaniCampo1').val(objDatosPlanilla.strPlaniCampo1);
                        $('#strPlaniCampo2').val(objDatosPlanilla.strPlaniCampo2);
                        $('#strPlaniCampo3').val(objDatosPlanilla.strPlaniCampo3);
                        $('#strPlaniCampo4').val(objDatosPlanilla.strPlaniCampo4);
                        $('#strPlaniCampo5').val(objDatosPlanilla.strPlaniCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosPlanilla.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                                if (element.intIdUniOrg == objDatosPlanilla.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosPlanilla.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();

                var txtcod = 'strCoPlani';
                var txtdes = 'strDesPlani';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGPLANILLA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

$('#btn-save-change-planilla').on('click', function () {
    validarSession()
    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Planilla').val();
    var _desc = $('#txt-desc-Planilla').val();
    var _activo = $('#chk-activo-Planilla').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');
    var _camp1 = $('#strPlaniCampo1').val();
    var _camp2 = $('#strPlaniCampo2').val();
    var _camp3 = $('#strPlaniCampo3').val();
    var _camp4 = $('#strPlaniCampo4').val();
    var _camp5 = $('#strPlaniCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Nueva Planilla',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Planilla')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Planilla = {

        strCoPlani: _codigo,
        strDesPlani: _desc,
        intIdUniOrg: _uorg,
        strPlaniCampo1: _camp1,
        strPlaniCampo2: _camp2,
        strPlaniCampo3: _camp3,
        strPlaniCampo4: _camp4,
        strPlaniCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal
    }
    $.post(
        '/Organizacion/RegistrarNuevaPlanilla',
        { Planilla: Planilla },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nueva Planilla',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    $('.form-hide-planilla').hide();
                    TablaPlanilla();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Planilla';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Planilla',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-cancel-planilla').on('click', function () {
    validarSession()
    $('.form-hide-planilla').hide();
});

$('#btn-update-planilla').on('click', function () {
    validarSession()
    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Planilla').val();
    var _desc = $('#txt-desc-Planilla').val();
    var _activo = $('#chk-activo-Planilla').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');
    var _camp1 = $('#strPlaniCampo1').val();
    var _camp2 = $('#strPlaniCampo2').val();
    var _camp3 = $('#strPlaniCampo3').val();
    var _camp4 = $('#strPlaniCampo4').val();
    var _camp5 = $('#strPlaniCampo5').val();
    var _codi = $('#txtIdPlan').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Actualización de Planilla',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Planilla')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Planilla = {
        intIdPlanilla: _codi,
        strCoPlani: _codigo,
        strDesPlani: _desc,
        intIdUniOrg: _uorg,
        strPlaniCampo1: _camp1,
        strPlaniCampo2: _camp2,
        strPlaniCampo3: _camp3,
        strPlaniCampo4: _camp4,
        strPlaniCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal
    }
    $.post(
        '/Organizacion/ActualizarPlanilla',
        { objDatos: Planilla },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Planilla',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaPlanilla();
                    $('.form-hide-planilla').hide();
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Planilla';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Planilla',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

function CamposAdicionalesPlanilla() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGPLANILLA' },
        (response) => {


            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}

/**------------------------------------------------------ */
/**6. Grupo */
/**----------------------------------------------- */
$('#filActiGrupo').on('change', function () {
    validarSession()
    TablaGrupo();
});
$('#cboDepenGrupo').on('change', function () {
    validarSession()
    TablaGrupo();
});
$('#filtroGrupo').keyup(function () {
    validarSession()
    TablaGrupo();
});
$('#btn-new-grupo').on('click', function () {
    validarSession()
    $('.form-hide-grupo').show();
    $('#btn-update-grupo').hide();
    $('#btn-save-change-grupo').show();
    $.post(
        '/Organizacion/NuevoGrupo',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-grupo .x_content').empty();
                $('.form-hide-grupo .x_content').html(response);
                $('.form-hide-grupo').show();

                switcheryLoad();//checked verde

                //MaxCaracteres
                var txtCod = 'strCoGrupo';
                var txtdes = 'strDesGrupo';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGGRUPO' },
                    (response) => {
                        response.forEach(element => {

                            if (element.strColumnName == txtCod) {

                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);

                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
var _varTablaGrupo;

function TablaGrupo() {

    var filtrosActivo = $('#filActiGrupo').val();
    var filtrojer = $('#cboDepenGrupo').val();
    var strfiltro = $('#filtroGrupo').val();

    $.ajax({
        url: '/Organizacion/GetTablaFiltradaGrupo',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {


            if (typeof _varTablaGrupo !== 'undefined') {
                _varTablaGrupo.destroy();
            }

            _varTablaGrupo = $('#tablaGrupo').DataTable({
                data: response,
                columns: [

                    { data: 'strCoGrupo' },
                    { data: 'strDesGrupo' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdGrupo' },
                    { data: 'bitFlActivo' },
                    { data: 'strGrupoCampo1' },
                    { data: 'strGrupoCampo2' },
                    { data: 'strGrupoCampo3' },
                    { data: 'strGrupoCampo4' },
                    { data: 'strGrupoCampo5' },
                    { data: 'intIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#tablaGrupo tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaGrupo.row($(this).parents('tr')).data();
    if (data == null) {

        var data = _varTablaGrupo.row($(this).parents('li')).data();
        cardarDatosGrupo(data);
    } else {

        var data = _varTablaGrupo.row($(this).parents('tr')).data();
        cardarDatosGrupo(data);
    }
});

$('#tablaGrupo tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaGrupo.row($(this).parents('tr')).data();

    if (data == null) {

        var data = _varTablaGrupo.row($(this).parents('li')).data();
        intentEliminarGrupo(data['intIdGrupo'], data['strDesGrupo']);

    } else {

        var data = _varTablaGrupo.row($(this).parents('tr')).data();
        intentEliminarGrupo(data['intIdGrupo'], data['strDesGrupo']);

    }


});

function intentEliminarGrupo(idGrupo, strNomGrupo) {

    swal({
        title: "Eliminar Grupo",
        text: "¿Está seguro de eliminar el Grupo   ''<strong>" + strNomGrupo + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaGrupo(idGrupo);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaGrupo(idGrupo) {

    $.post(
        '/Organizacion/EliminarGrupo',
        { intIdGrupo: idGrupo },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaGrupo('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function cardarDatosGrupo(data) {

    $('#btn-update-grupo').show();
    $('#btn-save-change-grupo').hide();

    var objDatosGrupo = {
        intIdGrupo: data['intIdGrupo'],
        strCoGrupo: data['strCoGrupo'],
        strDesGrupo: data['strDesGrupo'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],

        strGrupoCampo1: data['strGrupoCampo1'],
        strGrupoCampo2: data['strGrupoCampo2'],
        strGrupoCampo3: data['strGrupoCampo3'],
        strGrupoCampo4: data['strGrupoCampo4'],
        strGrupoCampo5: data['strGrupoCampo5']
    }


    $.post(
        '/Organizacion/EditarGrupo',
        { ObjGrupo: objDatosGrupo },
        (response) => {
            if (response !== '') {
                $('.form-hide-grupo .x_content').empty();
                $('.form-hide-grupo .x_content').html(response);
                $('.form-hide-grupo').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-Grupo').val(objDatosGrupo.strCoGrupo);
                $('#txt-desc-Grupo').val(objDatosGrupo.strDesGrupo);
                $('#txtIdGroup').val(objDatosGrupo.intIdGrupo);


                //if (objDatosCargo.strEstadoActivo == 'Activo') {
                //    $('#chk-activo-Cargo ').prop('checked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = true;

                //} else {

                //    $('#chk-activo-Cargo ').prop('unchecked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = false;
                //}


                if (objDatosGrupo.strEstadoActivo == 'Activo') {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Grupo" class= "js-switch" checked /><script>switcheryLoad();</script >');

                } else {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Grupo" class= "js-switch" unchecked /><script>switcheryLoad();</script >');

                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGGRUPO' },
                    (response) => {

                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {
                            //alert(element.strTitulo);

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strGrupoCampo1').val(objDatosGrupo.strGrupoCampo1);
                        $('#strGrupoCampo2').val(objDatosGrupo.strGrupoCampo2);
                        $('#strGrupoCampo3').val(objDatosGrupo.strGrupoCampo3);
                        $('#strGrupoCampo4').val(objDatosGrupo.strGrupoCampo4);
                        $('#strGrupoCampo5').val(objDatosGrupo.strGrupoCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosGrupo.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                                if (element.intIdUniOrg == objDatosGrupo.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosGrupo.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();

                var txtcod = 'strCoGrupo';
                var txtdes = 'strDesGrupo';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGGRUPO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function CamposAdicionalesGrupo() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGGRUPO' },
        (response) => {

            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}
$('#btn-save-change-grupo').on('click', function () {
    validarSession()
    //Datos del Grupo

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Grupo').val();
    var _desc = $('#txt-desc-Grupo').val();
    var _activo = $('#chk-activo-Grupo').is(':checked');
    var _camp1 = $('#strGrupoCampo1').val();
    var _camp2 = $('#strGrupoCampo2').val();
    var _camp3 = $('#strGrupoCampo3').val();
    var _camp4 = $('#strGrupoCampo4').val();
    var _camp5 = $('#strGrupoCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Nuevo Grupo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Grupo')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Grupo = {

        strCoGrupo: _codigo,
        strDesGrupo: _desc,
        intIdUniOrg: _uorg,
        strGrupoCampo1: _camp1,
        strGrupoCampo2: _camp2,
        strGrupoCampo3: _camp3,
        strGrupoCampo4: _camp4,
        strGrupoCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/RegistrarNuevoGrupo',
        { Grupo: Grupo },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Grupo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaGrupo();
                    $('.form-hide-grupo').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Grupo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Grupo',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-grupo').on('click', function () {
    validarSession()
    $('.form-hide-grupo').hide();
});
$('#btn-update-grupo').on('click', function () {
    validarSession()
    //Datos del Grupo

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Grupo').val();
    var _desc = $('#txt-desc-Grupo').val();
    var _activo = $('#chk-activo-Grupo').is(':checked');
    var _camp1 = $('#strGrupoCampo1').val();
    var _camp2 = $('#strGrupoCampo2').val();
    var _camp3 = $('#strGrupoCampo3').val();
    var _camp4 = $('#strGrupoCampo4').val();
    var _camp5 = $('#strGrupoCampo5').val();
    var _idcate = $('#txtIdGroup').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Actualización de Grupo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Grupo')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Grupo = {
        intIdGrupo: _idcate,
        strCoGrupo: _codigo,
        strDesGrupo: _desc,
        intIdUniOrg: _uorg,
        strGrupoCampo1: _camp1,
        strGrupoCampo2: _camp2,
        strGrupoCampo3: _camp3,
        strGrupoCampo4: _camp4,
        strGrupoCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/ActualizarGrupo',
        { objDatos: Grupo },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Grupo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaGrupo();
                    $('.form-hide-grupo').hide();

                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Grupo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Grupo',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;

                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});
/**---------------------------------------------- */
/**7. Tipo Personal */
/**------------------------------------------------------ */
$('#filActiTipoPer').on('change', function () {
    validarSession()
    TablaTipoPersonal();
});

$('#cboDepenTipoPer').on('change', function () {
    validarSession()
    TablaTipoPersonal();
});

$('#filtroTipoPer').keyup(function () {
    validarSession()
    TablaTipoPersonal();
});

$('#btn-new-tipoPerso').on('click', function () {
    validarSession()
    $('.form-hide-tipoPerso').show();
    $('#btn-update-tipoPerso').hide();
    $('#btn-save-change-tipoPerso').show();
    $.post(
        '/Organizacion/NuevoTipoPersonal',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-tipoPerso .x_content').empty();
                $('.form-hide-tipoPerso .x_content').html(response);
                $('.form-hide-tipoPerso').show();
                BuscarUnidades();
                switcheryLoad();//checked verde

                //MaxCaracteres
                var txtCod = 'strCoTiPers';
                var txtdes = 'strDesTiPers';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGTIPOPERSON' },
                    (response) => {
                        response.forEach(element => {

                            if (element.strColumnName == txtCod) {

                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);

                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});

var _varTablaTipoPersonal;

function TablaTipoPersonal() {
    var filtrosActivo = $('#filActiTipoPer').val();
    var filtrojer = $('#cboDepenTipoPer').val();
    var strfiltro = $('#filtroTipoPer').val();

    $.ajax({
        url: '/Organizacion/getTablaFiltradaTipoPerson',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _varTablaTipoPersonal !== 'undefined') {
                _varTablaTipoPersonal.destroy();
            }
            _varTablaTipoPersonal = $('#tablaTipoPersonal').DataTable({
                data: response,
                columns: [

                    { data: 'strCoTiPers' },
                    { data: 'strDesTiPers' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'IntIdTiPers' },
                    { data: 'bitFlActivo' },
                    { data: 'strTiPersCampo1' },
                    { data: 'strTiPersCampo2' },
                    { data: 'strTiPersCampo3' },
                    { data: 'strTiPersCampo4' },
                    { data: 'strTiPersCampo5' },
                    { data: 'IntIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });


            $('#tablaTipoPersonal tbody').on('click', 'tr button.btn-edit', function () {
                validarSession()
                var data = _varTablaTipoPersonal.row($(this).parents('tr')).data();
                if (data == null) {
                    data = null;
                    var data = _varTablaTipoPersonal.row($(this).parents('li')).data();
                    cardarDatosTipoper(data);
                } else {
                    var data = _varTablaTipoPersonal.row($(this).parents('tr')).data();
                    cardarDatosTipoper(data);
                }
            });

            $('#tablaTipoPersonal tbody').on('click', 'tr button.btn-delete', function () {
                validarSession()
                var data = _varTablaTipoPersonal.row($(this).parents('tr')).data();

                if (data == null) {
                    data = null;

                    var data = _varTablaTipoPersonal.row($(this).parents('li')).data();
                    intentEliminarTipoPersonal(data['IntIdTiPers'], data['strDesTiPers']);

                } else {

                    var data = _varTablaTipoPersonal.row($(this).parents('tr')).data();
                    intentEliminarTipoPersonal(data['IntIdTiPers'], data['strDesTiPers']);

                }


            });

        },
        complete: function () {
            $.unblockUI();
        }
    });
}

function intentEliminarTipoPersonal(idTipoPerson, strNomPerson) {

    swal({
        title: "Eliminar Tipo de Personal",
        text: "¿Está seguro de eliminar el Tipo de Personal   ''<strong>" + strNomPerson + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaTipoPerson(idTipoPerson);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaTipoPerson(idTipoPerson) {

    $.post(
        '/Organizacion/EliminarTipoPerson',
        { intIdTipo: idTipoPerson },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaTipoPersonal('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function cardarDatosTipoper(data) {

    $('#btn-update-tipoPerso').show();
    $('#btn-save-change-tipoPerso').hide();

    var objDatosTipoPer = {
        IntIdTiPers: data['IntIdTiPers'],
        strCoTiPers: data['strCoTiPers'],
        strDesTiPers: data['strDesTiPers'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['IntIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],

        strTiPersCampo1: data['strTiPersCampo1'],
        strTiPersCampo2: data['strTiPersCampo2'],
        strTiPersCampo3: data['strTiPersCampo3'],
        strTiPersCampo4: data['strTiPersCampo4'],
        strTiPersCampo5: data['strTiPersCampo5']


    }


    $.post(
        '/Organizacion/EditarTipoPerso',
        { ObjTipoper: objDatosTipoPer },
        (response) => {
            if (response !== '') {
                $('.form-hide-tipoPerso .x_content').empty();
                $('.form-hide-tipoPerso .x_content').html(response);
                $('.form-hide-tipoPerso').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-TiPers').val(objDatosTipoPer.strCoTiPers);
                $('#txt-desc-TiPers').val(objDatosTipoPer.strDesTiPers);
                $('#txtIdTipPers').val(objDatosTipoPer.IntIdTiPers);


                //if (objDatosCargo.strEstadoActivo == 'Activo') {
                //    $('#chk-activo-Cargo ').prop('checked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = true;

                //} else {

                //    $('#chk-activo-Cargo ').prop('unchecked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = false;
                //}


                if (objDatosTipoPer.strEstadoActivo == 'Activo') {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-TiPers" class= "js-switch" checked /><script>switcheryLoad();</script >');

                } else {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-TiPers" class= "js-switch" unchecked /><script>switcheryLoad();</script >');

                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGTIPOPERSON' },
                    (response) => {

                        console.log(response);
                        $('#containerCamposea').empty();
                        response.forEach(element => {
                            //alert(element.strTitulo);

                            $('#containerCamposea').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strTiPersCampo1').val(objDatosTipoPer.strTiPersCampo1);
                        $('#strTiPersCampo2').val(objDatosTipoPer.strTiPersCampo2);
                        $('#strTiPersCampo3').val(objDatosTipoPer.strTiPersCampo3);
                        $('#strTiPersCampo4').val(objDatosTipoPer.strTiPersCampo4);
                        $('#strTiPersCampo5').val(objDatosTipoPer.strTiPersCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosTipoPer.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                                if (element.intIdUniOrg == objDatosTipoPer.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosTipoPer.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();


                var txtcod = 'strCoTiPers';
                var txtdes = 'strDesTiPers';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGTIPOPERSON' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function CamposAdicionalesTipoPersonal() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGTIPOPERSON' },
        (response) => {

            console.log(response);
            $('#containerCamposea').empty();
            response.forEach(element => {
                //alert(element.strTitulo);

                $('#containerCamposea').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}

$('#btn-save-change-tipoPerso').on('click', function () {
    validarSession()
    //Datos del Tipo de Personal

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-TiPers').val();
    var _desc = $('#txt-desc-TiPers').val();
    var _activo = $('#chk-activo-TiPers').is(':checked');
    var _camp1 = $('#strTiPersCampo1').val();
    var _camp2 = $('#strTiPersCampo2').val();
    var _camp3 = $('#strTiPersCampo3').val();
    var _camp4 = $('#strTiPersCampo4').val();
    var _camp5 = $('#strTiPersCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Nuevo Tipo de Personal',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-TiPers')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    if (_uorg === '') {
        _uorg = null;
    }

    var tipoPerson = {

        strCoTiPers: _codigo,
        strDesTiPers: _desc,
        intIdUniOrg: _uorg,
        strTiPersCampo1: _camp1,
        strTiPersCampo2: _camp2,
        strTiPersCampo3: _camp3,
        strTiPersCampo4: _camp4,
        strTiPersCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/RegistrarNuevoTipoPerson',
        { tipoPerson: tipoPerson },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Tipo de Personal',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaTipoPersonal();
                    $('.form-hide-tipoPerso').hide();
                    return;
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Tipo Personal';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Tipo Personal',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-tipoPerso').on('click', function () {
    validarSession()
    $('.form-hide-tipoPerso').hide();
});
$('#btn-update-tipoPerso').on('click', function () {
    validarSession()
    //Datos de la categoria


    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-TiPers').val();
    var _desc = $('#txt-desc-TiPers').val();
    var _activo = $('#chk-activo-TiPers').is(':checked');
    var _camp1 = $('#strTiPersCampo1').val();
    var _camp2 = $('#strTiPersCampo2').val();
    var _camp3 = $('#strTiPersCampo3').val();
    var _camp4 = $('#strTiPersCampo4').val();
    var _camp5 = $('#strTiPersCampo5').val();
    var _idcate = $('#txtIdTipPers').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Actualizacion de Tipo de Personal',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-TiPers')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    if (_uorg === '') {
        _uorg = null;
    }

    var tipoPerson = {
        IntIdTiPers: _idcate,
        strCoTiPers: _codigo,
        strDesTiPers: _desc,
        intIdUniOrg: _uorg,
        strTiPersCampo1: _camp1,
        strTiPersCampo2: _camp2,
        strTiPersCampo3: _camp3,
        strTiPersCampo4: _camp4,
        strTiPersCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/ActualizarTipoPerso',
        { objDatos: tipoPerson },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Tipo Personal',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaTipoPersonal();
                    $('.form-hide-tipoPerso').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Tipo Personal';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Tipo Personal',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
/**------------------------------------------------------ */
/**8. Categoría */
/**------------------------------------------------------ */
$('#filActiCate').on('change', function () {
    validarSession()
    TablaCategoria();
});
$('#cboDepenCate').on('change', function () {
    validarSession()
    TablaCategoria();
});
$('#filtroCate').keyup(function () {
    validarSession()
    TablaCategoria();
});
$('#btn-new-categoria').on('click', function () {
    validarSession()
    $('.form-hide-categoria').show();
    $('#btn-update-categoria').hide();
    $('#btn-save-change-categoria').show();
    $.post(
        '/Organizacion/NuevaCategoria',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-categoria .x_content').empty();
                $('.form-hide-categoria .x_content').html(response);
                $('.form-hide-categoria').show();

                switcheryLoad();//checked verde
                CamposAdicionalesCategorias();

                var txtCod = 'strCoCateg';
                var txtdes = 'strDesCateg';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCATEGORIA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtCod) {
                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-save-change-categoria').on('click', function () {
    validarSession()
    //Datos de la categoria

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Categoria').val();
    var _desc = $('#txt-desc-Categoria').val();
    var _activo = $('#chk-activo-Categoria').is(':checked');
    var _camp1 = $('#strCategoriaCampo1').val();
    var _camp2 = $('#strCategoriaCampo2').val();
    var _camp3 = $('#strCategoriaCampo3').val();
    var _camp4 = $('#strCategoriaCampo4').val();
    var _camp5 = $('#strCategoriaCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        new PNotify({
            title: 'Nueva Categoría',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }

    var Categoria = {

        strCoCateg: _codigo,
        strDesCateg: _desc,
        intIdUniOrg: _uorg,
        strCateCampo1: _camp1,
        strCateCampo2: _camp2,
        strCateCampo3: _camp3,
        strCateCampo4: _camp4,
        strCateCampo5: _camp5,
        bitFlActivo: _activo,

    }

    $.post(
        '/Organizacion/RegistrarNuevaCategoria',
        { Categoria: Categoria },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nueva Categoría',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaCategoria();
                    $('.form-hide-categoria').hide();
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Categoría';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Categoría',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-categoria').on('click', function () {
    validarSession()
    $('.form-hide-categoria').hide();
});
var _varTablaCategoria;
function TablaCategoria() {
    var filtrosActivo = $('#filActiCate').val();
    var filtrojer = $('#cboDepenCate').val();
    var strfiltro = $('#filtroCate').val();

    $.ajax({
        url: '/Organizacion/GetTablaFiltradaCategorias',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response)
            if (typeof _varTablaCategoria !== 'undefined') {
                _varTablaCategoria.destroy();
            }
            _varTablaCategoria = $('#tablaCategoria').DataTable({
                data: response,
                columns: [

                    { data: 'strCoCateg' },
                    { data: 'strDesCateg' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdCateg' },
                    { data: 'bitFlActivo' },
                    { data: 'strCateCampo1' },
                    { data: 'strCateCampo2' },
                    { data: 'strCateCampo3' },
                    { data: 'strCateCampo4' },
                    { data: 'strCateCampo5' },
                    { data: 'intIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });

            $('#tablaCategoria tbody').on('click', 'tr button.btn-delete', function () {
                validarSession()
                var data = _varTablaCategoria.row($(this).parents('tr')).data();

                if (data == null) {
                    data = null;

                    var data = _varTablaCategoria.row($(this).parents('li')).data();
                    intentEliminarCategoria(data['intIdCateg'], data['strDesCateg']);

                } else {

                    var data = _varTablaCategoria.row($(this).parents('tr')).data();
                    intentEliminarCategoria(data['intIdCateg'], data['strDesCateg']);

                }


            });

        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#tablaCategoria tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaCategoria.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaCategoria.row($(this).parents('li')).data();
        cardarDatosCategoria(data);
    } else {
        var data = _varTablaCategoria.row($(this).parents('tr')).data();
        cardarDatosCategoria(data);
    }
});

function intentEliminarCategoria(idCategoria, strNomCategoria) {

    swal({
        title: "Eliminar Categoría",
        text: "¿Está seguro de eliminar la categoría    ''<strong>" + strNomCategoria + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaCategoria(idCategoria);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaCategoria(idCategoria) {

    $.post(
        '/Organizacion/EliminarCategoria',
        { intIdCategoria: idCategoria },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaCategoria('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function cardarDatosCategoria(data) {

    $('#btn-update-categoria').show();
    $('#btn-save-change-categoria').hide();

    var objDatosCategoria = {
        intIdCateg: data['intIdCateg'],
        strCoCateg: data['strCoCateg'],
        strDesCateg: data['strDesCateg'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],

        strCateCampo1: data['strCateCampo1'],
        strCateCampo2: data['strCateCampo2'],
        strCateCampo3: data['strCateCampo3'],
        strCateCampo4: data['strCateCampo4'],
        strCateCampo5: data['strCateCampo5']


    }

    console.log(objDatosCategoria);

    $.post(
        '/Organizacion/EditarCategoria',
        { objCategoria: objDatosCategoria },
        (response) => {
            if (response !== '') {
                $('.form-hide-categoria .x_content').empty();
                $('.form-hide-categoria .x_content').html(response);
                $('.form-hide-categoria').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-Categoria').val(objDatosCategoria.strCoCateg);
                $('#txt-desc-Categoria').val(objDatosCategoria.strDesCateg);
                $('#txtIdCate').val(objDatosCategoria.intIdCateg);


                //if (objDatosCargo.strEstadoActivo == 'Activo') {
                //    $('#chk-activo-Cargo ').prop('checked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = true;

                //} else {

                //    $('#chk-activo-Cargo ').prop('unchecked', true);
                //    alert($('#chk-activo-Cargo').is(':checked'));
                //    blnActivo = false;
                //}


                if (objDatosCategoria.strEstadoActivo == 'Activo') {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Categoria" class= "js-switch" checked /><script>switcheryLoad();</script >');

                } else {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Categoria" class= "js-switch" unchecked /><script>switcheryLoad();</script >');

                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGCATEGORIA' },
                    (response) => {

                        console.log(response);
                        $('#containerCampos').empty();
                        response.forEach(element => {

                            $('#containerCamposea').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');

                        });

                        $('#strCategoriaCampo1').val(objDatosCategoria.strCateCampo1);
                        $('#strCategoriaCampo2').val(objDatosCategoria.strCateCampo2);
                        $('#strCategoriaCampo3').val(objDatosCategoria.strCateCampo3);
                        $('#strCategoriaCampo4').val(objDatosCategoria.strCateCampo4);
                        $('#strCategoriaCampo5').val(objDatosCategoria.strCateCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosCategoria.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                                if (element.intIdUniOrg == objDatosCategoria.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosCategoria.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();


                var txtcod = 'strCoCateg';
                var txtdes = 'strDesCateg';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCATEGORIA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function CamposAdicionalesCategorias() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGCATEGORIA' },
        (response) => {

            console.log(response);
            $('#containerCamposea').empty();
            response.forEach(element => {

                $('#containerCamposea').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}
$('#btn-update-categoria').on('click', function () {
    validarSession()
    //Datos de la categoria

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigoCate = $('#txt-cod-Categoria').val();
    var _descCate = $('#txt-desc-Categoria').val();
    var _activo = $('#chk-activo-Categoria').is(':checked');
    var _camp1 = $('#strCategoriaCampo1').val();
    var _camp2 = $('#strCategoriaCampo2').val();
    var _camp3 = $('#strCategoriaCampo3').val();
    var _camp4 = $('#strCategoriaCampo4').val();
    var _camp5 = $('#strCategoriaCampo5').val();
    var _idcate = $('#txtIdCate').val();

    if (_codigoCate === '' || _descCate === '' || _uorg === '') {
        new PNotify({
            title: 'Actualizacion de Categoria',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Categoria')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }

    var Categoria = {
        intIdCateg: _idcate,
        strCoCateg: _codigoCate,
        strDesCateg: _descCate,
        intIdUniOrg: _uorg,
        strCateCampo1: _camp1,
        strCateCampo2: _camp2,
        strCateCampo3: _camp3,
        strCateCampo4: _camp4,
        strCateCampo5: _camp5,
        bitFlActivo: _activo,
    }
    $.post(
        '/Organizacion/ActualizarCategoria',
        { objDatos: Categoria },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Categoría',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaCategoria();
                    $('.form-hide-categoria').hide();
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Categoría';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Categoría',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
/**------------------------------------------------------ */
/**9. Cargo */
/**----------------------------------------------------- */
$('#btn-new-cargo').on('click', function () {
    validarSession()
    $('.form-hide-Cargo').show();
    $('#btn-update-cargo').hide();
    $('#btn-save-change-cargo').show();

    $.post(
        '/Organizacion/NuevoCargo',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-cargo .x_content').empty();
                $('.form-hide-cargo .x_content').html(response);
                $('.form-hide-cargo').show();
                //BuscarUnidades();
                CamposAdicionalesCargo();
                switcheryLoad();//checked verde
                var txtCod = 'strCoCargo';
                var txtdes = 'strDesCargo';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCARGO' },
                    (response) => {
                        response.forEach(element => {

                            if (element.strColumnName == txtCod) {

                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);

                            }
                        });
                    });
            }
            init_checkBox_styles()
        });

});
$('#btn-cancel-cargo').on('click', function () {
    validarSession()
    $('.form-hide-cargo').hide();
});
function BuscarUnidades() {
    $('#cboJerarquia').on('change', function () {
        var id = $('#cboJerarquia option:selected').val();

        if (id == 0 || !id) {
            $('#cbounidsupe').empty();
            $('#cbounidsupe').attr('disabled', true);

            return;
        }
        $.post(
            '/Organizacion/getUnidxJerarquia',
            { IntIdJerOrg: id },
            (response) => {
                if (true) {
                    console.log(response);
                    response.forEach(element => {
                        $('#cbounidsupe').attr('disabled', false);
                        $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '">' + element.strDescripcion + '</option>');
                    });

                }
            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
        $('#cbounidsupe').empty();
    });
}
function CargarUnidOreg() {

    var id = $('#cboJerarquia option:selected').val();

    if (id == 0 || !id) {
        $('#cbounidsupe').empty();
        $('#cbounidsupe').attr('disabled', true);

        return;
    }
    $.post(
        '/Organizacion/getUnidxJerarquia',
        { IntIdJerOrg: id },
        (response) => {
            if (true) {
                console.log(response);
                response.forEach(element => {
                    $('#cbounidsupe').attr('disabled', false);
                    $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '">' + element.strDescripcion + '</option>');
                });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
    $('#cbounidsupe').empty();

}
var _varTablaCCosto;
function TablaCargos() {

    var filtrosActivo = $('#filActiCargo').val();
    var filtrojer = $('#cboDepenCargo').val();
    var strfiltro = $('#filtroCargo').val();

    $.ajax({
        url: '/Organizacion/getTablaFiltradaCargos',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response);
            if (typeof _varTablaCargo !== 'undefined') {
                _varTablaCargo.destroy();
            }
            _varTablaCargo = $('#tablacargo').DataTable({
                data: response,
                columns: [

                    { data: 'strCoCargo' },
                    { data: 'strDesCargo' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdCargo' },
                    { data: 'bitFlActivo' },
                    { data: 'bitFlPrincipal' },
                    { data: 'strCargoCampo1' },
                    { data: 'strCargoCampo2' },
                    { data: 'strCargoCampo3' },
                    { data: 'strCargoCampo4' },
                    { data: 'strCargoCampo5' },
                    { data: 'intIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: true
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//bitFlPrincipal
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });

            $('#tablacargo tbody').on('click', 'tr button.btn-delete', function () {
                validarSession()
                var data = _varTablaCargo.row($(this).parents('tr')).data();

                if (data == null) {
                    data = null;

                    var data = _varTablaCargo.row($(this).parents('li')).data();
                    intentEliminarCargo(data['intIdCargo'], data['strDesCargo']);

                } else {

                    var data = _varTablaCargo.row($(this).parents('tr')).data();
                    intentEliminarCargo(data['intIdCargo'], data['strDesCargo']);

                }


            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#tablacargo tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaCargo.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaCargo.row($(this).parents('li')).data();
        cardarDatosCargo(data);
    } else {
        var data = _varTablaCargo.row($(this).parents('tr')).data();
        cardarDatosCargo(data);
    }
});

function intentEliminarCargo(idCargo, strNomCargo) {

    swal({
        title: "Eliminar Cargo",
        text: "¿Está seguro de eliminar el Cargo    ''<strong>" + strNomCargo + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaCargo(idCargo);
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaCargo(idCargo) {
    $.post(
        '/Organizacion/EliminarCargo',
        { intIdCargo: idCargo },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaCargos('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

$('#filActiCargo').on('change', function () {
    validarSession()
    TablaCargos();
});

$('#cboDepenCargo').on('change', function () {
    validarSession()
    TablaCargos();
});

$('#filtroCargo').keyup(function () {
    validarSession()
    TablaCargos();
});

function cardarDatosCargo(data) {
    $('#btn-save-change-cargo').hide();

    var objDatosCargo = {
        intIdCargo: data['intIdCargo'],
        strCoCargo: data['strCoCargo'],
        strDesCargo: data['strDesCargo'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],
        bitFlPrincipal: data['bitFlPrincipal'],

        strCargoCampo1: data['strCargoCampo1'],
        strCargoCampo2: data['strCargoCampo2'],
        strCargoCampo3: data['strCargoCampo3'],
        strCargoCampo4: data['strCargoCampo4'],
        strCargoCampo5: data['strCargoCampo5']


    }

    console.log(objDatosCargo);

    $.post(
        '/Organizacion/EditarCargo',
        { objCargo: objDatosCargo },
        (response) => {
            if (response !== '') {
                $('.form-hide-cargo .x_content').empty();
                $('.form-hide-cargo .x_content').html(response);
                $('.form-hide-cargo').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-Cargo').val(objDatosCargo.strCoCargo);
                $('#txt-desc-Cargo').val(objDatosCargo.strDesCargo);
                $('#txt-desc-Cargo').val(objDatosCargo.strDesCargo);
                $('#txtIdCar').val(objDatosCargo.intIdCargo);


                if (objDatosCargo.strEstadoActivo == 'Activo') {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Cargo" class= "js-switch" checked /><script>switcheryLoad();</script >');

                } else {
                    $('#11').html('<label>Activo</label> <input type = "checkbox" id = "chk-activo-Cargo" class= "js-switch" unchecked /><script>switcheryLoad();</script >');

                }

                if (data.bitFlPrincipal === true) {
                    $('#checkPrincipal').iCheck('check')
                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGCARGO' },
                    (response) => {

                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');



                        });

                        $('#strCargoCampo1').val(objDatosCargo.strCargoCampo1);
                        $('#strCargoCampo2').val(objDatosCargo.strCargoCampo2);
                        $('#strCargoCampo3').val(objDatosCargo.strCargoCampo3);
                        $('#strCargoCampo4').val(objDatosCargo.strCargoCampo4);
                        $('#strCargoCampo5').val(objDatosCargo.strCargoCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosCargo.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        response.forEach(element => {
                            $('#cbounidsupe').attr('disabled', false);
                            $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                            if (element.intIdUniOrg == objDatosCargo.intIdUniOrg) {
                                $("#cbounidsupe option").filter(function () {
                                    return this.text == objDatosCargo.strDescripcion;
                                }).attr('selected', true);
                            }

                        });

                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                //$('#cbounidsupe').empty();
            }
            $('#btn-update-cargo').show();

            var txtcod = 'strCoCargo';
            var txtdes = 'strDesCargo';

            $.post(
                '/Organizacion/ListarCaracteresMax',
                { strMaestro: 'TGCARGO' },
                (response) => {
                    response.forEach(element => {
                        if (element.strColumnName == txtcod) {
                            $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                        }
                        if (element.strColumnName == txtdes) {
                            $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                        }
                    });
                });


        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
//function BuscarIDjer() {

//       // var idJer = $('#cboJerarquia option:selected').val();
//       //var idOrg = $('#cbounidsupe option:selected').val();
//       var codid = $('#txtIdCar').val();

//       alert(codid);
//       $.post(
//           '/Organizacion/getCampoJerOrgxCargo',
//           { intidCargo: codid },
//           alert('2' + codid),
//           (response) => {
//               console.log(response);
//               alert('13');
//               if (true) {
//                   console.log(response);
//                   response.forEach(element => {
//                       $('#cbounidsupe').attr('disabled', false);
//                       $('#cbounidsupe').select('<option value="' + element.intIdUniOrg + '"></option>');
//                   });

//               }
//           }
//       ).fail(function (result) {
//           alert('ERROR ' + result.status + ' ' + result.statusText);
//       });
//       $('#cbounidsupe').empty();


//   }
//function BuscarCargo() {
//    var filtrosActivo = $('#filActi').val();
//    var filtrojer = $('#campJerar').val();
//    var strfiltro = $('#filtro').val();
//    var activado;
//   // var cargo = $('#tablacargo');

//    $.post(
//        '/Organizacion/getTablaFiltradaCargos',
//        { IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer },
//        (response) => {

//                $('#tablacargo tbody').empty();

//            response.forEach(element => {
//                if (element.bitFlActivo) {
//                activado = "Activo";
//            }
//            else {
//                activado = "Inactivo";
//                }

//          $('#tablaBodyCargo').append(
//              '<tr intid="' + element.intIdCargo + '"  idact="' + activado + '" idcar="' + element.strCoCargo + '"   iddesc="' + element.strDesCargo + '"   > <th>' + element.strCoCargo + '</th > <th> ' + element.strDesCargo + '</th > <th > ' + element.strNomJerOrg + '</th><th >' + element.strDescripcion + '</th ><th>' + activado + ' </th><th><a href="#"  class="btn btn-success btn-xs btn-edit"><i class="fa fa-pencil"></i> Editar  </a>' + '<a href = "#"  class= "btn btn-primary btn-xs  btn-dele" > <i class="fa fa-trash-o"></i> Eliminar </a ></th></tr>'
//                );
//            });
//            EditarCargo();
//            intentEliminarCarg();
//        });
//}
function CamposAdicionalesCargo() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGCARGO' },
        (response) => {

            console.log(response);
            $('#containerCampos').empty();
            response.forEach(element => {

                $('#containerCampos').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}
$('#btn-save-change-cargo').on('click', function () {
    validarSession()
    //Datos del Cargo

    var _uorg = $('#cbounidsupe option:selected').val();    //selected
    var _codigo = $('#txt-cod-Cargo').val();
    var _desc = $('#txt-desc-Cargo').val();
    var _activo = $('#chk-activo-Cargo').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');
    if ($('#strCargoCampo1').val() == null) {
        var _camp1 = null;
    } else {
        var _camp1 = $('#strCargoCampo1').val();
    }
    if ($('#strCargoCampo2').val() == null) {
        var _camp2 = null;
    } else {
        var _camp2 = $('#strCargoCampo2').val();
    } if ($('#strCargoCampo3').val() == null) {
        var _camp3 = null;
    } else {
        var _camp3 = $('#strCargoCampo3').val();
    } if ($('#strCargoCampo4').val() == null) {
        var _camp4 = null;
    } else {
        var _camp4 = $('#strCargoCampo4').val();
    } if ($('#strCargoCampo5').val() == null) {
        var _camp5 = null;
    } else {
        var _camp5 = $('#strCargoCampo5').val();
    }

    if (_codigo === '' || _desc === '' || _uorg === '') {

        new PNotify({
            title: 'Nuevo Cargo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Cargo')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === '') {
        _uoPadre = null;
    }

    var Cargo = {

        strCoCargo: _codigo,
        strDesCargo: _desc,
        intIdUniOrg: _uorg,
        strCargoCampo1: _camp1,
        strCargoCampo2: _camp2,
        strCargoCampo3: _camp3,
        strCargoCampo4: _camp4,
        strCargoCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal,
    }

    $.post(
        '/Organizacion/RegistrarNuevoCargo',
        { Cargo: Cargo },
        (response) => {
            console.log(response);

            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Cargo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'

                    });
                    $('.form-hide-cargo').hide();
                    TablaCargos();

                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Cargo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Cargo',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }

    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});
$('#btn-update-cargo').on('click', function () {
    validarSession()
    //Datos del Cargo
    var _codcargo = $('#txtIdCar').val();
    var _uorg = $('#cbounidsupe option:selected').val();    //selected
    var _codigo = $('#txt-cod-Cargo').val();
    var _desc = $('#txt-desc-Cargo').val();
    var _activo = $('#chk-activo-Cargo').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');
    if ($('#strCargoCampo1').val() == null) {
        var _camp1 = null;
    } else {
        var _camp1 = $('#strCargoCampo1').val();
    }
    if ($('#strCargoCampo2').val() == null) {
        var _camp2 = null;
    } else {
        var _camp2 = $('#strCargoCampo2').val();
    } if ($('#strCargoCampo3').val() == null) {
        var _camp3 = null;
    } else {
        var _camp3 = $('#strCargoCampo3').val();
    } if ($('#strCargoCampo4').val() == null) {
        var _camp4 = null;
    } else {
        var _camp4 = $('#strCargoCampo4').val();
    } if ($('#strCargoCampo5').val() == null) {
        var _camp5 = null;
    } else {
        var _camp5 = $('#strCargoCampo5').val();
    }

    if (_codigo === '' || _desc === '' || _uorg === 0) {
        new PNotify({
            title: 'Actualizacion de Cargo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Cargo')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uorg === 0) {
        new PNotify({
            title: 'Actualizacion de Cargo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    if (_uorg === '') {
        _uoPadre = null;
    }


    var Cargo = {
        intIdCargo: _codcargo,
        strCoCargo: _codigo,
        strDesCargo: _desc,
        intIdUniOrg: _uorg,
        strCargoCampo1: _camp1,
        strCargoCampo2: _camp2,
        strCargoCampo3: _camp3,
        strCargoCampo4: _camp4,
        strCargoCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal
    }

    $.post(
        '/Organizacion/ActualizarCargo',
        { objDatos: Cargo },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Cargo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaCargos();
                    $('.form-hide-cargo').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Cargo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Cargo',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }

    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
/**----------------------------------------------------- */
/**10. Unidad Organizacional */
/**----------------------------------------------------- */
$('#filActiUniOrg').on('change', function () {
    TablaUnidadOrg();
});
$('#cboJerarUniOrg').on('change', function () {
    TablaUnidadOrg();
});
$('#filtroUniOrg').keyup(function () {
    TablaUnidadOrg();
});
function intentEliminarUndOrg(idUndOrg, strDesc) {
    swal({
        title: "Eliminar Unidad Organizacional",
        text: "¿Está seguro de eliminar la Unidad Organizacional    ''<strong>" + strDesc + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaUndOrg(idUndOrg);
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaUndOrg(idUndOrg) {
    $.post(
        '/Organizacion/EliminarUnidad',
        { intIdUniOrg: idUndOrg },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaUnidadOrg('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
var _varTablaUndOrg;

function TablaUnidadOrg() {
    var filtroActivo = $('#filActiUniOrg').val();
    var strfiltro = $('#filtroUniOrg').val();
    var filtrojer = $('#cboJerarUniOrg').val();

    $.ajax({
        url: '/Organizacion/GetTablaUnidOrg',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response)
            if (typeof _varTablaUndOrg !== 'undefined') {
                _varTablaUndOrg.destroy();
            }
            _varTablaUndOrg = $('#tablaUnidOrg').DataTable({
                data: response,
                columns: [

                    { data: 'strCodigo' },
                    { data: 'strDescripcion' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcionSup' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdUniOrg' },
                    { data: 'strRuc' },
                    { data: 'strDirLogo' },
                    { data: 'intIdPerResp' },
                    { data: 'intIdRepLeg' },
                    { data: 'intIdUbigeo' }

                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });



        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#tablaUnidOrg  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaUndOrg.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaUndOrg.row($(this).parents('li')).data();
        intentEliminarUndOrg(data['intIdUniOrg'], data['strDescripcion']);

    } else {

        var data = _varTablaUndOrg.row($(this).parents('tr')).data();
        intentEliminarUndOrg(data['intIdUniOrg'], data['strDescripcion']);

    }


});

$('#tablaUnidOrg  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaUndOrg.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaUndOrg.row($(this).parents('li')).data();
        cardarDatosUndOrg(data);
    } else {
        var data = _varTablaUndOrg.row($(this).parents('tr')).data();
        cardarDatosUndOrg(data);
    }

});

function cardarDatosUndOrg(data) {

    $('#btn-update-undOrganiza').show();
    $('#btn-save-change-undOrganiza').hide();

    var bitFlActivo = data['bitFlActivo'];
    var intIdUniOrg = data['intIdUniOrg'];
    var strRuc = data['strRuc'];
    var RutImg = data['strDirLogo'];
    var intIdPerResp = data['intIdPerResp'];
    var intIdRepLeg = data['intIdRepLeg'];

    var intIdUbigeo = data['intIdUbigeo'];

    $.post(
        '/Organizacion/EditarUnidadOrg',
        { intIdUniOrg: data.intIdUniOrg },
        (response) => {
            if (response !== '') {

                $('.form-hide-undOrganiza .x_content').empty();
                $('.form-hide-undOrganiza .x_content').html(response);
                $('.form-hide-undOrganiza').show();
                $('#btn-save-change-undOrganiza').hide();
                $('#btn-update-undOrganiza').show();
                switcheryLoad();

                init_checkBox_styles();
                //  onchange_jerarquia();
                $.post(
                    '/Organizacion/ObtenerOrganizacionPorsuPK',
                    { intIdOrganizacion: data.intIdUniOrg },
                    (response) => {
                        var element = response[0];
                        console.log(element);

                        $("#cboJerarquia option").filter(function () {
                            return this.text == element.strNomJerOrg;
                        }).attr('selected', true);

                        var idER = $("#cboJerarquia").val();

                        $.post(
                            '/Organizacion/getUnidSup',
                            { IntIdJerOrg: idER },
                            (response) => {
                                if (true) {
                                    response.forEach(element => {
                                        $('#cbounidsup').attr('disabled', false);
                                        $('#cbounidsup').append('<option value="' + element.intIdUniOrg + '">' + element.strDescripcion + '</option>');


                                    });
                                    if (idER !== 0 || idER !== '') {
                                        $('#cbounidsup').attr('disabled', false);
                                        $('#cbounidsup').val(element.intIdUniOrgSup);
                                    }
                                }
                            }
                        ).fail(function (result) {
                            alert('ERROR ' + result.status + ' ' + result.statusText);
                        });

                        $.post(
                            '/Organizacion/CamposAdicionalesUO',
                            { strEntidad: 'TGUNIDORG', intidJerOrg: idER },
                            (response) => {

                                console.log(response);
                                $('#containerCamposea').empty();
                                response.forEach(ele => {
                                    $('#containerCamposea').append(
                                        ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + ele.strTitulo
                                        + '</label><input id="' + ele.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');
                                });

                                if (element.strUOCampo1 != null || element.strUOCampo1 != "") {
                                    $('#strUOCampo1').val(element.strUOCampo1);
                                }
                                if (element.strUOCampo2 != null || element.strUOCampo2 != "") {
                                    $('#strUOCampo2').val(element.strUOCampo2);
                                }
                                if (element.strUOCampo3 != null || element.strUOCampo3 != "") {
                                    $('#strUOCampo3').val(element.strUOCampo3);
                                }
                                if (element.strUOCampo4 != null || element.strUOCampo4 != "") {
                                    $('#strUOCampo4').val(element.strUOCampo4);
                                }
                                if (element.strUOCampo5 != null || element.strUOCampo5 != "") {
                                    $('#strUOCampo5').val(element.strUOCampo5);
                                }
                            });
                        $('#idorg').val(element.intIdUniOrg);

                        OcultarIneDITAR();

                        $('#TipVia').val(element.intidTipoVia);

                        $('#txt-cod-UO').val(element.strCodigo);
                        $('#txt-desc-UO').val(element.strDescripcion);
                        $('#TXTTIPVIA').val(element.strDirFiscal);

                        $('#cboDisrict-UO').val(element.intIdUbigeo);
                        $('#txtIntidUbigeo').val(data.intIdUbigeo)
                        $('#CboPais').val(element.intextra3);

                        $('#idLegal').val(element.intIdRepLeg);
                        $('#idPerLeg').val(element.intIdPerResp);

                        $.post(
                            '/Personal/ListarCombos',
                            {
                                strEntidad: 'TGUBIGEO',
                                intIdFiltroGrupo: element.intextra1,
                                strGrupo: 'DIST',
                                strSubGrupo: '',
                            },
                            response => {
                                $('#CboDistrito').empty()
                                $('#CboDistrito').append('<option value="">Seleccione</option>')
                                response.forEach(obj => {
                                    $('#CboDistrito').append('<option value="' + obj.intidTipo + '" >' + obj.strDeTipo + '</option>')
                                    if (obj.intidTipo == element.intIdUbigeo) {
                                        $('#CboDistrito').val(obj.intidTipo)
                                        $('#txtUbigeo').val(obj.strDeTipo)
                                        $('#txtUbigeo').attr('disabled', true)
                                    }
                                })
                            }
                        )

                        $.post(
                            '/Personal/ListarCombos',
                            {
                                strEntidad: 'TGUBIGEO',
                                intIdFiltroGrupo: element.intextra2,
                                strGrupo: 'REG',
                                strSubGrupo: '',
                            },
                            response => {
                                $('#CboProvincia').empty()
                                $('#CboProvincia').append('<option value="">Seleccione</option>')
                                response.forEach(obj => {
                                    $('#CboProvincia').append('<option value="' + obj.intidTipo + '" >' + obj.strDeTipo + '</option>')
                                    if (obj.intidTipo == element.intextra1) {
                                        $('#CboProvincia').val(obj.intidTipo)
                                    }
                                })
                            }
                        )

                        $.post(
                            '/Personal/ListarCombos',
                            {
                                strEntidad: 'TGUBIGEO',
                                intIdFiltroGrupo: element.intextra3,
                                strGrupo: 'DEPART',
                                strSubGrupo: '',
                            },
                            response => {
                                $('#CboRegion').empty()
                                $('#CboRegion').append('<option value="">Seleccione</option>')
                                response.forEach(obj => {
                                    $('#CboRegion').append('<option value="' + obj.intidTipo + '" >' + obj.strDeTipo + '</option>')
                                    if (obj.intidTipo == element.intextra2) {
                                        $('#CboRegion').val(obj.intidTipo)
                                    }
                                })
                            }
                        )

                        var filtro = document.getElementById("Legal").value;
                        console.log(filtro);

                        var relacion = new Array();

                        $.post(
                            '/Organizacion/getLegal',
                            { strfiltroLegal: filtro },
                            (response) => {
                                if (true) {
                                    console.log(response);
                                    lstRepLeg = response;
                                    $(relacion).empty();
                                    var i = 0;
                                    response.forEach(element => {
                                        if (element.IntIdRepLeg == intIdRepLeg) {
                                            relacion[i] = element.strNombres + ' ' + element.strApePaterno + ' ' + element.strApeMaterno;

                                            $('#Legal').empty();
                                            $('#Legal').val(relacion[i]);
                                        }
                                        i++;
                                    });
                                    $('#Legal').autocomplete({
                                        source: [relacion]

                                    }).on('selected.xdsoft', function (e, datum) {
                                        console.log(datum);
                                        idRL = lstRepLeg.find(x => x.strNombres + ' ' + x.strApePaterno + ' ' + x.strApeMaterno === datum).IntIdRepLeg;
                                        console.log(idRL);
                                        $('#idLegal').val(idRL);
                                    });

                                }
                            }
                        );

                        var filtro = document.getElementById("Respon").value;
                        console.log(filtro);
                        var listado = new Array();
                        $.post(
                            '/Organizacion/getRes',
                            { strfiltroPersonal: filtro },
                            (response) => {
                                console.log(response);
                                if (true) {

                                    lstResp = response;
                                    $(listado).empty();
                                    var i = 0;

                                    response.forEach(element => {
                                        if (element.intIdPersonal == intIdPerResp) {
                                            listado[i] = element.strNombres + ' ' + element.strApePaterno + ' ' + element.strApeMaterno;
                                            $('#Respon').empty();
                                            $('#Respon').val(listado[i]);
                                        }
                                        i++;
                                    });

                                    $('#Respon').autocomplete({
                                        source: [listado]
                                    }).on('selected.xdsoft', function (e, datum) {
                                        console.log(datum);
                                        idRL = lstResp.find(x => x.strNombres + ' ' + x.strApePaterno + ' ' + x.strApeMaterno === datum).intIdPersonal;
                                        console.log(idRL);
                                        $('#idPerLeg').val(idRL);
                                    });
                                }
                            }
                        )

                        $('#txt-ruc-UO').val(strRuc);
                        if (RutImg !== '') {
                            //$('#ViewPreview').html('<img id="imgCarga" src=' + RutImg + ' style="width:100px;height:100px" />');

                            Imagen_GC(RutImg, "UO");//añadido 26.03.2021
                        }
                        if (bitFlActivo) {
                            $('#11').html('<label>Activo</label> <input type = "checkbox" id="chk-activo-UO" class= "js-switch" checked /><script>switcheryLoad();</script >');

                        } else {
                            $('#11').html('<label>Activo</label> <input type = "checkbox" id="chk-activo-UO" class= "js-switch" unchecked /><script>switcheryLoad();</script >');

                        }

                        if (element.bitFlPrincipal === true) {
                            $('#checkPrincipal').iCheck('check')
                        }

                    });

            }
        });
}

$('#btn-save-change-undOrganiza').on('click', function () {
    validarSession()
    // var UnidadOrg = data.imgLogo;
    //var Byte _imgLogo;
    //Datos de la Unidad Organizacional

    $(".notifry_error").html('')

    var _nivelJerar = $('#cboJerarquia option:selected').val();   //selected
    var _uoPadre = $('#cbounidsup option:selected').val();
    var _codigo = $('#txt-cod-UO').val();
    var _desc = $('#txt-desc-UO').val();
    var _activo = $('#chk-activo-UO').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');

    if ($('#txtIntidUbigeo').val() == "") {
        var _ubigeo = null;
    } else {
        var _ubigeo = $('#txtIntidUbigeo').val();
    }
    var _ruc = $('#txt-ruc-UO').val();
    var _legal = $('#idLegal').val();
    var _resp = $('#idPerLeg').val();
    var _via = $('#TipVia option:selected').val();

    var _dirfiscal = $('#TXTTIPVIA').val();
    var _camp1 = $('#strUOCampo1').val();
    var _camp2 = $('#strUOCampo2').val();
    var _camp3 = $('#strUOCampo3').val();
    var _camp4 = $('#strUOCampo4').val();
    var _camp5 = $('#strUOCampo5').val();
    var _imgRuta = $('#txt-ruta').val();

    if (_nivelJerar === '' || _codigo === '' || _desc === '' || _uoPadre === '') {
        new PNotify({
            title: 'Nueva Unidad Organizacional',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt-cod-UO')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_ruc != "" && !$('#txt-ruc-UO')[0].validity.valid) {
        new PNotify({
            title: 'RUC',
            text: 'Ingrese solo numeros, 11 caracteres',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uoPadre === '') {
        _uoPadre = null;
    }

    var UnidadOrg = {
        strCodigo: _codigo,
        strDescripcion: _desc,
        intIdJerOrg: _nivelJerar,
        strCoJerPadre: _uoPadre,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal,
        intIdUbigeo: _ubigeo,
        intIdUniOrgSup: _uoPadre,
        intIdRepLeg: _legal,
        intIdPerResp: _resp,
        intidTipoVia: _via,
        strRuc: _ruc,
        strDirLogo: _imgRuta,
        strDirFiscal: _dirfiscal,
        strUOcampo1: _camp1,
        strUOcampo2: _camp2,
        strUOcampo3: _camp3,
        strUOcampo4: _camp4,
        strUOcampo5: _camp5
    }



    function FiltroLegal() {
        var filtro = document.getElementById("Legal").value;
        console.log(filtro);
        var relacion = new Array();
        $.post(
            '/Organizacion/getLegal',
            { strfiltroLegal: filtro },
            (response) => {
                if (true) {

                    response.forEach(element => {
                        $('#txtPersonaResponsable').val(element.intIdRepLeg);
                    });
                }
            }
        )
    }




    $.post(
        '/Organizacion/InsertUpdateUnidadOrg',
        { UnidadOrg: UnidadOrg, intTipoOperacion: 1},
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {

                    new PNotify({
                        title: 'Nueva Unidad Organizacional',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    $('.form-hide-undOrganiza').hide();
                    TablaUnidadOrg();
                    return;

                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Unidad Organizacional';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Unidad Organizacional',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }

        }

    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-update-undOrganiza').on('click', function () {
    validarSession()
    // var UnidadOrg = data.imgLogo;
    //var Byte _imgLogo;
    //Datos de la Unidad Organizacional

    $(".notifry_error").html("")

    var _nivelJerar = $('#cboJerarquia option:selected').val();   //selected
    var _uoPadre = $('#cbounidsup option:selected').val();
    var _codigo = $('#txt-cod-UO').val();
    var _desc = $('#txt-desc-UO').val();
    var _activo = $('#chk-activo-UO').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');

    if ($('#txtIntidUbigeo').val() == "") {
        var _ubigeo = null;
    } else {
        var _ubigeo = $('#txtIntidUbigeo').val();
    }
    var _ruc = $('#txt-ruc-UO').val();
    var _legal = $('#idLegal').val();
    var _resp = $('#idPerLeg').val();
    var _via = $('#TipVia option:selected').val();

    var _dirfiscal = $('#TXTTIPVIA').val();
    var _camp1 = $('#strUOCampo1').val();
    var _camp2 = $('#strUOCampo2').val();
    var _camp3 = $('#strUOCampo3').val();
    var _camp4 = $('#strUOCampo4').val();
    var _camp5 = $('#strUOCampo5').val();
    var _imgRuta = $('#txt-ruta').val();
    var _intidorg = $('#idorg').val();

    //CAMBIO 02: En la línea 9594 aprox del all.js añadir: HG 06.04.2021
    //---------------------------------------------------------------------------------------------------------------
    if (_nivelJerar === '' || _codigo === '' || _desc === '' /*|| _uoPadre === ''*/) {
        new PNotify({
            title: 'Nueva Unidad Organizacional',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    //VALIDAR QUE SOLO LA JERRQUIA ORGANIZACIONAL NO DEPENDA DE NINGUNA JERARQUÍA
    if (_nivelJerar !== '1' && _uoPadre === '') {
        new PNotify({
            title: 'Nueva Unidad Organizacional',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }
    //---------------------------------------------------------------------------------------------------------------

    if (!$('#txt-cod-UO')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_ruc != "" && !$('#txt-ruc-UO')[0].validity.valid) {
        new PNotify({
            title: 'RUC',
            text: 'Ingrese solo numeros, 11 caracteres',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_uoPadre === '') {
        _uoPadre = null;
    }

    var UnidadOrg = {
        strCodigo: _codigo,
        strDescripcion: _desc,
        intIdJerOrg: _nivelJerar,
        strCoJerPadre: _uoPadre,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal,
        intIdUbigeo: _ubigeo,
        intIdUniOrgSup: _uoPadre,
        intIdRepLeg: _legal,
        intIdPerResp: _resp,
        intidTipoVia: _via,
        strRuc: _ruc,
        strDirLogo: _imgRuta,
        strDirFiscal: _dirfiscal,
        strUOcampo1: _camp1,
        strUOcampo2: _camp2,
        strUOcampo3: _camp3,
        strUOcampo4: _camp4,
        strUOcampo5: _camp5,
        intIdUniOrg: _intidorg
    }

    function FiltroLegal() {
        var filtro = document.getElementById("Legal").value;
        console.log(filtro);
        var relacion = new Array();
        $.post(
            '/Organizacion/getLegal',
            { strfiltroLegal: filtro },
            (response) => {
                if (true) {
                    response.forEach(element => {
                        $('#txtPersonaResponsable').val(element.intIdRepLeg);
                    });
                }
            }
        )
    }
    $.post(
        '/Organizacion/InsertUpdateUnidadOrg',
        { UnidadOrg: UnidadOrg, intTipoOperacion: 2 },
        (response) => {

            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización Unidad Organizacional',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaUnidadOrg();
                    $('.form-hide-undOrganiza').hide();
                    return;
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Unidad Organizacional';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Unidad Organizacional',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });



});

function OcultarIn() {
    $('#cboJerarquia').on('change', function () {
        $('#REPLEG').attr('hidden', true);
        $('#PERRESP').attr('hidden', true);
        $('#RUC').attr('hidden', true);
        $('#DIRF').attr('hidden', true);
        $('#UBIGEO').attr('hidden', true);
        $('#LOGO').attr('hidden', true);
        $('#CAM1').attr('hidden', true);
        $('#CAM2').attr('hidden', true);
        $('#CAM3').attr('hidden', true);
        $('#CAM4').attr('hidden', true);
        $('#CAM5').attr('hidden', true);
        var filtrado = $('#cboJerarquia option:selected').val();
        var strfiltr = filtrado.toString();

        var intidJerOrg = $(this).val()
        $.post(
            '/Organizacion/CamposAdicionalesUO',
            {
                strEntidad: 'TGUNIDORG',
                intidJerOrg
            },
            (response) => {
                console.log(response);
                $('#containerCamposea').empty();
                response.forEach(element => {

                    $('#containerCamposea').append(
                        ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                        + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');

                });
                if (response.strUOCampo1 != null) {
                    $('#strUOCampo1').val(element.strUOCampo1);
                }
                if (response.strUOCampo2 != null) {
                    $('#strUOCampo2').val(element.strUOCampo2);
                }
                if (response.strUOCampo3 != null) {
                    $('#strUOCampo3').val(element.strUOCampo3);
                }
                if (response.strUOCampo4 != null) {
                    $('#strUOCampo4').val(element.strUOCampo4);
                }
                if (response.strUOCampo5 != null) {
                    $('#strUOCampo5').val(element.strUOCampo5);
                }
            });


        if (filtrado == 0 || filtrado == null) {
            return
        }
        if (filtrado !== null) {
            $.post(
                '/Organizacion/GetFiltroObliJer',
                { filtro: strfiltr },
                (response) => {
                    response.forEach(element => {
                        $('#' + element.strCoCampo).attr('hidden', false);
                        if (element.bitObligatorio == true) {
                            $('#' + element.strCoCampo).attr('requerid', true);
                        }
                    });
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });
        }
        else {
            return;
        }
        FiltroLegal();
        FiltroRes();
    });
}
function OcultarIneDITAR() {

    $('#REPLEG').attr('hidden', true);
    $('#PerResp').attr('hidden', true);
    $('#RUC').attr('hidden', true);
    $('#DIRF').attr('hidden', true);
    $('#UBIGEO').attr('hidden', true);
    $('#LOGO').attr('hidden', true);
    $('#CAM1').attr('hidden', true);
    $('#CAM2').attr('hidden', true);
    $('#CAM3').attr('hidden', true);
    $('#CAM4').attr('hidden', true);
    $('#CAM5').attr('hidden', true);
    var filtrado = $('#cboJerarquia option:selected').val();
    var strfiltr = filtrado.toString();

    if (filtrado == 0 || filtrado == null) {
        return
    }
    if (filtrado !== null) {
        $.post(
            '/Organizacion/GetFiltroObliJer',
            { filtro: strfiltr },
            (response) => {
                if (true) {
                    response.forEach(element => {
                        $('#' + element.strCoCampo).attr('hidden', false);
                        if (element.bitObligatorio == true) {
                            $('#' + element.strCoCampo).attr('requerid', true);
                        }
                    });
                }
            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
    }
    else {
        return;
    }
}
var _id;
function BuscarUnidad() {
    $('#cboJerarquia').on('change', function () {

        var _id = $('#cboJerarquia option:selected').val();

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: 0,
                strEntidad: 'TGUNIDORG',
                intIdFiltroGrupo: _id,
                strGrupo: 'JERAR',
                strSubGrupo: 'UNIORG',
            },
            response => {
                $('#cbounidsup').empty()
                $('#cbounidsup').attr('disabled', false)
                $('#cbounidsup').append('<option value="">Seleccione</option>')

                response.forEach(element => {
                    $('#cbounidsup').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
                //INICIO DE SOLUCION PARA LA OBSERVACION N° 10 HG 31.03.21
                if (response.length < 1) {
                    $('#cbounidsup').attr('disabled', true); //Añadido HG 31.03.21
                }
                //FIN DE SOLUCION PARA LA OBSERVACION N° 10 HG 31.03.21
            }
        )
    });
}
$('#btn-new-undOrganiza').on('click', function () {
    validarSession()
    $('.form-hide-undOrganiza').show();

    $('#btn-update-undOrganiza').hide();
    $('#btn-save-change-undOrganiza').show();

    $.post(
        '/Organizacion/NuevaUnidadOrg',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-undOrganiza .x_content').empty();
                $('.form-hide-undOrganiza .x_content').html(response);
                $('.form-hide-undOrganiza').show();
                switcheryLoad();
                BuscarUnidad();
                Ubigeo_Deparment();
                Ubigeo_Province();
                Ubigeo_District();
                OcultarIn();
            }
            init_checkBox_styles()
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
var lstRepLeg = null;
var lstResp = null;
var idRL = 0;
function FiltroLegal() {
    var filtro = document.getElementById("Legal").value;
    var relacion = [];

    $.post(
        '/Organizacion/getLegal',
        { strfiltroLegal: filtro },
        (response) => {
            if (true) {
                console.log(response);
                lstRepLeg = response;

                var i = 0;

                response.forEach(element => {
                    relacion[i] = element.strNombres + ' ' + element.strApePaterno + ' ' + element.strApeMaterno;
                    i++;
                });
                $('#Legal').autocomplete({
                    source: [relacion]
                }).on('selected.xdsoft', function (e, datum) {
                    console.log(datum);
                    idRL = lstRepLeg.find(x => x.strNombres + ' ' + x.strApePaterno + ' ' + x.strApeMaterno === datum).IntIdRepLeg;
                    console.log(idRL);
                    $('#idLegal').val(idRL);
                });
            }
        }
    );
};
function FiltroRes() {
    var filtro = document.getElementById("Respon").value;
    console.log(filtro);
    var listado = [];
    $.post(
        '/Organizacion/getRes',
        { strfiltroPersonal: filtro },
        (response) => {
            console.log(response);
            if (true) {
                lstResp = response;
                var i = 0;
                response.forEach(element => {
                    listado[i] = element.strNombres + ' ' + element.strApePaterno + ' ' + element.strApeMaterno;
                    i++;
                });

                $('#Respon').autocomplete({
                    source: [listado]
                }).on('selected.xdsoft', function (e, datum) {
                    idRL = lstResp.find(x => x.strNombres + ' ' + x.strApePaterno + ' ' + x.strApeMaterno === datum).intIdPersonal;
                    $('#idPerLeg').val(idRL);
                });
            }
        }
    )
}

function limpiar() {
    document.getElementById('inputImage').value = "";
    $("#imageupload").attr("src", "../../images/user.png");
}
function previewFile() {
    var preview = document.querySelector('#imageupload');
    var file = document.querySelector('#inputImage').files[0];
    var reader = new FileReader();
    var NombreArchivo;
    reader.addEventListener("load", function () {
        preview.src = reader.result;
        console.log($("#imageupload"));

    }, false);
    if (file) {
        reader.readAsDataURL(file);
    }
}
function Ubigeo_Deparment() {
    $('#cboRepPais-UO').on('change', function () {
        $('#cboProvince-UO').empty();
        $('#cboDisrict-UO').empty();
        var paisId = $('#cboRepPais-UO option:selected').val();
        paisId = $('#cboRepPais-UO').val();
        $.post(
            '/Organizacion/getcboRepDep',
            { intcodPais: paisId },

            (response) => {
                if (true) {
                    $('#cboDeparment-UO').empty();
                    $('#cboDeparment-UO').attr('disabled', false);
                    $('#cboDeparment-UO').append('<option value="00">Seleccione</option>');
                    response.forEach(element => {

                        $('#cboDeparment-UO').append('<option value="' + element.strCoUbigeo + '">' + element.strDesUbigeo + '</option>');
                    });


                }

            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
    });

}
function Ubigeo_Province() {
    $('#cboDeparment-UO').on('change', function () {
        $('#cboDisrict-UO').empty();
        var DepartId = $('#cboDeparment-UO option:selected').val();
        var PaisDepId = $('#cboRepPais-UO option:selected').val();
        $.post(
            '/Organizacion/getcboRepProvince',
            {
                strCoDep: DepartId,
                stridPaisDep: PaisDepId
            },
            (response) => {
                if (true) {
                    $('#cboProvince-UO').empty();
                    $('#cboProvince-UO').attr('disabled', false);
                    $('#cboProvince-UO').append('<option value="00">Seleccione</option>');
                    response.forEach(element => {
                        $('#cboProvince-UO').append('<option value="' + element.strCoUbigeo + '">' + element.strDesUbigeo + '</option>');
                    });

                }

            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
    });

}
function Ubigeo_District() {
    $('#cboProvince-UO').on('change', function () {
        var ProvinceID = $('#cboProvince-UO option:selected').val();
        var PaisDisId = $('#cboRepPais-UO option:selected').val();
        $.post(
            '/Organizacion/getcboRepDistrict',
            {
                stridpaisProv: PaisDisId,
                strCoDep: ProvinceID
            },
            (response) => {
                if (true) {
                    $('#cboDisrict-UO').empty();
                    $('#cboDisrict-UO').attr('disabled', false);
                    $('#cboDisrict-UO').append('<option value="00">Seleccione</option>');
                    response.forEach(element => {
                        $('#cboDisrict-UO').append('<option value="' + element.intIdUbigeo + '">' + element.strDesUbigeo + '</option>');
                    });

                }

            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
    });
}
$('#btn-cancel-undOrganiza').on('click', function () {
    validarSession()
    $('.form-hide-undOrganiza').hide();
});

/**---------------------------------------------------------- */
/**11. Jerarquía Organizacional */
/**----------------------------------------------------------- */

$('#cbo-filter-estado-JO').on('change', function () {
    validarSession();
    TablaJerar();

});
$('#txt-buscar-JO').keyup(function () {
    validarSession();
    TablaJerar();
});
var _vartableJerarquiaOrg;
function TablaJerar() {
    var filtroActivo = $('#cbo-filter-estado-JO').val();
    var strfiltro = $('#txt-buscar-JO').val();

    $.ajax({
        url: '/Configuracion/GetTablaFiltradaJerarquiaOrganizacional',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _vartableJerarquiaOrg !== 'undefined') {
                _vartableJerarquiaOrg.destroy();
            }
            //Diseño de la tabla
            _vartableJerarquiaOrg = $('#datatable-jerOrg').DataTable({
                data: response,
                columns: [
                    { data: 'strCoJerOrg' },
                    { data: 'strNomJerOrg' },
                    { data: 'intNivelJer' },
                    { data: 'strNomJerPadre' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'FlActivo.bitFlActivo' },
                    { data: 'strJerarCampo1' },
                    { data: 'strJerarCampo2' },
                    { data: 'strJerarCampo3' },
                    { data: 'strJerarCampo4' },
                    { data: 'strJerarCampo5' },
                    { data: 'IntIdJerOrg' },
                    { data: 'strCoIntJO' },
                    { data: 'strCoJerPadre' },

                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,

                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//IntIdJerOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//strCoIntJO
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//strCoJerPadre
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }

                ],
                dom: 'lBfrtip',

            });

            // Sort by column 1 and then re-draw
            _vartableJerarquiaOrg
                .draw();

        },
        complete: function () {
            $.unblockUI();
        }
    });

}
class DetalleJerarquia {
    constructor(intIdJerCampo, IntIdJerOrg, strCoIntJO, intIdCampo, strCoCampo, bitObligatorio) {
        this.intIdJerCampo = intIdJerCampo
        this.IntIdJerOrg = IntIdJerOrg
        this.strCoIntJO = strCoIntJO
        this.intIdCampo = intIdCampo
        this.strCoCampo = strCoCampo
        this.bitObligatorio = bitObligatorio
    }
}


$('#datatable-jerOrg  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _vartableJerarquiaOrg.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _vartableJerarquiaOrg.row($(this).parents('li')).data();
        cardarDatosJerarquia(data);
    } else {
        var data = _vartableJerarquiaOrg.row($(this).parents('tr')).data();
        cardarDatosJerarquia(data);
    }

});

$('#datatable-jerOrg  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _vartableJerarquiaOrg.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _vartableJerarquiaOrg.row($(this).parents('li')).data();
        intentEliminarJerarquia(data['IntIdJerOrg'], data['strNomJerOrg']);

    } else {

        var data = _vartableJerarquiaOrg.row($(this).parents('tr')).data();
        intentEliminarJerarquia(data['IntIdJerOrg'], data['strNomJerOrg']);

    }


});

$('#btn-new-jerarquia').on('click', function () {
    validarSession()
    $('#btn-update-jerarquia').hide();//Ocultar el boton de actualizar
    $('#btn-save-change-jerarquia').show();
    $.post(
        '/Configuracion/NuevaJerarquia',
        {},
        (response) => {

            if (response.message == null) {
                $('.form-hide-jerarquia .x_content').empty();
                $('.form-hide-jerarquia .x_content').html(response);

                switcheryLoad();
                init_checkBox_styles();
                //HabilitarSwitch();
                onchange_jerarquia();

                var lista = document.getElementById("cboNivel-JO");

                var nivjer = $('#cboNivel-JO').val();
                if (lista.length < 2) {

                    $.post('/Configuracion/GetNumJeraquia', {},
                        (response) => {
                            swal({
                                title: "Nueva Jerarquía",
                                text: "<strong>Ha utilizado sus " + response + " niveles jerárquicos configurados.<br/> Si desea registrar más niveles por favor modifique su configuración o elimine niveles inactivos.</strong>",
                                type: "info",
                                confirmButtonText: "OK",
                            });
                        }
                    )
                    $('.form-hide-jerarquia').hide();

                } else {
                    $('.form-hide-jerarquia').show();

                }
            } else {
                new PNotify({
                    title: 'Nueva Jerarquía',
                    text: response.message,
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });
                return;
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
//Cargar Datos para Editar
function cardarDatosJerarquia(data) {
    $('#btn-update-jerarquia').show();
    $('#btn-save-change-jerarquia').hide();

    var objJerarquia = {
        IntIdJerOrg: data['IntIdJerOrg'],
        strCoIntJO: data['strCoIntJO'],
        strCoJerOrg: data['strCoJerOrg'],
        strNomJerOrg: data['strNomJerOrg'],
        intNivelJer: data['intNivelJer'],
        strCoJerPadre: data['strCoJerPadre'],
        FlActivo: {
            strEstadoActivo: data['FlActivo']['strEstadoActivo'],
            bitFlActivo: data['FlActivo']['bitFlActivo']
        }
    }

    console.log(objJerarquia);

    $.post(
        '/Configuracion/DatosJerarquia',
        { jerarquiaOrg: objJerarquia },
        (response) => {
            if (response !== '') {
                $('.form-hide-jerarquia .x_content').empty();
                $('.form-hide-jerarquia .x_content').html(response);
                $('.form-hide-jerarquia').show();
                switcheryLoad();
                init_checkBox_styles();
                onchange_jerarquia();

                $('#txt-intId-JO').val(objJerarquia.IntIdJerOrg);

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

//Enviar Datos para Actualizar la Jerarquía
$('#btn-update-jerarquia').on('click', () => {
    validarSession()
    //Leer Datos de la Jerarquía Organizacional
    var _intIdJer = $('#txt-intId-JO').val();

    var _strCoIntJer = $('#txt-strCoInt-JO').val();
    var _nivelJer = $('#cboNivel-JO option:selected').val();
    var _jerPadre = $('#cboJerPadre-JO option:selected').val();
    var _codigo = $('#txt-cod-JO').val();
    var _desc = $('#txt-desc-JO').val();
    var _activo = $('#chk-activo-JO').is(':checked');

    if (_nivelJer === '' || _codigo === '' || _desc === '') {
        new PNotify({
            title: 'Editar Jerarquía',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt-cod-JO')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_jerPadre === '')
        _jerPadre = null;

    var JerarquíaOrg = {
        IntIdJerOrg: _intIdJer,
        strCoIntJO: _strCoIntJer,
        strCoJerOrg: _codigo,
        strNomJerOrg: _desc,
        intNivelJer: _nivelJer,
        strCoJerPadre: _jerPadre,
        FlActivo: {
            bitFlActivo: _activo
        }
    }

    var detalleJer = new Array();
    $('div[class="div-campos-adicio"]').each((index, item) => {
        var label = $(item).find('label');
        var _check = $(label).find('input.flat');
        var IntIdJerOrg = $('#txt-intId-JO').val();

        var IntIdJerOrgCamp = $('#txt-strIntidCamp-JO').val();

        var _switch = $(label).find('input.chkObligatorio');
        if ($(_check).is(':checked')) {

            var intid = $(_check).data('intidcampo');
            var strco = $(_check).data('strcocampo');
            var bitObli = $(_switch).is(':checked');
            detalleJer.push(new DetalleJerarquia(IntIdJerOrgCamp, IntIdJerOrg, null, intid, strco, bitObli));
            //detalleJer.push(new DetalleJerarquia(IntIdJerOrgCamp, IntIdJerOrg , null, intid, strco, bitObli));
        }
    });
    console.log(detalleJer);

    $.post(
        '/Configuracion/IUJeraquia',
        { jerarquiaOrg: JerarquíaOrg, detalleJer: detalleJer, intTipoOperacion:2},
        //        '/Configuracion/ActualizarJeraquia',
        //{ jerarquiaOrg: JerarquíaOrg, detalleJer: detalleJer },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {

                    new PNotify({
                        title: 'Actualización Jerarquía Organizacional',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaJerar();

                    $('.form-hide-jerarquia').hide();
                } else {

                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Jerarquía Organizacional';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Jerarquía Organizacional',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
//Guardar Datos de la Nueva Jerarquía
$('#btn-save-change-jerarquia').on('click', function () {
    validarSession()
    //Datos de la Jerarquía Organizacional
    var _nivelJer = $('#cboNivel-JO option:selected').val();
    var _jerPadre = $('#cboJerPadre-JO option:selected').val();
    var _codigo = $('#txt-cod-JO').val();
    var _desc = $('#txt-desc-JO').val();
    var _activo = $('#chk-activo-JO').is(':checked');

    if (_nivelJer === '' || _codigo === '' || _desc === '') {
        new PNotify({
            title: 'Nueva Jerarquía',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt-cod-JO')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_jerPadre === '')
        _jerPadre = null;

    var JerarquíaOrg = {
        strCoJerOrg: _codigo,
        strNomJerOrg: _desc,
        intNivelJer: _nivelJer,
        strCoJerPadre: _jerPadre,
        FlActivo: {
            bitFlActivo: _activo
        }
    }

    var detalleJer = new Array();
    /* $('#cboCampoAD-JO option:selected').each(function () {
        var $this = $(this);
        detalleJer.push(new DetalleJerarquia(null, null, null, $this.val(), $this.data('strcocampo'), false));
    }); */
    //$('div[class="Busqueda"]').each((index, item) => {
    $('div[class="div-campos-adicio"]').each((index, item) => {
        var label = $(item).find('label');
        var _check = $(label).find('input.flat');
        var _switch = $(label).find('input.case1');//antes era switch ahora es flat

        if ($(_check).is(':checked')) {
            var intid = $(_check).data('intidcampo');
            var strco = $(_check).data('strcocampo');
            var bitObli = $(_switch).is(':checked');
            //console.log(intid + ' co:' + strco + ' bit:' + bitObli);

            detalleJer.push(new DetalleJerarquia(null, null, null, intid, strco, bitObli));
        }
    });
    console.log(detalleJer);
    $.post(
        '/Configuracion/IUJeraquia',
        { jerarquiaOrg: JerarquíaOrg, detalleJer: detalleJer, intTipoOperacion:1},
        //'/Configuracion/RegistrarNuevaJeraquia',
        //{ jerarquiaOrg: JerarquíaOrg, detalleJer: detalleJer },
        (response) => {
            console.log(response);
            if (response.type !== '') {


                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nueva Jerarquía Organizacional',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaJerar();

                    $('.form-hide-jerarquia').hide();
                } else {

                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Jerarquía Organizacional';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Jerarquía Organizacional',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});

function intentEliminarJerarquia(idJer, strNomJer) {
    swal({
        title: "Eliminar Jerarquía",
        text: "¿Está seguro de eliminar la Jerarquía      ''<strong>" + strNomJer + "</strong>''      ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaJerarquia(idJer);
        $('.form-hide-jerarquia').hide();//añadido 19/04/2021
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaJerarquia(intIdJer) {
    $.post(
        '/Configuracion/EliminarJeraquia',
        { IntIdJerOrg: intIdJer },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'ERROR';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaJerar();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

/** Recargar campo Jerarquía Padre */
function onchange_jerarquia() {
    $('#cboNivel-JO').on('change', () => {
        var _nivelJer = $('#cboNivel-JO option:selected').val();
        $('#cboJerPadre-JO').empty();
        if (_nivelJer > 1) {
            $('#cboJerPadre-JO').attr('disabled', false);

            $.post(
                '/Configuracion/GetJerarquiaSuperior',
                { intNivelJer: _nivelJer },
                (response) => {
                    if (response.objeto.length > 0) {
                        response.objeto.forEach(element => {
                            $('#cboJerPadre-JO').append('<option value="' + element.strCoIntJO + '">' + element.strNomJerOrg + '</option>');
                        });
                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });

        } else {
            $('#cboJerPadre-JO').attr('disabled', true);
        }
    });
}

$('#btn-cancel-jerarquia').on('click', function () {
    validarSession()
    $('.form-hide-jerarquia').hide();
});

/**----------------------------------------------------------- */
/**12. Feriado */
/**---------------------------------------------------------- */

function getDateRangePickerFeriado() {
    const idRange = ".range-datepicker";
    const fechaInicio = $(idRange).data('daterangepicker').startDate.format('DD/MM/YYYY');
    const fechaFin = $(idRange).data('daterangepicker').endDate.format('DD/MM/YYYY');
    return { fInicio: fechaInicio, fFin: fechaFin }
}

$('#filActiFeriado').on('change', function () {
    validarSession()
    const date = getDateRangePickerFeriado();
    traerDatosFeriados(date.fInicio, date.fFin)
});

function CombosFeriado() {
    $('#txtHoraFinFer').attr('disabled', true);
    $('#txtHoraIniFer').attr('disabled', true);

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'PER', strSubGrupo: 'REGI' },
        (response) => {
            $('#idRegi').empty();
            $('#idRegi').append('<option value="0">Seleccione</option>');
            response.forEach(element => {
                $('#idRegi').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');


            });
        });

    // combo comcepto
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGCONCEPTO', intIdFiltroGrupo: 0, strGrupo: 'FER', strSubGrupo: 'FER' },
        (response) => {
            $('#idConcep').empty();
            $('#idConcep').append('<option value="0">Seleccione</option>');
            response.forEach(element => {
                $('#idConcep').append('<option value="' + element.intidTipo + '" TipoUM="' + element.intextra1 + '">' + element.strDeTipo + '</option>');
            });
        });

    $('#idConcep').on('change', function () {
        var ValidaUM = $('#idConcep').val();
        $.post(
            '/Asistencia/ObtenerConceptoPorsuPK',
            { intIdConcepto: ValidaUM },
            (response) => {
                response.forEach(element => {
                    if (element.intTipoUM == 25) { //Concepto x Horas

                        $('#txtHoraFinFer').attr('disabled', false);
                        $('#txtHoraIniFer').attr('disabled', false);
                    }
                    else if (element.intTipoUM == 26) {//Concepto x Días
                        $('#txtHoraFinFer').attr('disabled', true);
                        $('#txtHoraIniFer').attr('disabled', true);
                        //INICIO DE SOLUCIO DEL PROBLEMA 13 HG.29.03.21 //06.04.2021
                        $('#txtHoraFinFer').val('');
                        $('#txtHoraIniFer').val('');
                        //FIN DE SOLUCIO DEL PROBLEMA 13 HG.29.03.21
                    }

                });
            });
    });



    //ComboJerarquia
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: 'LOCAL' },
        (response) => {
            $('#cboJerar').empty();
            $('#cboJerar').append('<option value="0">Seleccione</option>');

            response.forEach(element => {
                $('#cboJerar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });

    //Combo UnidadOrganizacional
    $('#cboJerar').on('change', function () {

        var IntidJerar = $('#cboJerar option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: 'FERIADO_LOCAL' },
            (response) => {
                $('#cboUndOrg').empty();
                $('#cboUndOrg').attr('disabled', false);

                response.forEach(element => {
                    $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            });
    });

}

function CamposAdicionalesFeriado() {

    $.post(
        '/Asistencia/CamposAdicionales',
        { strEntidad: 'TGFERIADO' },
        (response) => {
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}

$('#filtroFeriado').keyup(function () {
    validarSession()
    const date = getDateRangePickerFeriado();
    traerDatosFeriados(date.fInicio, date.fFin)

});

$('.range-datepicker').on('apply.daterangepicker', function (ev, picker) {
    validarSession()
    const filtrojer_ini = picker.startDate.format('DD/MM/YYYY');
    const filtrojer_fin = picker.endDate.format('DD/MM/YYYY');
    if ($("#tablaFeriado").length) {
        traerDatosFeriados(filtrojer_ini, filtrojer_fin)
    }
});

$('#btn-new-feriado').on('click', function () {
    validarSession()
    $('#btn-save-change-feriado').show();
    $('#btn-update-feriado').hide();
    $('.form-hide-feriado').show();
    $.post(
        '/Asistencia/NuevoFeriado',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-feriado .x_content').empty();
                $('.form-hide-feriado .x_content').html(response);
                $('.form-hide-feriado').show();

                //cargarDaterangePicker();
                //init_daterangepicker();
                CombosFeriado();
                CamposAdicionalesFeriado();

                $('#chck_bitEspecifica').iCheck('unchecked');

                $('#chck_bitEspecifica').on('ifChanged', function () {

                    if ($('#chck_bitEspecifica').is(':checked') == true) {

                        $('#cboJerar').attr('disabled', false);

                        $('#cboUndOrg').attr('disabled', false);

                    } else if ($('#chck_bitEspecifica').is(':checked') == false) {

                        $('#cboJerar').attr('disabled', true);

                        $('#cboUndOrg').attr('disabled', true);


                    }
                });

                if ($('#chck_bitEspecifica').is(':checked') == true) {
                    $('#cboJerar').attr('disabled', false);
                    $('#cboUndOrg').attr('disabled', false);
                } else if ($('#chck_bitEspecifica').is(':checked') == false) {
                    $('#cboJerar').attr('disabled', true);
                    $('#cboUndOrg').attr('disabled', true);
                }
                switcheryLoad();
                init_checkBox_styles();

                var txtdes = 'strDeFeriado';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGFERIADO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });
            }
        });

});

var _vartableFeriado;

function traerDatosFeriados(filtrojer_ini_var = null, filtrojer_fin_var = null) {

    let filtrosActivo = ($('#filActiFeriado').val() != "") ? $('#filActiFeriado').val() : 2;
    let strfiltro = $('#filtroFeriado').val();
    let filtrojer_ini = filtrojer_ini_var ? filtrojer_ini_var : null;
    let filtrojer_fin = filtrojer_fin_var ? filtrojer_fin_var : null;

    $.ajax({
        url: '/Asistencia/GetTablaFeriado',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo,
            strfilter: strfiltro,
            intfiltrojer1: filtrojer_ini,
            intfiltrojer2: filtrojer_fin
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando consulta...'
            });
        },
        success: function (response) {
            $('#tablaFeriado tbody').empty();
            response.forEach(element => {

                if (typeof _vartableFeriado !== 'undefined') {
                    _vartableFeriado.destroy();
                }

                //Diseño de la tabla
                _vartableFeriado = $('#tablaFeriado').DataTable({
                    data: response,
                    columns: [
                        { data: 'dttfechaIni' },
                        { data: 'strDeFeriado' },
                        { data: 'CAMPO_CONCAT' },
                        { data: 'bitEspecifica_DESC' },
                        { data: 'bitFlActivo_desc' },
                        {
                            sortable: false,
                            "render": (data, type, item, meta) => {
                                let feriadoId = item.IntIdFeriado;
                                let strDeFeriado = item.strDeFeriado;
                                return `<button class="btn btn-success btn-xs btn-edit" dataid="${feriadoId}" ><i class="fa fa-pencil"></i> Editar </button>
                                           <button class="btn btn-primary btn-xs btn-delete" dataid="${feriadoId}" des_data="${strDeFeriado}" data="${item}" ><i class="fa fa-trash-o"></i> Eliminar </button>`;
                            }
                        },
                        { data: 'CAMPO_CONCAT' },
                        { data: 'CAMPO_CONCAT' },
                        { data: 'CAMPO_CONCAT' }
                    ],
                    lengthMenu: [10, 25, 50],
                    responsive: true,
                    language: _datatableLanguaje,
                    order: [],
                    columnDefs: [//ocultar y definir columnas
                        {
                            targets: [6],//IntIdJerOrg
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [7],//strCoIntJO
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [8],//strCoJerPadre
                            visible: false,
                            searchable: false
                        }

                    ],
                    dom: 'lBfrtip',

                });



            });
        }, complete: function () {
            $.unblockUI();
        }
    });
}

$('#btn-save-change-feriado').on('click', function () {
    validarSession()
    //var _Recursividad = $('#idRecu option:selected').val();
    var _Recursividad = $('#chck_bitRecursiv').is(':checked');
    var _Regimen = $('#idRegi option:selected').val();
    var _Concepto = $('#idConcep option:selected ').val();
    var _desc = $('#txt_desc_fer').val();


    var _FechaInicio = $('#txtFechaIniFer').val();
    var _HoraIniFer = $('#txtHoraIniFer').val();
    var _HoraFinFer = $('#txtHoraFinFer').val();

    var _bitEspecifica = $('#chck_bitEspecifica').is(':checked');

    var _strFeriaCampo1 = $('#strFeriaCampo1').val();
    var _strFeriaCampo2 = $('#strFeriaCampo2').val();
    var _strFeriaCampo3 = $('#strFeriaCampo3').val();
    var _strFeriaCampo4 = $('#strFeriaCampo4').val();
    var _strFeriaCampo5 = $('#strFeriaCampo5').val();
    var _chckActivoFer = $('#chck_activo_fer').is(':checked');

    //if (_Regimen === '' || _desc === '' || _Concepto === '') {
    //    new PNotify({
    //        title: 'Nuevo Feriado',
    //        text: 'Complete los campos obligatorios',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });
    //    $('#notifry_error').html('');
    //    $('#notifry_errordes').html('');
    //    return;
    //}

    //Correción Obs 17.2 //Inicio de código para solucionar observación 17.2  EG 24.02.2021
    if (_Regimen === '' || _Regimen === '0' || _desc === '' || _Concepto === '' || _Concepto === '0' || _FechaInicio === '' || _FechaInicio === null) {

        if (_Concepto === '' || _Concepto === '0') {
            _txt = 'Seleccione un concepto';
        } else if (_desc === '') {
            _txt = 'Registre una descripción';
        } else if (_FechaInicio === '' || _FechaInicio === null) {
            var _txt = 'Seleccione una Fecha';
        } else if (_Regimen === '' || _Regimen === '0') {
            var _txt = 'Seleccione un Régimen';
        }

        new PNotify({
            title: 'Nuevo Feriado',
            text: _txt,//'Complete los datos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
     //Fin de código para solucionar observación 17.2  EG 24.02.2021

    var Feriado = {
        bitRecursiv: _Recursividad,
        intTipoReg: _Regimen,
        intIdConcepto: _Concepto,
        strDeFeriado: _desc,
        dttfechaIni: _FechaInicio,
        timeHoraIni: _HoraIniFer,
        timeHoraFin: _HoraFinFer,
        bitEspecifica: _bitEspecifica,
        strFeriaCampo1: _strFeriaCampo1,
        strFeriaCampo2: _strFeriaCampo2,
        strFeriaCampo3: _strFeriaCampo3,
        strFeriaCampo4: _strFeriaCampo4,
        strFeriaCampo5: _strFeriaCampo5,
        bitFlActivo: _chckActivoFer,

    }




    class TGFER_UNIORG_DET {
        constructor(intIdFerUniOrg, intIdFeriado, intIdUniOrg) {
            this.intIdFerUniOrg = intIdFerUniOrg
            this.intIdFeriado = intIdFeriado
            this.intIdUniOrg = intIdUniOrg
        }
    }


    var detalleOrgi = new Array();

    if (_bitEspecifica) {

        if ($("#cboJerar").val() == 0) {
            new PNotify({
                title: 'Nuevo Feriado',
                text: 'Seleccione una Dependencia Jerárquica ',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
        if ($('#cboUndOrg option:selected').length == 0) {
            new PNotify({
                title: 'Nuevo Feriado',
                text: 'Seleccione al menos una Unidad Organizacional',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }

        $('#cboUndOrg option:selected').each((index, item) => {
            var tr_cogido = $(item).val();
            detalleOrgi.push(new TGFER_UNIORG_DET(null, null, tr_cogido));
        });
    }

    $.post(
        '/Asistencia/RegistrarEditarFeriado',
        { ObjFeriado: Feriado, listaOrgxFer: detalleOrgi, intTipoOperacion: 1 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Feriado',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    const fechaInicioFeriado = moment().subtract(0, "year").startOf("year").format('DD/MM/YYYY');
                    const fechaFinFeriado = moment().subtract(0, "year").endOf("year").format('DD/MM/YYYY');
                    if ($("#tablaFeriado").length) {
                        traerDatosFeriados(fechaInicioFeriado, fechaFinFeriado);
                    }

                    $('.form-hide-feriado').hide();
                } else {

                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Feriado';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Feriado',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-update-feriado').on('click', function () {
    validarSession()
    validarSession()

    //var _Recursividad = $('#idRecu option:selected').val();
    var _Recursividad = $('#chck_bitRecursiv').is(':checked');
    var _Regimen = $('#idRegi option:selected').val();
    var _Concepto = $('#idConcep option:selected ').val();
    var _desc = $('#txt_desc_fer').val();
    var _FechaInicio = $('#txtFechaIniFer').val();
    var _HoraIniFer = $('#txtHoraIniFer').val();
    var _HoraFinFer = $('#txtHoraFinFer').val();

    var _bitEspecifica = $('#chck_bitEspecifica').is(':checked');

    var _strFeriaCampo1 = $('#strFeriaCampo1').val();
    var _strFeriaCampo2 = $('#strFeriaCampo2').val();
    var _strFeriaCampo3 = $('#strFeriaCampo3').val();
    var _strFeriaCampo4 = $('#strFeriaCampo4').val();
    var _strFeriaCampo5 = $('#strFeriaCampo5').val();
    var _chckActivoFer = $('#chck_activo_fer').is(':checked');
    var _intidferiado = $('#IntidFer').val();

    //if (_Regimen === '' || _desc === '' || _Concepto === '') {
    //    new PNotify({
    //        title: 'Nuevo Feriado',
    //        text: 'Complete los campos obligatorios',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });
    //    $('#notifry_error').html('');
    //    $('#notifry_errordes').html('');
    //    return;
    //}

    //Inicio de código para solucionar observación 17.2  ES 24.02.2021
    if (_Regimen === '' || _Regimen === '0' || _desc === '' || _Concepto === '' || _Concepto === '0' || _FechaInicio === '' || _FechaInicio === null) {

        if (_Concepto === '' || _Concepto === '0') {
            _txt = 'Seleccione un concepto';
        } else if (_desc === '') {
            _txt = 'Registre una descripción';
        } else if (_FechaInicio === '' || _FechaInicio === null) {
            var _txt = 'Seleccione una Fecha';
        } else if (_Regimen === '' || _Regimen === '0') {
            var _txt = 'Seleccione un Régimen';
        }
        new PNotify({
            title: 'Actualizar Feriado',
            text: _txt,//'Complete los datos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    //Fin de código para solucionar observación 17.2  ES 24.02.2021

    var Feriado = {
        bitRecursiv: _Recursividad,
        intTipoReg: _Regimen,
        intIdConcepto: _Concepto,
        strDeFeriado: _desc,
        dttfechaIni: _FechaInicio,
        timeHoraIni: _HoraIniFer,
        timeHoraFin: _HoraFinFer,
        bitEspecifica: _bitEspecifica,
        strFeriaCampo1: _strFeriaCampo1,
        strFeriaCampo2: _strFeriaCampo2,
        strFeriaCampo3: _strFeriaCampo3,
        strFeriaCampo4: _strFeriaCampo4,
        strFeriaCampo5: _strFeriaCampo5,
        bitFlActivo: _chckActivoFer,
        IntIdFeriado: _intidferiado
    }

    class TGFER_UNIORG_DET {
        constructor(intIdFerUniOrg, intIdFeriado, intIdUniOrg) {
            this.intIdFerUniOrg = intIdFerUniOrg
            this.intIdFeriado = intIdFeriado
            this.intIdUniOrg = intIdUniOrg
        }
    }

    var detalleOrgi = new Array();

    if (_bitEspecifica) {

        if ($("#cboJerar").val() == 0) {
            new PNotify({
                title: 'Nuevo Feriado',
                text: 'Seleccione una Dependencia Jerárquica ',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
        if ($('#cboUndOrg option:selected').length == 0) {
            new PNotify({
                title: 'Nuevo Feriado',
                text: 'Seleccione al menos una Unidad Organizacional',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }

        $('#cboUndOrg option:selected').each((index, item) => {
            var tr_cogido = $(item).val();
            detalleOrgi.push(new TGFER_UNIORG_DET(null, null, tr_cogido));
        });
    }

    $.post(
        '/Asistencia/RegistrarEditarFeriado',
        { ObjFeriado: Feriado, listaOrgxFer: detalleOrgi, intTipoOperacion: 2 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualizar Feriado',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    const fechaInicioFeriado = moment().subtract(0, "year").startOf("year").format('DD/MM/YYYY');
                    const fechaFinFeriado = moment().subtract(0, "year").endOf("year").format('DD/MM/YYYY');
                    if ($("#tablaFeriado").length) {
                        traerDatosFeriados(fechaInicioFeriado, fechaFinFeriado);
                    }

                    $('.form-hide-feriado').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Feriado';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Feriado',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-cancel-feriado').on('click', function () {
    validarSession()
    $('.form-hide-feriado').hide();
});

$('#tablaFeriado  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    let feriadoId = $(this).attr("dataid")
    let DescripcionFer = $(this).attr("des_data")
    if (!isNaN(feriadoId)) {
        eliminarFeriado(feriadoId, DescripcionFer)
    }
})

$('#tablaFeriado  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    let feriadoId = $(this).attr("dataid")

    if (!isNaN(feriadoId)) {
        editarFeriado(feriadoId)
    }
})

function eliminarFeriado(feriadoId, DescripcionFer) {

    swal({
        title: "Eliminar Feriado",
        text: "Esta seguro de eliminar el registro <strong>" + DescripcionFer + "</strong> ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            $.post(
                '/Asistencia/EliminarFeriado',
                { intIdFeriado: feriadoId },
                (response) => {
                    console.log(response);
                    if (response.type !== '')
                    {
                        var tipo = 'Eliminado!';
                        if (response.type === 'error')
                            tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                        swal(tipo, response.message, response.type);

                        if (response.type === 'success') {
                            swal("Eliminado!", "El resgistro fue eliminado correctamente", "success");//20.04.2021
                            const fechaInicioFeriado = moment().startOf("year").format('DD/MM/YYYY');
                            const fechaFinFeriado = moment().endOf("year").format('DD/MM/YYYY');
                            $('.form-hide-feriado').hide();//20.04.2021
                            traerDatosFeriados(fechaInicioFeriado, fechaFinFeriado);
                        }
                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });
        }
        else
        {
            swal("Cancelled", "Your imaginary file is safe :)", "error");
        }
    });

}

function editarFeriado(feriadoId) {
    $('#btn-save-change-feriado').hide();
    $('#btn-update-feriado').show();
    $('.form-hide-feriado').show();
    $.post(
        '/Asistencia/EditarFeriado',
        {},
        (response) => {

            if (response !== '') {
                $('.form-hide-feriado .x_content').empty();
                $('.form-hide-feriado .x_content').html(response);
                $('.form-hide-feriado').show();
                //switcheryLoad();
                //init_checkBox_styles();
                //cargarDaterangePicker();
                //init_daterangepicker();
                //CombosFeriado();
                CamposAdicionalesFeriado();

                $.post(
                    '/Asistencia/ObtenerRegistroFeriado',
                    { intIdFeriado: feriadoId },
                    (response) => {
                        var element = response[0]
                        console.log(element);

                        $('#IntidFer').val(element.IntIdFeriado);

                        $('#txt_desc_fer').val(element.strDeFeriado);
                        $('#txtFechaIniFer').val(element.dttfechaIni);

                        if (element.timeHoraIni_desc !== '' || element.timeHoraFin_desc !== '') {
                            $('#txtHoraIniFer').attr('disabled', false);
                            $('#txtHoraFinFer').attr('disabled', false);
                        } else {
                            $('#txtHoraIniFer').attr('disabled', true);
                            $('#txtHoraFinFer').attr('disabled', true);
                            $('#txtHoraIniFer').val(element.timeHoraIni_desc);
                            $('#txtHoraFinFer').val(element.timeHoraFin_desc);
                        }

                        $('#strFeriaCampo1').val(element.strFeriaCampo1);
                        $('#strFeriaCampo2').val(element.strFeriaCampo2);
                        $('#strFeriaCampo3').val(element.strFeriaCampo3);
                        $('#strFeriaCampo4').val(element.strFeriaCampo4);
                        $('#strFeriaCampo5').val(element.strFeriaCampo5);


                        if (element.bitEspecifica == 1) {
                            $('#chck_bitEspecifica').attr('checked', true)
                        } else if (element.bitEspecifica == 0) {
                            $('#chck_bitEspecifica').attr('checked', false)
                        }

                        if (element.bitRecursiv == 1) {
                            $('#chck_bitRecursiv').attr('checked', true)
                        } else if (element.bitRecursiv == 0) {
                            $('#chck_bitRecursiv').attr('checked', false)
                        }

                        if (element.bitFlActivo == false) {
                            $('#idche').html(' <input type="checkbox" id="chck_activo_fer" class="js-switch" id="chk-activo-JO"/> Activo');
                        } else if (element.bitFlActivo == true) {
                            $('#idche').html(' <input type="checkbox" id="chck_activo_fer" class="js-switch" id="chk-activo-JO" checked /> Activo');
                        }

                        switcheryLoad();
                        init_checkBox_styles();

                        if ($('#chck_bitEspecifica').is(':checked') == true) {
                            $('#cboJerar').attr('disabled', false);
                            $('#cboUndOrg').attr('disabled', false);
                        } else if ($('#chck_bitEspecifica').is(':checked') == false) {
                            $('#cboJerar').attr('disabled', true);
                            $('#cboUndOrg').attr('disabled', true);
                        }


                        // combo comcepto
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGCONCEPTO', intIdFiltroGrupo: 0, strGrupo: 'FER', strSubGrupo: 'FER' },
                            (response) => {
                                $('#idConcep').empty();
                                $('#idConcep').append('<option value="0">Seleccione</option>');
                                response.forEach(e => {
                                    if (e.intidTipo == element.intIdConcepto) {
                                        $('#idConcep').append('<option selected value="' + e.intidTipo + '" TipoUM="' + e.intextra1 + '">' + e.strDeTipo + '</option>');
                                    } else {
                                        $('#idConcep').append('<option value="' + e.intidTipo + '" TipoUM="' + e.intextra1 + '">' + e.strDeTipo + '</option>');
                                    }
                                });
                            });

                        // combo Régimen
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'PER', strSubGrupo: 'REGI' },
                            (response) => {
                                $('#idRegi').empty();
                                $('#idRegi').append('<option value="0">Seleccione</option>');
                                response.forEach(e => {
                                    if (e.intidTipo == element.intTipoReg) {
                                        $('#idRegi').append('<option selected value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                    } else {
                                        $('#idRegi').append('<option value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                    }
                                });
                            });

                        //ComboJerarquia
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: 'LOCAL' },
                            (response) => {
                                $('#cboJerar').empty();
                                $('#cboJerar').append('<option value="0">Seleccione</option>')
                                response.forEach(e => {
                                    $('#cboJerar').append('<option value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                });

                                $.post(
                                    '/Asistencia/ObtenerRegistroReglaDetalleDeOrgixFer',
                                    { intIdFeriado: feriadoId },
                                    (response) => {
                                        if (response.length > 0) {
                                            var IntIdJerOrg = response[0].IntIdJerOrg;
                                            $('#cboJerar').val(IntIdJerOrg)

                                            $.post(
                                                '/Asistencia/LlenarTipoUM',
                                                { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntIdJerOrg, strGrupo: 'JERAR', strSubGrupo: 'FERIADO_LOCAL' },
                                                (response) => {
                                                    $('#cboUndOrg').empty();
                                                    $('#cboUndOrg').attr('disabled', false);
                                                    response.forEach(e => {
                                                        $('#cboUndOrg').append('<option value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                                    });

                                                    $.post(
                                                        '/Asistencia/ListarHorarioEspecifico',
                                                        { strEntidad: 'TGFER_UNIORG_DET', intId: feriadoId, intUso: 2, strGrupo: '', strSubGrupo: '' },
                                                        (response) => {
                                                            response.forEach(e => {
                                                                $('#cboUndOrg option[value=' + e.intIdTipRegimen + ']').prop('selected', true);
                                                            });
                                                        });
                                                });
                                        }
                                    });
                            });

                        //Combo UnidadOrganizacional
                        $('#cboJerar').on('change', function () {
                            var IntidJerar = $('#cboJerar option:selected').val();
                            $.post(
                                '/Asistencia/LlenarTipoUM',
                                { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: 'FERIADO_LOCAL' },
                                (response) => {
                                    $('#cboUndOrg').empty();
                                    $('#cboUndOrg').attr('disabled', false);
                                    response.forEach(e => {
                                        $('#cboUndOrg').append('<option value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                    });
                                });
                        });

                        $('#idConcep').on('change', function () {
                            var ValidaUM = $('#idConcep').val();
                            $.post(
                                '/Asistencia/ObtenerConceptoPorsuPK',
                                { intIdConcepto: ValidaUM },
                                (response) => {
                                    response.forEach(element => {
                                        if (element.intTipoUM == 25) {
                                            $('#txtHoraFinFer').attr('disabled', false);
                                            $('#txtHoraIniFer').attr('disabled', false);
                                        }
                                        else if (element.intTipoUM == 26) {
                                            $('#txtHoraFinFer').attr('disabled', true);
                                            $('#txtHoraIniFer').attr('disabled', true);
                                            //INICIO DE SOLUCIO DEL PROBLEMA 13 HG.29.03.21 //06.04.2021
                                            $('#txtHoraFinFer').val('');
                                            $('#txtHoraIniFer').val('');
                                            //FIN DE SOLUCIO DEL PROBLEMA 13 HG.29.03.21
                                        }

                                    });
                                });
                        });

                        $('#chck_bitEspecifica').on('ifChanged', function () {
                            if ($('#chck_bitEspecifica').is(':checked') == true) {
                                $('#cboJerar').attr('disabled', false);
                                $('#cboUndOrg').attr('disabled', false);
                            } else if ($('#chck_bitEspecifica').is(':checked') == false) {
                                $('#cboJerar').attr('disabled', true);
                                $('#cboUndOrg').attr('disabled', true);
                            }
                        });


                        var txtdes = 'strDeFeriado';
                        $.post(
                            '/Organizacion/ListarCaracteresMax',
                            { strMaestro: 'TGFERIADO' },
                            (response) => {
                                response.forEach(element => {
                                    if (element.strColumnName == txtdes) {
                                        $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                });
                            });

                    });
            }
        });

}

/**----------------------------------------------------------- */
/**Fin Feriado */
/**---------------------------------------------------------- */

/**13. Variable */
/**--------------------------------------------------------- */

$('#filActiVar').on('change', function () {
    validarSession()
    TablaVariable();
});

$('#campTipoVar').on('change', function () {
    validarSession()
    TablaVariable();
});

$('#filtroVar').keyup(function () {
    validarSession()
    TablaVariable();
});

$('#btn-new-variable').on('click', function () {
    validarSession()
    $('#btn-update-variable').hide();
    $('#btn-save-change-variable').show();
    $('.form-hide-variable').show();
    $.post(
        '/Asistencia/NuevoVariable',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-variable .x_content').empty();
                $('.form-hide-variable .x_content').html(response);
                $('.form-hide-variable').show();
                switcheryLoad();
                //init_checkBox_styles();
                // TablaExtra();

                $('#cboRedondeo').attr('disabled', true);
                $('#cboVariable').on('change', function () {
                    $('#Incidencia-det').show();

                    var variable = $('#cboVariable').val();
                    $('#campTipoum').empty();
                    if (variable == 'undefinied' || variable == '') {

                        $('#campTipoum').attr('disabled', true);
                    } else {


                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGTIPO', intIdFiltroGrupo: variable, strGrupo: 'VARI', strSubGrupo: 'UM' },
                            (response) => {
                                $('#campTipoum').append('<option value=0> Seleccione </option>');

                                response.forEach(element => {
                                    $('#campTipoum').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                                });
                                $('#campTipoum').attr('disabled', false);

                            });
                    }

                    if ($('#cboVariable').val() == 30) {
                        $('#GeneralChecks').show();
                        $('#Todos').show();
                        $('#Laborable').show();
                        $('#Descanso').hide();
                        $('#Feriado').hide();
                        $('#Sábado').hide();
                        $('#Domingo').hide();
                        $('#extras').hide();
                        $('#Marcas-det').show();
                        $('#bonificacion-det').show();
                        $('#bonificacion-det').html('<p>' +
                            '<input type = "checkbox" id = "chck_Descontable" class= "flat"  name = "iCheck9" >Descontable</p>' +
                            '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck5">Sustentación</p>');
                        init_checkBox_styles();
                        $('#Específicos').hide();
                        $('#horarios-det').show();
                        $('#horarios-det').html('<p>Uso máximo anual</p>' +
                            '<input type = "text" id = "txtMaxUso" class="form-control" placeholder="Máximo">');
                        $('#ConfiguracionBonificaciones').hide();
                        $('#Acumulables').show();
                        $('#chck_Sustentación').iCheck('uncheck');
                        $('#chck_Descontable').iCheck('uncheck');

                        $('#chck_Permite').iCheck('uncheck');
                        $('#chck_Requiere').iCheck('uncheck');


                        $('#chck_Permite').on('ifChanged', function () {

                            if ($('#chck_Permite').is(':checked') == true) {
                                $('#chck_Requiere').iCheck('uncheck');
                            }
                        });
                        $('#chck_Requiere').on('ifChanged', function () {

                            if ($('#chck_Requiere').is(':checked') == true) {
                                $('#chck_Permite').iCheck('uncheck');

                            }
                        });


                        $("#chck_ToDias").iCheck('uncheck');

                        $('#chck_ToDias').on('ifChecked', function () {

                            $("#chck_DiLab").iCheck('uncheck');

                        });
                        $('#chck_DiLab').on('ifChecked', function () {

                            $("#chck_ToDias").iCheck('uncheck');
                        });

                    } else if ($('#cboVariable').val() == 31) {
                        $('#GeneralChecks').hide();
                        $('#Todos').hide();
                        $('#Laborable').hide();
                        $('#Descanso').hide();
                        $('#Feriado').hide();
                        $('#Sábado').hide();
                        $('#Domingo').hide();
                        $('#extras').hide();
                        $('#Marcas-det').show();
                        $('#bonificacion-det').show();
                        $('#bonificacion-det').html('<p>' +
                            '<input type = "checkbox" id = "chck_Descontable" class= "flat"  name = "iCheck9" >Descontable</p>' +
                            '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck5">Sustentación</p>');
                        init_checkBox_styles();
                        $('#Específicos').hide();
                        $('#horarios-det').show();
                        $('#horarios-det').html('<p>Uso máximo anual</p>' +
                            '<input type = "text" id = "txtMaxUso" class="form-control" placeholder="Máximo">');
                        $('#ConfiguracionBonificaciones').hide();
                        $('#Acumulables').hide();
                        $('#chck_Sustentación').iCheck('uncheck');
                        $('#chck_Descontable').iCheck('uncheck');

                        $('#chck_Permite').iCheck('uncheck');
                        $('#chck_Requiere').iCheck('uncheck');

                        $('#chck_Permite').on('ifChanged', function () {

                            if ($('#chck_Permite').is(':checked') == true) {
                                $('#chck_Requiere').iCheck('uncheck');
                            }
                        });
                        $('#chck_Requiere').on('ifChanged', function () {

                            if ($('#chck_Requiere').is(':checked') == true) {
                                $('#chck_Permite').iCheck('uncheck');

                            }
                        });

                    } else if ($('#cboVariable').val() == 33) {
                        $("#GeneralChecks").html(`<p class="legend-border" style="width:70px;">Aplicable a:</p>
	                                        <div class="border-section">
		                                        <div class="col-md-6 col-sm-6 col-xs-6">
			                                        <div class="checkbox" id="Todos" hidden>
				                                        <label>
					                                        <input type="checkbox" id="chck_ToDias" class="flat"> Todos los días
				                                        </label>
			                                        </div>
			                                        <div class="checkbox" id="Laborable" hidden>
				                                        <label>
					                                        <input type="checkbox" id="chck_DiLab" class="flat"> Día Laborable
				                                        </label>
			                                        </div>
			                                        <div class="checkbox" id="Descanso" hidden>
				                                        <label>
					                                        <input type="checkbox" id="chck_DiDesc" class="flat"> Día de Descanso
				                                        </label>
			                                        </div>
		                                        </div>
		                                        <div class="col-md-6 col-sm-6 col-xs-6">
			                                        <div class="checkbox" id="Feriado" hidden>
				                                        <label>
					                                        <input type="checkbox" id="chck_DiFer" class="flat"> Día Feriado
				                                        </label>
			                                        </div>
			                                        <div class="checkbox" id="Sábado" hidden>
				                                        <label>
					                                        <input type="checkbox" id="chck_DiSab" class="flat"> Día Sábado
				                                        </label>
			                                        </div>
			                                        <div class="checkbox" id="Domingo" hidden>
				                                        <label>
					                                        <input type="checkbox" id="chck_DiDom" class="flat"> Día Domingo
				                                        </label>
			                                        </div>
		                                        </div>
	                                        </div>`)
                        $('#GeneralChecks').show();
                        $('#Todos').hide();
                        $('#Laborable').show();
                        $('#Descanso').show();
                        $('#Feriado').show();
                        $('#Sábado').show();
                        $('#Domingo').show();
                        $('#extras').hide();
                        $('#Específicos').hide();
                        $('#bonificacion-det').html('<p>' +
                            '<input type = "radio" id = "chck_Total" class= "flat" checked name = "iCheck1" > Bono Total' +
                            '</p ><p><input type="radio" id="chck_Específico" class="flat" name="iCheck1"> Bono Específico' +
                            '</p>');
                        $('#horarios-det').html('<p>' +
                            '<input type="radio" id="chck_HorTotal" class="flat" checked name="iCheck3"> Cualquier Jornada' +
                            '</p ><p><input type = "radio" id = "chck_HorEspeci" class= "flat" name = "iCheck3" > Jornadas Específicas' +
                            '</p>');
                        $('#Específicos').hide();
                        $('#Marcas-det').hide();
                        $('#bonificacion-det').show();
                        $('#horarios-det').show();

                        $('#chck_Específico').on('ifChanged', function (event) {

                            if ($('#chck_Específico').is(':checked') == true) {

                                $('#ConfiguracionBonificaciones').show();
                            } else {


                                $('#ConfiguracionBonificaciones').hide();
                            }

                        });
                        if ($('#chck_Específico').is(':checked') == true) {

                            $('#ConfiguracionBonificaciones').show();
                        } else {


                            $('#ConfiguracionBonificaciones').hide();
                        }
                        $('#chck_HorEspeci').on('ifChanged', function (event) {

                            if ($('#chck_HorEspeci').is(':checked') == true) {

                                $('#Específicos').show();
                            } else {


                                $('#Específicos').hide();
                            }

                        });
                        if ($('#chck_HorEspeci').is(':checked') == true) {

                            $('#Específicos').show();
                        } else {


                            $('#Específicos').hide();
                        }
                        init_checkBox_styles();
                        $('#selects').on('ifChanged', function () {

                            if ($('#selects').is(':checked') == true) {

                                $('#ListaHorario option').prop('hidden', true);
                                $('#ListaHorario option:selected').prop('hidden', false);


                            } else {
                                $('#ListaHorario option').prop('hidden', false);
                            }
                        });

                        $('#select_All').on('ifChanged', function () {


                            if ($('#select_All').is(':checked') == true) {

                                $('#ListaHorario option').prop('selected', true);

                            } else {
                                $('#ListaHorario option').prop('selected', false);
                            }


                        });


                    } else if ($('#cboVariable').val() == 32) {
                        $('#GeneralChecks').hide();
                        $('#extras').show();
                        $('#horarios-det').show();
                        $('#Específicos').show();
                        $('#bonificacion-det').hide();
                        //prioridades();
                        // EdiatarPrioridades();
                        TablaExtra();
                        EdiatarPrioridades();

                        $('#horarios-det').hide();
                        $('#Específicos').hide();
                        $('#ConfiguracionBonificaciones').hide();
                        $('#Marcas-det').hide();
                        $('#Acumulables').hide();

                    } else {
                        $('#GeneralChecks').hide();
                        $('#Todos').hide();
                        $('#Laborable').hide();
                        $('#Descanso').hide();
                        $('#Feriado').hide();
                        $('#Sábado').hide();
                        $('#Domingo').hide();
                        $('#extras').hide();
                    }

                });
                $('#campTipoum').on('change', function () {

                    if ($('#campTipoum').val() == 25) {
                        $('#Horas').show();
                        $('#cboAplica').val(79);
                        $('#cboRedondeo').val(82);
                        $('#cboRedondeo').attr('disabled', false);
                    } else {
                        $('#Horas').hide();

                    }

                });
                $('#cboAplica').on('change', function () {
                    if ($('#cboAplica').val() == 79) {
                        $('#cboRedondeo').val(82);
                        $('#cboRedondeo').attr('disabled', false);

                    } else {
                        $('#cboRedondeo').val('Seleccione');
                        $('#cboRedondeo').attr('disabled', true);
                    }
                });
                $('#cboTipoRed').on('change', function () {

                    if ($('#cboTipoRed').val() == 76) {
                        $('#ChnageRedondeo').empty();

                        $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                            '<select class= "form-control" id = "Redondeo" disabled>' +
                            '<option value="0">00:00</option>' +
                            '<option value="5">00:05</option>' +
                            '<option value="10">00:10</option>' +
                            '<option value="15">00:15</option>' +
                            '<option value="20">00:20</option>' +
                            '<option value="25">00:25</option>' +
                            '<option value="30">00:30</option>' +
                            '<option value="60">01:00</option>' +
                            '</select >');

                        $('#Redondeo').attr('disabled', false);
                        $('#Redondeo').val(5);

                    } else if ($('#cboTipoRed').val() == 77) {
                        $('#ChnageRedondeo').empty();
                        $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                            '<select class= "form-control" id = "Redondeo" disabled>' +
                            '<option value="0">00:00</option>' +
                            '<option value="5">00:05</option>' +
                            '<option value="10">00:10</option>' +
                            '<option value="15">00:15</option>' +
                            '<option value="20">00:20</option>' +
                            '<option value="25">00:25</option>' +
                            '<option value="30">00:30</option>' +
                            '<option value="60">01:00</option>' +
                            '</select >');

                        $('#Redondeo').attr('disabled', false);
                        $('#Redondeo').val(60);

                    } else if ($('#cboTipoRed').val() == 78) {

                        $('#Redondeo').attr('disabled', false);
                        $('#Redondeo').val(30);
                        $('#ChnageRedondeo').empty();

                        $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                            '<input type="time" id="tiempo_in" min="00:00"' +
                            ' max="24:00" accept="hh:mm" value="00:00" class="form-control" />');


                    } else {
                        $('#ChnageRedondeo').empty();
                        $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                            '<select class= "form-control" id = "Redondeo" disabled>' +
                            '<option value="0">00:00</option>' +
                            '<option value="5">00:05</option>' +
                            '<option value="10">00:10</option>' +
                            '<option value="15">00:15</option>' +
                            '<option value="20">00:20</option>' +
                            '<option value="25">00:25</option>' +
                            '<option value="30">00:30</option>' +
                            '<option value="60">01:00</option>' +
                            '</select >');
                        $('#Redondeo').attr('disabled', true);
                        $('#Redondeo').val(0);
                    }
                });


                var txtco = 'strCoConcepto'
                var txtdes = 'strDesConcepto'
                var txtcoPla = 'strCoPlaniExp'
                var txtcoPDT = 'strCoPDT'

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCONCEPTO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtco) {
                                $('#Valco').children("input").attr('maxlength', element.intMaxLength);
                            } else if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            } else if (element.strColumnName == txtcoPla) {
                                $('#ValcoPla').children("input").attr('maxlength', element.intMaxLength);
                            } else if (element.strColumnName == txtcoPDT) {
                                $('#ValcoExt').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

                init_checkBox_styles();

            }
        });


});

var _varTablaVariable;

function TablaVariable() {
    var filtroActivo = $('#filActiVar').val();
    var strfiltro = $('#filtroVar').val();
    var filtrojer = $('#campTipoVar').val();

    $.ajax({
        url: '/Asistencia/GetTablaFiltradaVariable',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _varTablaVariable !== 'undefined') {
                _varTablaVariable.destroy();
            }
            _varTablaVariable = $('#tablaVariable').DataTable({
                data: response,
                columns: [

                    { data: 'strCoConcepto' },
                    { data: 'strDesConcepto' },
                    { data: 'strDeTipotipo' },
                    { data: 'strDeTipoum' },
                    { data: 'strActivo' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            return `<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>
                                           <button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>`;
                        }
                    },
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                dom: 'lBfrtip',
            });

            $('#tablaVariable  tbody').on('click', 'tr button.btn-delete', function () {
                validarSession()
                var data = _varTablaVariable.row($(this).parents('tr')).data();

                if (data == null) {
                    data = null;

                    var data = _varTablaVariable.row($(this).parents('li')).data();
                    intentEliminarVariable(data['intIdConcepto'], data['strDeTipotipo'], data['strDesConcepto']);

                } else {

                    var data = _varTablaVariable.row($(this).parents('tr')).data();
                    intentEliminarVariable(data['intIdConcepto'], data['strDeTipotipo'], data['strDesConcepto']);

                }


            });
        },
        complete: function () {
            $.unblockUI();
        },
    });

}

$('#tablaVariable  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaVariable.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaVariable.row($(this).parents('li')).data();
        cardarDatosVariable(data);
    } else {
        var data = _varTablaVariable.row($(this).parents('tr')).data();
        cardarDatosVariable(data);
    }

});

function intentEliminarVariable(idVar, tipo, strDesc) {
    swal({
        title: "Eliminar Variable",
        text: "¿Está seguro de eliminar la variable   ''<strong>" + strDesc + "</strong>''  de tipo  " + tipo + "   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaVariable(idVar);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaVariable(idVar) {
    $.post(
        '/Asistencia/EliminarConcepto',
        { intIdConcepto: idVar },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaVariable();
                TablaExtra();
                EdiatarPrioridades();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function cardarDatosVariable(data) {
    $.post(
        '/Asistencia/EditarVariable',
        {},
        (response) => {

            if (response !== '') {
                $('.form-hide-variable .x_content').empty();
                $('.form-hide-variable .x_content').html(response);
                $('.form-hide-variable').show();
                $('#btn-update-variable').show();
                $('#btn-save-change-variable').hide();

                switcheryLoad();
                init_checkBox_styles();
                //onchange_jerarquia();
                //TablaExtra();

                $.post(
                    '/Asistencia/ObtenerConceptoPorsuPK',
                    { intIdConcepto: data.intIdConcepto },
                    (response) => {

                        console.log(response);
                        response.forEach(element => {

                            $('#cboVariable').val(element.intTipoConcepto);

                            var variableds = $('#cboVariable').val();

                            $.post(
                                '/Asistencia/LlenarTipoUM',
                                { strEntidad: 'TGTIPO', intIdFiltroGrupo: variableds, strGrupo: 'VARI', strSubGrupo: 'UM' },
                                (response) => {

                                    $('#campTipoum').empty();
                                    response.forEach(element2 => {

                                        if (element.intTipoUM == element2.intidTipo) {
                                            $('#campTipoum').append('<option value="' + element2.intidTipo + '" selected>' + element2.strDeTipo + '</option>');
                                        } else if (element.intTipoUM !== element2.intidTipo) {
                                            $('#campTipoum').append('<option value="' + element2.intidTipo + '">' + element2.strDeTipo + '</option>');

                                        }
                                        if ($('#campTipoum').val() == 25) {
                                            $('#Horas').show();
                                            $('#cboAplica').val(79);
                                            $('#cboRedondeo').val(82);
                                            $('#cboRedondeo').attr('disabled', true);
                                        } else {
                                            $('#Horas').hide();

                                        }
                                    });
                                    $('#campTipoum').attr('disabled');


                                });


                            $('#txt_cod_Var').val(element.strCoConcepto);
                            $('#txt_desc_Var').val(element.strDesConcepto);
                            $('#txt_codPla_Var').val(element.strCoPlaniExp);
                            $('#txt_codExte_Var').val(element.strCoPDT);
                            $('#txtIdConcepto').val(element.intIdConcepto);
                            $('#strConceptoCampo1').val(element.strConceptoCampo1);
                            $('#strConceptoCampo2').val(element.strConceptoCampo2);
                            $('#strConceptoCampo3').val(element.strConceptoCampo3);
                            $('#strConceptoCampo4').val(element.strConceptoCampo4);
                            $('#strConceptoCampo5').val(element.strConceptoCampo5);
                            $('#strConceptoCampo5').val(element.strConceptoCampo5);


                            if (element.timeHoraIni == 0) {
                            } else if (element.timeHoraIni !== 0) {
                                $('#tiempo_in').val(element.timeHoraIni);
                            }

                            if (element.timeHoraFin == 0) {
                            } else if (element.timeHoraFin !== 0) {
                                $('#tiempo_fil').val(element.timeHoraFin);
                            }

                            if (element.timeTiempoMin == 0) {
                            } else if (element.timeTiempoMin !== 0) {
                                $('#tiempo_min').val(element.timeTiempoMin);
                            }

                            if (element.timeTolerancia == 0) {
                            } else if (element.timeTolerancia !== 0) {
                                $('#tiempo_tol').val(element.timeTolerancia);
                            }

                            if (element.bitHoraIni == 1) {
                                $('#bitBonoEspIni').iCheck('check');
                            }
                            if (element.bitHoraFin == 1) {
                                $('#bitBonoEspFin').iCheck('check');
                            }

                            if (element.bitClasifica == 0) {
                                $('#chck_inc').iCheck('check');
                                $('#chck_ause').iCheck('uncheck');
                            } else if (element.bitClasifica == 1) {
                                $('#chck_inc').iCheck('uncheck');
                                $('#chck_ause').iCheck('check');
                            }

                            if (element.bitClasifica == 0) {
                                $('#chck_inc').iCheck('check');
                                $('#chck_ause').iCheck('uncheck');
                            } else if (element.bitClasifica == 1) {
                                $('#chck_inc').iCheck('uncheck');
                                $('#chck_ause').iCheck('check');
                            }

                            $('#chck_Permite').on('ifChanged', function () {
                                if ($('#chck_Permite').is(':checked') == true) {

                                    $('#chck_Requiere').iCheck('uncheck');
                                }
                            });
                            $('#chck_Requiere').on('ifChanged', function () {
                                if ($('#chck_Requiere').is(':checked') == true) {
                                    $('#chck_Permite').iCheck('uncheck');

                                }
                            });

                            if (element.bitReqMarca == 0) {
                                $('#chck_Permite').iCheck('check');
                                $('#chck_Requiere').iCheck('uncheck');
                            } else if (element.bitReqMarca == 1) {
                                $('#chck_Permite').iCheck('uncheck');
                                $('#chck_Requiere').iCheck('check');
                            }
                            else if (element.bitReqMarca == 2) {
                                $('#chck_Permite').iCheck('uncheck');
                                $('#chck_Requiere').iCheck('uncheck');
                            }

                            if (element.bitAplTodosDias == 0) {
                                $('#chck_ToDias').iCheck('uncheck');
                            } else if (element.bitAplTodosDias == 1) {
                                $('#chck_ToDias').iCheck('check');
                            }

                            if (element.bitAplDiaLabor == 0) {
                                $('#chck_DiLab').iCheck('uncheck');
                            } else if (element.bitAplTodosDias == 1) {
                                $('#chck_DiLab').iCheck('check');
                            }

                            if (element.bitAplDiaDescanso == 0) {
                                $('#chck_DiDesc').iCheck('uncheck');
                            } else if (element.bitAplTodosDias == 1) {
                                $('#chck_DiDesc').iCheck('check');
                            }

                            if (element.bitAplDiaFeriado == 0) {
                                $('#chck_DiFer').iCheck('uncheck');
                            } else if (element.bitAplTodosDias == 1) {
                                $('#chck_DiFer').iCheck('check');
                            }

                            if (element.bitAplDiaSabado == 0) {
                                $('#chck_DiSab').iCheck('uncheck');
                            } else if (element.bitAplDiaSabado == 1) {
                                $('#chck_DiSab').iCheck('check');
                            }

                            if (element.bitAplDiaDomingo == 0) {
                                $('#chck_DiDom').iCheck('uncheck');
                            } else if (element.bitAplDiaDomingo == 1) {
                                $('#chck_DiDom').iCheck('check');
                            }

                            if (element.smlTipoRedondeo == 0) {
                                $('#cboTipoRed').val(75);
                            } else if (element.smlTipoRedondeo !== 0) {
                                $('#cboTipoRed').val(element.smlTipoRedondeo);
                            }

                            if (element.smlFormaRedond == 0 && element.smlFormaRedond == 1) {

                            } else if (element.smlAplicaRedond !== 0 && element.smlFormaRedond !== 1) {
                                $('#cboAplica').val(element.smlAplicaRedond);
                            }

                            $('#Redondeo').val(element.intTiempoRedond);

                            if (element.smlFormaRedond == 0 && element.smlFormaRedond == 1) {

                            } else if (element.smlFormaRedond !== 0 && element.smlFormaRedond !== 1) {
                                $('#cboRedondeo').val(element.smlFormaRedond);
                            }

                            if (element.bitFlHT == 0) {
                                $('#chckHorTra').iCheck('uncheck');
                            } else if (element.bitFlHT == 1) {
                                $('#chckHorTra').iCheck('check');
                            }

                            if (element.bitFlDT == 0) {
                                $('#chckDiaTra').iCheck('uncheck');
                            } else if (element.bitFlDT == 1) {
                                $('#chckDiaTra').iCheck('check');
                            }


                            if (element.bitFlHTE == 0) {
                                $('#chckTraEfec').iCheck('uncheck');
                            } else if (element.bitFlDT == 1) {
                                $('#chckTraEfec').iCheck('check');
                            }

                            if (element.bitExportPlani == 0) {
                                $('#chckExpPlan').iCheck('uncheck');
                            } else if (element.bitExportPlani == 1) {
                                $('#chckExpPlan').iCheck('check');
                            }

                            if (element.bitFlSubsidio == 0) {
                                $('#chckExpSubs').iCheck('uncheck');
                            } else if (element.bitFlSubsidio == 1) {
                                $('#chckExpSubs').iCheck('check');
                            }

                            if (element.bitFlDiaNoLabNiSub == 0) {
                                $('#chckExpNoTraNoSubs').iCheck('uncheck');
                            } else if (element.bitFlDiaNoLabNiSub == 1) {
                                $('#chckExpNoTraNoSubs').iCheck('check');
                            }

                            if (element.bitFlCTS == 0) {
                                $('#chckCalculoCTS').iCheck('uncheck');
                            } else if (element.bitFlCTS == 1) {
                                $('#chckCalculoCTS').iCheck('check');
                            }

                            if (element.tinFlCompensacion == 0) {
                                $('#chckCompensable').iCheck('uncheck');
                            } else if (element.tinFlCompensacion == 1) {
                                $('#chckCompensable').iCheck('check');
                            }

                            if (element.bitFlActivo == 0) {
                                $('#idche').html('<input type="checkbox" id="chck_Activo_Var" class=" js-switch"  /> Activo');
                                // $('#chck_Activo_Var').iCheck('uncheck');
                                switcheryLoad();
                            } else if (element.bitFlActivo == 1) {

                                $('#idche').html('<input type="checkbox" id="chck_Activo_Var" class=" js-switch" checked /> Activo');
                                // $('#chck_Activo_Var').iCheck('check');
                                switcheryLoad();
                            }

                            if (element.bitFlGenerarHA == 0) {
                                $('#chckGenerHoras').iCheck('uncheck');
                            } else if (element.bitFlGenerarHA == 1) {
                                $('#chckGenerHoras').iCheck('check');
                            }


                            if ($('#cboVariable option:selected').val() == 31) {
                                $('#txt_cod_Var').attr('disabled', true);
                                $('#campTipoum').attr('disabled', true);
                            }

                            $('#Incidencia-det').show();

                            if ($('#cboVariable').val() == 30) {
                                $('#GeneralChecks').show();
                                $('#Todos').show();
                                $('#Laborable').show();
                                $('#Descanso').hide();
                                $('#Feriado').hide();
                                $('#Sábado').hide();
                                $('#Domingo').hide();
                                $('#extras').hide();
                                $('#Marcas-det').show();
                                $('#bonificacion-det').show();
                                $('#bonificacion-det').html('<p>' +
                                    '<input type = "checkbox" id = "chck_Descontable" class= "flat" name = "iCheck2" >Descontable</p>' +
                                    '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck2">Sustentación</p>');
                                init_checkBox_styles();
                                $('#Específicos').hide();
                                $('#horarios-det').show();
                                $('#horarios-det').html('<p>Uso máximo anual</p>' +
                                    '<input type = "text" id = "txtMaxUso" class="form-control" placeholder="Máximo">');
                                $('#ConfiguracionBonificaciones').hide();
                                $('#Acumulables').show();
                                $('#cboRedondeo').attr('disabled', false);

                                $('#chck_Permite').on('ifChanged', function () {

                                    if ($('#chck_Permite').is(':checked') == true) {
                                        $('#chck_Requiere').iCheck('uncheck');
                                    }
                                });
                                $('#chck_Requiere').on('ifChanged', function () {

                                    if ($('#chck_Requiere').is(':checked') == true) {
                                        $('#chck_Permite').iCheck('uncheck');

                                    }
                                });
                            }

                            else if ($('#cboVariable').val() == 31) {
                                $('#GeneralChecks').hide();
                                $('#Todos').hide();
                                $('#Laborable').hide();
                                $('#Descanso').hide();
                                $('#Feriado').hide();
                                $('#Sábado').hide();
                                $('#Domingo').hide();
                                $('#extras').hide();
                                $('#Marcas-det').show();
                                $('#bonificacion-det').show();
                                $('#bonificacion-det').html('<p>' +
                                    '<input type = "checkbox" id = "chck_Descontable" class= "flat" name = "iCheck2" >Descontable</p>' +
                                    '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck2">Sustentación</p>');
                                init_checkBox_styles();
                                $('#Específicos').hide();
                                $('#horarios-det').show();
                                $('#horarios-det').html('<p>Uso máximo anual</p>' +
                                    '<input type = "text" id = "txtMaxUso" class="form-control" placeholder="Máximo">');
                                $('#ConfiguracionBonificaciones').hide();
                                $('#Acumulables').hide();

                                $('#chck_Permite').on('ifChanged', function () {

                                    if ($('#chck_Permite').is(':checked') == true) {
                                        $('#chck_Requiere').iCheck('uncheck');
                                    }
                                });
                                $('#chck_Requiere').on('ifChanged', function () {

                                    if ($('#chck_Requiere').is(':checked') == true) {
                                        $('#chck_Permite').iCheck('uncheck');

                                    }
                                });

                            }
                            else if ($('#cboVariable').val() == 33) {
                                $('#GeneralChecks').show();
                                $('#Todos').hide();
                                $('#Laborable').show();
                                $('#Descanso').show();
                                $('#Feriado').show();
                                $('#Sábado').show();
                                $('#Domingo').show();
                                $('#extras').hide();
                                $('#Específicos').hide();
                                $('#bonificacion-det').html('<p>' +
                                    '<input type = "radio" id = "chck_Total" class= "flat" checked name = "iCheck1" > Bono Total' +
                                    '</p ><p><input type="radio" id="chck_Específico" class="flat" name="iCheck1"> Bono Específico' +
                                    '</p>');
                                $('#horarios-det').html('<p>' +
                                    '<input type="radio" id="chck_HorTotal" class="flat" name="iCheck3"> Cualquier Jornada' +
                                    '</p ><p><input type = "radio" id = "chck_HorEspeci" class= "flat" checked name = "iCheck3" > Jornadas Específicas' +
                                    '</p>');


                                $('#Específicos').hide();
                                $('#Marcas-det').hide();
                                $('#bonificacion-det').show();
                                $('#horarios-det').show();
                                $('#cboRedondeo').attr('disabled', false);

                                $('#chck_Específico').on('ifChanged', function (event) {

                                    if ($('#chck_Específico').is(':checked') == true) {

                                        $('#ConfiguracionBonificaciones').show();
                                    } else {


                                        $('#ConfiguracionBonificaciones').hide();
                                    }

                                });
                                if ($('#chck_Específico').is(':checked') == true) {
                                    $('#ConfiguracionBonificaciones').show();
                                } else {
                                    $('#ConfiguracionBonificaciones').hide();
                                }

                                $('#chck_HorEspeci').on('ifChanged', function (event) {

                                    if ($('#chck_HorEspeci').is(':checked') == true) {

                                        $('#Específicos').show();
                                    } else {


                                        $('#Específicos').hide();
                                    }

                                });
                                if ($('#chck_HorEspeci').is(':checked') == true) {
                                    $('#Específicos').show();
                                } else {
                                    $('#Específicos').hide();
                                }

                                init_checkBox_styles();

                                $('#selects').on('ifChanged', function () {

                                    if ($('#selects').is(':checked') == true) {

                                        $('#ListaHorario option').prop('hidden', true);
                                        $('#ListaHorario option:selected').prop('hidden', false);


                                    } else {
                                        $('#ListaHorario option').prop('hidden', false);
                                    }
                                });

                                $('#select_All').on('ifChanged', function () {


                                    if ($('#select_All').is(':checked') == true) {

                                        $('#ListaHorario option').prop('selected', true);

                                    } else {
                                        $('#ListaHorario option').prop('selected', false);
                                    }


                                });


                                if (element.intIdTipBoni == 4) {
                                    $('#chck_Específico').iCheck('check');
                                } else if (element.intIdTipBoni == 3) {
                                    $('#chck_Específico').iCheck('uncheck');
                                }

                            }
                            else if ($('#cboVariable').val() == 32) {
                                $('#GeneralChecks').hide();
                                $('#extras').show();
                                $('#horarios-det').show();
                                $('#Específicos').show();
                                $('#bonificacion-det').hide();
                                //prioridades();
                                //EdiatarPrioridades();
                                TablaExtra();
                                EdiatarPrioridades();
                                $('#horarios-det').hide();
                                $('#Específicos').hide();
                                $('#ConfiguracionBonificaciones').hide();
                                $('#Marcas-det').hide();
                                $('#Acumulables').hide();
                                $('#cboRedondeo').attr('disabled', false);
                            }
                            else {
                                $('#GeneralChecks').hide();
                                $('#Todos').hide();
                                $('#Laborable').hide();
                                $('#Descanso').hide();
                                $('#Feriado').hide();
                                $('#Sábado').hide();
                                $('#Domingo').hide();
                                $('#extras').hide();
                                $('#cboRedondeo').attr('disabled', false);
                            }


                            $('#cboVariable').on('change', function () {
                                $('#Incidencia-det').show();

                                if ($('#cboVariable').val() == 30) {
                                    $('#GeneralChecks').show();
                                    $('#Todos').show();
                                    $('#Laborable').show();
                                    $('#Descanso').hide();
                                    $('#Feriado').hide();
                                    $('#Sábado').hide();
                                    $('#Domingo').hide();
                                    $('#extras').hide();
                                    $('#Marcas-det').show();
                                    $('#bonificacion-det').show();
                                    $('#bonificacion-det').html('<p>' +
                                        '<input type = "checkbox" id = "chck_Descontable" class= "flat" name = "iCheck2" >Descontable</p>' +
                                        '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck2">Sustentación</p>');
                                    init_checkBox_styles();
                                    $('#Específicos').hide();
                                    $('#horarios-det').show();
                                    $('#horarios-det').html('<p>Uso máximo anual</p>' +
                                        '<input type = "text" id = "txtMaxUso" class="form-control" placeholder="Máximo">');
                                    $('#ConfiguracionBonificaciones').hide();
                                    $('#Acumulables').show();

                                    $('#chck_Permite').on('ifChanged', function () {

                                        if ($('#chck_Permite').is(':checked') == true) {
                                            $('#chck_Requiere').iCheck('uncheck');
                                        }
                                    });
                                    $('#chck_Requiere').on('ifChanged', function () {

                                        if ($('#chck_Requiere').is(':checked') == true) {
                                            $('#chck_Permite').iCheck('uncheck');

                                        }
                                    });

                                } else if ($('#cboVariable').val() == 31) {
                                    $('#GeneralChecks').hide();
                                    $('#Todos').hide();
                                    $('#Laborable').hide();
                                    $('#Descanso').hide();
                                    $('#Feriado').hide();
                                    $('#Sábado').hide();
                                    $('#Domingo').hide();
                                    $('#extras').hide();
                                    $('#Marcas-det').show();
                                    $('#bonificacion-det').show();
                                    $('#bonificacion-det').html('<p>' +
                                        '<input type = "checkbox" id = "chck_Descontable" class= "flat" name = "iCheck2" >Descontable</p>' +
                                        '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck2">Sustentación</p>');
                                    init_checkBox_styles();
                                    $('#Específicos').hide();
                                    $('#horarios-det').show();
                                    $('#horarios-det').html('<p>Uso máximo anual</p>' +
                                        '<input type = "text" id = "txtMaxUso" class="form-control" placeholder="Máximo">');
                                    $('#ConfiguracionBonificaciones').hide();
                                    $('#Acumulables').hide();

                                    $('#chck_Permite').on('ifChanged', function () {

                                        if ($('#chck_Permite').is(':checked') == true) {
                                            $('#chck_Requiere').iCheck('uncheck');
                                        }
                                    });
                                    $('#chck_Requiere').on('ifChanged', function () {

                                        if ($('#chck_Requiere').is(':checked') == true) {
                                            $('#chck_Permite').iCheck('uncheck');

                                        }
                                    });


                                } else if ($('#cboVariable').val() == 33) {
                                    $("#GeneralChecks").html(`<p class="legend-border" style="width:70px;">Aplicable a:</p>
	                                    <div class="border-section">
		                                    <div class="col-md-6 col-sm-6 col-xs-6">
			                                    <div class="checkbox" id="Todos" hidden>
				                                    <label>
					                                    <input type="checkbox" id="chck_ToDias" class="flat"> Todos los días
				                                    </label>
			                                    </div>
			                                    <div class="checkbox" id="Laborable" hidden>
				                                    <label>
					                                    <input type="checkbox" id="chck_DiLab" class="flat"> Día Laborable
				                                    </label>
			                                    </div>
			                                    <div class="checkbox" id="Descanso" hidden>
				                                    <label>
					                                    <input type="checkbox" id="chck_DiDesc" class="flat"> Día de Descanso
				                                    </label>
			                                    </div>
		                                    </div>
		                                    <div class="col-md-6 col-sm-6 col-xs-6">
			                                    <div class="checkbox" id="Feriado" hidden>
				                                    <label>
					                                    <input type="checkbox" id="chck_DiFer" class="flat"> Día Feriado
				                                    </label>
			                                    </div>
			                                    <div class="checkbox" id="Sábado" hidden>
				                                    <label>
					                                    <input type="checkbox" id="chck_DiSab" class="flat"> Día Sábado
				                                    </label>
			                                    </div>
			                                    <div class="checkbox" id="Domingo" hidden>
				                                    <label>
					                                    <input type="checkbox" id="chck_DiDom" class="flat"> Día Domingo
				                                    </label>
			                                    </div>
		                                    </div>
	                                    </div>`)
                                    $('#GeneralChecks').show();
                                    $('#Todos').hide();
                                    $('#Laborable').show();
                                    $('#Descanso').show();
                                    $('#Feriado').show();
                                    $('#Sábado').show();
                                    $('#Domingo').show();
                                    $('#extras').hide();
                                    $('#Específicos').hide();
                                    $('#bonificacion-det').html('<p>' +
                                        '<input type = "radio" id = "chck_Total" class= "flat" checked name = "iCheck1" > Bono Total' +
                                        '</p ><p><input type="radio" id="chck_Específico" class="flat" name="iCheck1"> Bono Específico' +
                                        '</p>');
                                    $('#horarios-det').html('<p>' +
                                        '<input type="radio" id="chck_HorTotal" class="flat" checked name="iCheck3"> Cualquier Jornada' +
                                        '</p ><p><input type = "radio" id = "chck_HorEspeci" class= "flat"  name = "iCheck3" > Jornadas Específicas' +
                                        '</p>');


                                    $('#Específicos').hide();
                                    $('#Marcas-det').hide();
                                    $('#bonificacion-det').show();
                                    $('#horarios-det').show();

                                    $('#chck_Específico').on('ifChanged', function (event) {

                                        if ($('#chck_Específico').is(':checked') == true) {

                                            $('#ConfiguracionBonificaciones').show();
                                        } else {


                                            $('#ConfiguracionBonificaciones').hide();
                                        }

                                    });
                                    if ($('#chck_Específico').is(':checked') == true) {

                                        $('#ConfiguracionBonificaciones').show();
                                    } else {


                                        $('#ConfiguracionBonificaciones').hide();
                                    }
                                    $('#chck_HorEspeci').on('ifChanged', function (event) {

                                        if ($('#chck_HorEspeci').is(':checked') == true) {

                                            $('#Específicos').show();
                                        } else {


                                            $('#Específicos').hide();
                                        }

                                    });
                                    if ($('#chck_HorEspeci').is(':checked') == true) {

                                        $('#Específicos').show();
                                    } else {


                                        $('#Específicos').hide();
                                    }
                                    init_checkBox_styles();

                                    $('#selects').on('ifChanged', function () {

                                        if ($('#selects').is(':checked') == true) {

                                            $('#ListaHorario option').prop('hidden', true);
                                            $('#ListaHorario option:selected').prop('hidden', false);


                                        } else {
                                            $('#ListaHorario option').prop('hidden', false);
                                        }
                                    });

                                    $('#select_All').on('ifChanged', function () {


                                        if ($('#select_All').is(':checked') == true) {

                                            $('#ListaHorario option').prop('selected', true);

                                        } else {
                                            $('#ListaHorario option').prop('selected', false);
                                        }


                                    });


                                } else if ($('#cboVariable').val() == 32) {
                                    $('#GeneralChecks').hide();
                                    $('#extras').show();
                                    $('#horarios-det').show();
                                    $('#Específicos').show();
                                    $('#bonificacion-det').hide();
                                    TablaExtra();
                                    EdiatarPrioridades();
                                    $('#horarios-det').hide();
                                    $('#Específicos').hide();
                                    $('#ConfiguracionBonificaciones').hide();
                                    $('#Marcas-det').hide();
                                    $('#Acumulables').hide();

                                } else {
                                    $('#GeneralChecks').hide();
                                    $('#Todos').hide();
                                    $('#Laborable').hide();
                                    $('#Descanso').hide();
                                    $('#Feriado').hide();
                                    $('#Sábado').hide();
                                    $('#Domingo').hide();
                                    $('#extras').hide();
                                }

                            });

                            $('#campTipoum').on('change', function () {

                                if ($('#campTipoum').val() == 25) {
                                    $('#Horas').show();
                                    $('#cboAplica').val(79);
                                    $('#cboRedondeo').val(82);
                                    $('#cboRedondeo').attr('disabled', false);
                                } else {
                                    $('#Horas').hide();

                                }

                            });

                            $('#cboAplica').on('change', function () {
                                if ($('#cboAplica').val() == 79) {
                                    $('#cboRedondeo').val(82);
                                    $('#cboRedondeo').attr('disabled', false);

                                } else {
                                    $('#cboRedondeo').val('Seleccione');
                                    $('#cboRedondeo').attr('disabled', true);
                                }
                            });

                            $('#cboTipoRed').on('change', function () {

                                if ($('#cboTipoRed').val() == 76) {
                                    $('#ChnageRedondeo').empty();

                                    $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                                        '<select class= "form-control" id = "Redondeo" disabled>' +
                                        '<option value="0">00:00</option>' +
                                        '<option value="5">00:05</option>' +
                                        '<option value="10">00:10</option>' +
                                        '<option value="15">00:15</option>' +
                                        '<option value="20">00:20</option>' +
                                        '<option value="25">00:25</option>' +
                                        '<option value="30">00:30</option>' +
                                        '<option value="60">01:00</option>' +
                                        '</select >');

                                    $('#Redondeo').attr('disabled', false);
                                    $('#Redondeo').val(5);

                                } else if ($('#cboTipoRed').val() == 77) {
                                    $('#ChnageRedondeo').empty();
                                    $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                                        '<select class= "form-control" id = "Redondeo" disabled>' +
                                        '<option value="0">00:00</option>' +
                                        '<option value="5">00:05</option>' +
                                        '<option value="10">00:10</option>' +
                                        '<option value="15">00:15</option>' +
                                        '<option value="20">00:20</option>' +
                                        '<option value="25">00:25</option>' +
                                        '<option value="30">00:30</option>' +
                                        '<option value="60">01:00</option>' +
                                        '</select >');

                                    $('#Redondeo').attr('disabled', false);
                                    $('#Redondeo').val(60);

                                } else if ($('#cboTipoRed').val() == 78) {

                                    $('#Redondeo').attr('disabled', false);
                                    $('#Redondeo').val(30);
                                    $('#ChnageRedondeo').empty();

                                    $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                                        '<input type="time" id="tiempo_in" min="00:00"' +
                                        ' max="24:00" accept="hh:mm" value="00:00" class="form-control" />');


                                } else {
                                    $('#ChnageRedondeo').empty();
                                    $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                                        '<select class= "form-control" id = "Redondeo" disabled>' +
                                        '<option value="0">00:00</option>' +
                                        '<option value="5">00:05</option>' +
                                        '<option value="10">00:10</option>' +
                                        '<option value="15">00:15</option>' +
                                        '<option value="20">00:20</option>' +
                                        '<option value="25">00:25</option>' +
                                        '<option value="30">00:30</option>' +
                                        '<option value="60">01:00</option>' +
                                        '</select >');
                                    $('#Redondeo').attr('disabled', true);
                                    $('#Redondeo').val(0);
                                }
                            });

                            $('#txtMaxUso').val(element.intUsoMaximo);

                            if (element.bitSustentacion == 0) {
                                $('#chck_Sustentación').iCheck('uncheck');
                            } else if (element.bitSustentacion == 1) {
                                $('#chck_Sustentación').iCheck('check');
                            }

                            if (element.bitFlGrati == 0) {
                                $('#chckCalculoGrat').iCheck('uncheck');
                            } else if (element.bitFlGrati == 1) {
                                $('#chckCalculoGrat').iCheck('check');
                            }

                            if (element.bitFlDescontable == 0) {
                                $('#chck_Descontable').iCheck('uncheck');
                            } else if (element.bitFlDescontable == 1) {
                                $('#chck_Descontable').iCheck('check');
                            }

                            if (element.bitFlUtilidades == false) {
                                $('#chckCalidadUtili').iCheck('uncheck');
                            } else if (element.bitFlUtilidades == true) {
                                $('#chckCalidadUtili').iCheck('check');
                            }

                            if (element.bitJornadaEspecif == false) {
                                $('#chck_HorTotal').iCheck('check');
                            } else if (element.bitJornadaEspecif == true) {
                                $('#chck_HorEspeci').iCheck('check');
                            }

                            if (element.intIdTipBoni == 4) {
                                //$('#chck_Total').iCheck('uncheck');
                                $('#chck_Específico').iCheck('check');
                            } else if (element.intIdTipBoni == 3) {
                                $('#chck_Total').iCheck('check');
                                // $('#chck_Específico').iCheck('uncheck');
                            }

                            $.post(
                                '/Asistencia/ListarHorarioEspecifico',
                                { strEntidad: 'TGJOR_BON_DET', intId: data.intIdConcepto, intUso: 1, strGrupo: '', strSubGrupo: '' },
                                (response) => {
                                    response.forEach(element => {
                                        $('#ListaHorario option[value=' + element.intIdTipRegimen + ']').prop('selected', true);
                                    });
                                });

                        });
                        TablaExtra();
                        EdiatarPrioridades();

                        var txtco = 'strCoConcepto'
                        var txtdes = 'strDesConcepto'
                        var txtcoPla = 'strCoPlaniExp'
                        var txtcoPDT = 'strCoPDT'

                        $.post(
                            '/Organizacion/ListarCaracteresMax',
                            { strMaestro: 'TGCONCEPTO' },
                            (response) => {
                                response.forEach(element => {
                                    if (element.strColumnName == txtco) {
                                        $('.Valco').children("input").attr('maxlength', element.intMaxLength);
                                    } else if (element.strColumnName == txtdes) {
                                        $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                                    } else if (element.strColumnName == txtcoPla) {
                                        $('.ValcoPla').children("input").attr('maxlength', element.intMaxLength);
                                    } else if (element.strColumnName == txtcoPDT) {
                                        $('.ValcoExt').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                });
                            });

                    });
            }
        });
}

function LlenarTipoVar() {
    $.post(
        '/Asistencia/LlenarTipoVar',
        {},
        (response) => {
            if (true) {
                response.forEach(element => {
                    $('#campTipoVar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                });
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

$('#btn-save-change-variable').on('click', function () {
    validarSession()
    var _TipoVariable = $('#cboVariable option:selected').val();
    var _TipoUniMed = $('#campTipoum option:selected').val();
    var _codigo = $('#txt_cod_Var').val();
    var _desc = $('#txt_desc_Var').val();
    var _codigoPlani = $('#txt_codPla_Var').val();
    var _codigoExter = $('#txt_codExte_Var').val();
    var _chckinci = $('#chck_inc').is(':checked');
    var _chckusen = $('#chck_ause').is(':checked');
    //var _chckpermite = $('#chck_Permite').is(':checked');
    //var _chckrequiere = $('#chck_Requiere').is(':checked');

    var _marcas = null;
    if ($('#chck_Permite').is(':checked') == true) {
        _marcas = false;
    } if ($('#chck_Requiere').is(':checked') == true) {
        _marcas = true;
    } if ($('#chck_Permite').is(':checked') == false && $('#chck_Requiere').is(':checked') == false) {
        _marcas = null;
    } if ($('#chck_Permite').is(':checked') == null || $('#chck_Requiere').is(':checked') == null) {
        _marcas = null;
    }

    var _jor = null;
    if ($('#chck_HorTotal').is(':checked') == true) {
        _jor = false;
    } if ($('#chck_HorEspeci').is(':checked') == true) {
        _jor = true;
    } if ($('#chck_HorTotal').is(':checked') == null || $('#chck_HorEspeci').is(':checked') == null) {
        _jor = null;
    }


    var _intboni = null;

    if ($('#cboVariable').val() == 33) {

        if ($('#chck_Específico').is(':checked') == true) {
            _intboni = 04;
        } if ($('#chck_Total').is(':checked') == true) {
            _intboni = 03;
        } if ($('#chck_Total').is(':checked') == null) {
            _intboni = null;
        }
        if ($('#chck_Específico').is(':checked') == null) {
            _intboni = null;
        }
    }

    var _chcktodias = $('#chck_ToDias').is(':checked');
    var _chckdiaLab = $('#chck_DiLab').is(':checked');
    var _chckdiadesc = $('#chck_DiDesc').is(':checked');
    var _chckdiafer = $('#chck_DiFer').is(':checked');
    var _chckdiasab = $('#chck_DiSab').is(':checked');
    var _chckdiadom = $('#chck_DiDom').is(':checked');

    var _bitBonoEspIni = $('#bitBonoEspIni').is(':checked')
    var _bitBonoEspFin = $('#bitBonoEspFin').is(':checked')

    var _intIdConcepto = $('#txtIdConcepto').val();

    if (_TipoVariable == 30) {
        if ($("#GeneralChecks .checkbox:visible .checked").length == 0 || $("#GeneralChecks .checkbox:visible .checked").length == 2) {
            new PNotify({
                title: 'Aplicable a:',
                text: 'Seleccione solo una opción',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
        if (_chcktodias && _chckdiaLab) {
            new PNotify({
                title: 'Aplicable A',
                text: 'Solo puede marcar una de las dos opciones',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
    }

    if (_TipoVariable != 30 && _TipoVariable != 31) {

    }

    if ($('#tiempo_min').val() == null) {
        var _tiempmin = null;
    } else {
        var _tiempmin = $('#tiempo_min').val();
    }

    if ($('#tiempo_tol').val() == null) {
        var _tiemptol = null;
    } else {
        var _tiemptol = $('#tiempo_tol').val();
    }
    if ($('#txtMaxUso').val() == null) {
        var _txtMaxUso = null;
    } else {
        var _txtMaxUso = $('#txtMaxUso').val();
    }

    if ($('#tiempo_in').val() == null) {
        var _tiempo_in = '00:00:00';
    } else {
        var _tiempo_in = $('#tiempo_in').val();
    }

    if ($('#tiempo_fil').val() == null) {
        var _tiempo_fil = '00:00:00';
    } else {
        var _tiempo_fil = $('#tiempo_fil').val();
    }
    if ($('#tiempo_min').val() == null) {

        var _tiempo_min = '00:00:00';
    } else {
        var _tiempo_min = $('#tiempo_min').val();
    }

    if ($('#tiempo_tol').val() == '') {
        var _tiempo_tol = '00:00:00';
    } else {
        var _tiempo_tol = $('#tiempo_tol').val();
    }

    if ($('#cboTipoRegimen option:selected').val() == null) {
        var _TipoRgimen = null;
    } else {
        var _TipoRgimen = $('#cboTipoRegimen option:selected').val();
    }

    if ($('#cboTipoRed option:selected').val() == null) {
        var _TipoRedondeo = null;
    } else {
        var _TipoRedondeo = $('#cboTipoRed option:selected').val();
    }

    if ($('#cboAplica option:selected').val() == null) {
        var _AplicaPor = null;
    } else {
        var _AplicaPor = $('#cboAplica option:selected').val();
    }

    if ($('#Redondeo option:selected').val() == null) {
        var _FactorRed = null;
    } else {
        var _FactorRed = $('#Redondeo option:selected').val();
    }

    if ($('#cboRedondeo option:selected').val() == null) {
        var _FormaRedondeo = null;
    } else {
        var _FormaRedondeo = $('#cboRedondeo option:selected').val();
    }

    if ($('#ListaHorario option:selected').val() == null) {
        var _HorEspeci = null;
    } else {
        var _HorEspeci = $('#ListaHorario option:selected').val();
    }

    if ($('#Prioridad1 option:selected').val() == null) {
        var _Prioridad = null;
    } else {
        var _Prioridad = $('#Prioridad option:selected').val();
    }

    var _chckHorTra = $('#chckHorTra').is(':checked');
    var _chckDiaTra = $('#chckDiaTra').is(':checked');
    var _chckTraEfec = $('#chckTraEfec').is(':checked');
    var _chckExpPlan = $('#chckExpPlan').is(':checked');
    var _chckExpSubs = $('#chckExpSubs').is(':checked');
    var _chckExpNoTraNoSub = $('#chckExpNoTraNoSubs').is(':checked');
    var _chckCalculoCTS = $('#chckCalculoCTS').is(':checked');
    var _chckCalidadUti = $('#chckCalidadUtili').is(':checked');
    var _chckCalculoGrat = $('#chckCalculoGrat').is(':checked');
    var _chckActivo = $('#chck_Activo_Var').is(':checked');

    if ($('#chckCompensable').is(':checked')) {
        var _chckComp = 1;
    } else {
        var _chckComp = 0;
    }
    var _chckGenera = $('#chckGenerHoras').is(':checked');

    var _chck_Descontable = $('#chck_Descontable').is(':checked');
    var _chck_Sustentación = $('#chck_Sustentación').is(':checked');

    if ($('#strConceptoCampo1').val() == null) {
        var _campVar1 = null;
    } else {
        var _campVar1 = $('#strConceptoCampo1').val();
    }

    if ($('#strConceptoCampo2').val() == null) {
        var _campVar2 = null;
    } else {
        var _campVar2 = $('#strConceptoCampo2').val();
    }

    if ($('#strConceptoCampo3').val() == null) {
        var _campVar3 = null;
    } else {
        var _campVar3 = $('#strConceptoCampo3').val();
    }

    if ($('#strConceptoCampo4').val() == null) {
        var _campVar4 = null;
    } else {
        var _campVar4 = $('#strConceptoCampo4').val();
    }

    if ($('#strConceptoCampo5').val() == null) {
        var _campVar5 = null;
    } else {
        var _campVar5 = $('#strConceptoCampo5').val();
    }

    if (_codigo === '' || _desc === '' || _TipoVariable === '' || _TipoUniMed === '' || _TipoUniMed === "0"
        || _codigoPlani === '' || _codigoExter === '') {
        new PNotify({
            title: 'Nueva Variable',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt_cod_Var')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt_codPla_Var')[0].validity.valid) {
        new PNotify({
            title: 'Codigo Planilla(*)',
            text: 'Ingrese código sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt_codExte_Var')[0].validity.valid) {
        new PNotify({
            title: 'Codigo Externo(*)',
            text: 'Ingrese código sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_TipoVariable == 33) {
        if (_jor && $('#ListaHorario option:selected').length == 0) {
            new PNotify({
                title: 'Jornadas Específicas',
                text: 'Debe Seleccionar al menos una jornada',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
        if (_intboni == 4) {
            var horaIni_t = moment($("#tiempo_in").val(), 'HH:mm')
            var horaFin_t = moment($("#tiempo_fil").val(), 'HH:mm')
            //if (horaIni_t.format("HH:mm") == "00:00" || horaFin_t.format("HH:mm") == "00:00") {
            //    new PNotify({
            //        title: 'Configuración Bono Específico',
            //        text: 'Hora Inicio y Hora Fin deben ser diferentes de 00:00',
            //        type: 'info',
            //        delay: 3000,
            //        styling: 'bootstrap3',
            //        addclass: 'dark'
            //    });
            //    return;
            //}
            if (horaIni_t.isSame(horaFin_t)) {
                new PNotify({
                    title: 'Configuración Bono Específico',
                    text: 'Hora Inicio es igual que Hora Fin',
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });
                return;
            }
        }
        if ($("#GeneralChecks .checkbox:visible .checked").length == 0) {
            new PNotify({
                title: 'Aplicable a:',
                text: 'Debe Seleccionar un Tipo de Día para aplicar la Bonificación',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
    }


    var Variable = {

        // intIdSoft: 1,
        intTipoConcepto: _TipoVariable,
        bitInternoSis: 0,
        strCoConcepto: _codigo,
        strDesConcepto: _desc,
        bitReqMarca: _marcas,
        strCoPlaniExp: _codigoPlani,
        strCoPDT: _codigoExter,
        intTipoUM: _TipoUniMed,
        bitAplTodosDias: _chcktodias,
        bitAplDiaLabor: _chckdiaLab,
        bitAplDiaDescanso: _chckdiadesc,
        bitAplDiaFeriado: _chckdiafer,
        bitAplDiaSabado: _chckdiasab,
        bitAplDiaDomingo: _chckdiadom,
        intIdTipRegimen: 34,                  //_TipoRgimen
        bitClasifica: _chckusen,
        smlTipoRedondeo: _TipoRedondeo,
        smlAplicaRedond: _AplicaPor,
        intTiempoRedond: _FactorRed,
        smlFormaRedond: _FormaRedondeo,
        bitFlHT: _chckHorTra,
        bitFlDT: _chckDiaTra,
        bitFlHTE: _chckTraEfec,
        bitFlGenerarHA: _chckGenera,
        bitFlCTS: _chckCalculoCTS,
        bitExportPlani: _chckExpPlan,
        bitFlSubsidio: _chckExpSubs,
        bitFlDiaNoLabNiSub: _chckExpNoTraNoSub,
        intTiempoRTardanza: null,
        tinFlCompensacion: _chckComp,
        tinPrioridadHE: 0,
        intIdTipBoni: _intboni,
        timeHoraIni: _tiempo_in,
        timeHoraFin: _tiempo_fil,
        bitHoraIni: _bitBonoEspIni,
        bitHoraFin: _bitBonoEspFin,
        timeTolerancia: _tiempo_tol,
        timeTiempoMin: _tiempo_min,
        bitSustentacion: _chck_Sustentación,
        intUsoMaximo: _txtMaxUso,
        strConceptoCampo1: _campVar1,
        strConceptoCampo2: _campVar2,
        strConceptoCampo3: _campVar3,
        strConceptoCampo4: _campVar4,
        strConceptoCampo5: _campVar5,
        bitFlActivo: _chckActivo,
        bitflutilidades: _chckCalidadUti,
        bitFlGrati: _chckCalculoGrat,
        bitFlDescontable: _chck_Descontable,
        bitJornadaEspecif: _jor,

    }
    console.log(Variable);

    class PrioridadesConcepto {
        constructor(intIdConcepto, tinPrioridadHE) {
            this.intIdConcepto = intIdConcepto
            this.tinPrioridadHE = tinPrioridadHE
        }
    }

    class JornadasBonificacion {
        constructor(intIdJorBonDet, intIdConcepto, intIdJornada, intIdUniOrg, dttFecAsig) {
            this.intIdJorBonDet = intIdJorBonDet
            this.intIdConcepto = intIdConcepto
            this.intIdJornada = intIdJornada
            this.intIdUniOrg = intIdUniOrg
            this.dttFecAsig = dttFecAsig


        }
    }

    var detalleVar = new Array();
    $('#tb_HorasExtras tr').each((index, item) => {
        var tr_cogido = $(item).find('td').first().html();
        var td_id = $(item).find('select option:selected').val();

        detalleVar.push(new PrioridadesConcepto(tr_cogido, td_id));

    });
    console.log(detalleVar);

    var detalleBoni = new Array();
    $('#ListaHorario option:selected').each((index, item) => {
        //var input = $(item).find('input');
        console.log(item);
        var tr_cogido = $(item).val();
        detalleBoni.push(new JornadasBonificacion(0, 0, tr_cogido, 0, null));

    });
    console.log(detalleBoni);

    $.post(
        '/Asistencia/RegistrarEditarVariable',
        { ObjConcepto: Variable, listaConcepto: detalleVar, listaDetaBoni: detalleBoni, intTipoOperacion: 1 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nueva Variable',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaVariable();
                    $('.form-hide-variable').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Variable';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Variable',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-update-variable').on('click', function () {
    validarSession()
    var _intIdConcepto = $('#txtIdConcepto').val();
    var _TipoVariable = $('#cboVariable option:selected').val();
    var _TipoUniMed = $('#campTipoum option:selected').val();
    var _codigo = $('#txt_cod_Var').val();
    var _desc = $('#txt_desc_Var').val();
    var _codigoPlani = $('#txt_codPla_Var').val();
    var _codigoExter = $('#txt_codExte_Var').val();
    var _chckinci = $('#chck_inc').is(':checked');
    var _chckusen = $('#chck_ause').is(':checked');
    var _chckpermite = $('#chck_Permite').is(':checked');
    var _chckrequiere = $('#chck_Requiere').is(':checked');


    var _marcas = null;
    if ($('#chck_Permite').is(':checked') == true) {
        _marcas = false;
    } if ($('#chck_Requiere').is(':checked') == true) {
        _marcas = true;
    } if ($('#chck_Permite').is(':checked') == false && $('#chck_Requiere').is(':checked') == false) {
        _marcas = null;
    } if ($('#chck_Permite').is(':checked') == null) {
        _marcas = null;
    }
    if ($('#chck_Requiere').is(':checked') == null) {
        _marcas = null;
    }

    var _jor = null;
    if ($('#chck_HorTotal').is(':checked') == true) {
        _jor = false;
    } if ($('#chck_HorEspeci').is(':checked') == true) {
        _jor = true;
    } if ($('#chck_HorTotal').is(':checked') == null) {
        _jor = null;
    }
    if ($('#chck_HorEspeci').is(':checked') == null) {
        _jor = null;
    }

    var _intboni = null;

    if ($('#cboVariable').val() == 33) {

        if ($('#chck_Específico').is(':checked') == true) {
            _intboni = 4;
        } if ($('#chck_Total').is(':checked') == true) {
            _intboni = 3;
        } if ($('#chck_Total').is(':checked') == null) {
            _intboni = null;
        }
        if ($('#chck_Específico').is(':checked') == null) {
            _intboni = 0;
        }

    } else {
        _intboni = 0;

    }

    var _bitBonoEspIni = $('#bitBonoEspIni').is(':checked')
    var _bitBonoEspFin = $('#bitBonoEspFin').is(':checked')

    var _chcktodias = $('#chck_ToDias').is(':checked');
    var _chckdiaLab = $('#chck_DiLab').is(':checked');
    var _chckdiadesc = $('#chck_DiDesc').is(':checked');
    var _chckdiafer = $('#chck_DiFer').is(':checked');
    var _chckdiasab = $('#chck_DiSab').is(':checked');
    var _chckdiadom = $('#chck_DiDom').is(':checked');

    if (_TipoVariable == 30) {
        if ($("#GeneralChecks .checkbox:visible .checked").length == 0 || $("#GeneralChecks .checkbox:visible .checked").length == 2) {
            new PNotify({
                title: 'Aplicable a:',
                text: 'Seleccione solo una opción',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
        if (_chcktodias && _chckdiaLab) {
            new PNotify({
                title: 'Tipo Variable',
                text: 'Para el tipo de variable(Justificación) Solo puede selecciona una opcion: Todos los dias o Dia laborable',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
    }

    if ($('#tiempo_min').val() == null) {
        var _tiempmin = null;
    } else {
        var _tiempmin = $('#tiempo_min').val();
    }

    if ($('#tiempo_tol').val() == null) {
        var _tiemptol = null;
    } else {
        var _tiemptol = $('#tiempo_tol').val();
    }
    if ($('#txtMaxUso').val() == null) {
        var _txtMaxUso = null;
    } else {
        var _txtMaxUso = $('#txtMaxUso').val();
    }

    if ($('#tiempo_in').val() == null) {
        var _tiempo_in = null;
    } else {
        var _tiempo_in = $('#tiempo_in').val();
    }

    if ($('#tiempo_fil').val() == null) {
        var _tiempo_fil = null;
    } else {
        var _tiempo_fil = $('#tiempo_fil').val();
    }

    if ($('#tiempo_min').val() == null) {
        var _tiempo_min = null;
    } else {
        var _tiempo_min = $('#tiempo_min').val();
    }

    if ($('#tiempo_tol').val() == null) {
        var _tiempo_tol = null;
    } else {
        var _tiempo_tol = $('#tiempo_tol').val();
    }

    if ($('#cboTipoRegimen option:selected').val() == null) {
        var _TipoRgimen = null;
    } else {
        var _TipoRgimen = $('#cboTipoRegimen option:selected').val();
    }

    if ($('#cboTipoRed option:selected').val() == null) {
        var _TipoRedondeo = null;
    } else {
        var _TipoRedondeo = $('#cboTipoRed option:selected').val();
    }

    if ($('#cboAplica option:selected').val() == null) {
        var _AplicaPor = null;
    } else {
        var _AplicaPor = $('#cboAplica option:selected').val();
    }

    if ($('#Redondeo option:selected').val() == null) {
        var _FactorRed = null;
    } else {
        var _FactorRed = $('#Redondeo option:selected').val();
    }

    if ($('#cboRedondeo option:selected').val() == null) {
        var _FormaRedondeo = null;
    } else {
        var _FormaRedondeo = $('#cboRedondeo option:selected').val();
    }

    if ($('#ListaHorario option:selected').val() == null) {
        var _HorEspeci = null;
    } else {
        var _HorEspeci = $('#ListaHorario option:selected').val();
    }

    if ($('#Prioridad1 option:selected').val() == null) {
        var _Prioridad = null;
    } else {
        var _Prioridad = $('#Prioridad option:selected').val();
    }

    var _chckHorTra = $('#chckHorTra').is(':checked');
    var _chckDiaTra = $('#chckDiaTra').is(':checked');
    var _chckTraEfec = $('#chckTraEfec').is(':checked');
    var _chckExpPlan = $('#chckExpPlan').is(':checked');
    var _chckExpSubs = $('#chckExpSubs').is(':checked');
    var _chckExpNoTraNoSub = $('#chckExpNoTraNoSubs').is(':checked');
    var _chckCalculoCTS = $('#chckCalculoCTS').is(':checked');
    var _chckCalidadUti = $('#chckCalidadUtili').is(':checked');
    var _chckCalculoGrat = $('#chckCalculoGrat').is(':checked');
    var _chckActivo = $('#chck_Activo_Var').is(':checked');

    if ($('#chckCompensable').is(':checked')) {
        var _chckComp = 1;
    } else {
        var _chckComp = 0;
    }
    var _chckGenera = $('#chckGenerHoras').is(':checked');
    var _chck_Descontable = $('#chck_Descontable').is(':checked');
    var _chck_Sustentación = $('#chck_Sustentación').is(':checked');

    if ($('#strConceptoCampo1').val() == null) {
        var _campVar1 = null;
    } else {
        var _campVar1 = $('#strConceptoCampo1').val();
    }

    if ($('#strConceptoCampo2').val() == null) {
        var _campVar2 = null;
    } else {
        var _campVar2 = $('#strConceptoCampo2').val();
    }

    if ($('#strConceptoCampo3').val() == null) {
        var _campVar3 = null;
    } else {
        var _campVar3 = $('#strConceptoCampo3').val();
    }

    if ($('#strConceptoCampo4').val() == null) {
        var _campVar4 = null;
    } else {
        var _campVar4 = $('#strConceptoCampo4').val();
    }

    if ($('#strConceptoCampo5').val() == null) {
        var _campVar5 = null;
    } else {
        var _campVar5 = $('#strConceptoCampo5').val();
    }


    if (_codigo === '' || _desc === '' || _TipoVariable === '' || _TipoUniMed === ''
        || _codigoPlani === '' || _codigoExter === '') {
        new PNotify({
            title: 'Actualización de Variable',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt_cod_Var')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt_codPla_Var')[0].validity.valid) {
        new PNotify({
            title: 'Codigo Planilla(*)',
            text: 'Ingrese código sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (!$('#txt_codExte_Var')[0].validity.valid) {
        new PNotify({
            title: 'Codigo Externo(*)',
            text: 'Ingrese código sin espacios en blanco.',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (_TipoVariable == 33) {
        if (_jor && $('#ListaHorario option:selected').length == 0) {
            new PNotify({
                title: 'Jornadas Específicas',
                text: 'Debe Seleccionar al menos una jornada',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
        if (_intboni == 4) {
            var horaIni_t = moment($("#tiempo_in").val(), 'HH:mm')
            var horaFin_t = moment($("#tiempo_fil").val(), 'HH:mm')
            //if (horaIni_t.format("HH:mm") == "00:00" || horaFin_t.format("HH:mm") == "00:00") {
            //    new PNotify({
            //        title: 'Configuración Bono Específico',
            //        text: 'Hora Inicio y Hora Fin deben ser diferentes de 00:00',
            //        type: 'info',
            //        delay: 3000,
            //        styling: 'bootstrap3',
            //        addclass: 'dark'
            //    });
            //    return;
            //}
            if (horaIni_t.isSame(horaFin_t)) {
                new PNotify({
                    title: 'Configuración Bono Específico',
                    text: 'Hora Inicio es igual que Hora Fin',
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });
                return;
            }
        }
        if ($("#GeneralChecks .checkbox:visible .checked").length == 0) {
            new PNotify({
                title: 'Aplicable a:',
                text: 'Debe Seleccionar un Tipo de Día para aplicar la Bonificación',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }
    }


    var Variable = {

        // intIdSoft: 1,
        intIdConcepto: _intIdConcepto,
        intTipoConcepto: _TipoVariable,
        bitInternoSis: 0,
        strCoConcepto: _codigo,
        strDesConcepto: _desc,
        bitReqMarca: _marcas,
        strCoPlaniExp: _codigoPlani,
        strCoPDT: _codigoExter,
        intTipoUM: _TipoUniMed,
        bitAplTodosDias: _chcktodias,
        bitAplDiaLabor: _chckdiaLab,
        bitAplDiaDescanso: _chckdiadesc,
        bitAplDiaFeriado: _chckdiafer,
        bitAplDiaSabado: _chckdiasab,
        bitAplDiaDomingo: _chckdiadom,
        intIdTipRegimen: 34,                  //_TipoRgimen
        bitClasifica: _chckusen,
        smlTipoRedondeo: _TipoRedondeo,
        smlAplicaRedond: _AplicaPor,
        intTiempoRedond: _FactorRed,
        smlFormaRedond: _FormaRedondeo,
        bitFlHT: _chckHorTra,
        bitFlDT: _chckDiaTra,
        bitFlHTE: _chckTraEfec,
        bitFlGenerarHA: _chckGenera,
        bitFlCTS: _chckCalculoCTS,
        bitExportPlani: _chckExpPlan,
        bitFlSubsidio: _chckExpSubs,
        bitFlDiaNoLabNiSub: _chckExpNoTraNoSub,
        intTiempoRTardanza: _chck_Descontable,
        tinFlCompensacion: _chckComp,
        tinPrioridadHE: _Prioridad,
        intIdTipBoni: _intboni,
        //intHoraIni: _tiempo_in,
        //intHoraFin: _tiempo_fil,
        //intTolerancia: _tiemptol,
        //intTiempoMin: _tiempmin,
        timeHoraIni: _tiempo_in,
        timeHoraFin: _tiempo_fil,
        bitHoraIni: _bitBonoEspIni,
        bitHoraFin: _bitBonoEspFin,
        timeTolerancia: _tiempo_min,
        timeTiempoMin: _tiempo_tol,
        bitSustentacion: _chck_Sustentación,
        intUsoMaximo: _txtMaxUso,
        strConceptoCampo1: _campVar1,
        strConceptoCampo2: _campVar2,
        strConceptoCampo3: _campVar3,
        strConceptoCampo4: _campVar4,
        strConceptoCampo5: _campVar5,
        bitFlActivo: _chckActivo,
        bitflutilidades: _chckCalidadUti,
        bitFlGrati: _chckCalculoGrat,
        bitFlDescontable: _chck_Descontable,
        bitJornadaEspecif: _jor,

    }


    class PrioridadesConcepto {
        constructor(intIdConcepto, tinPrioridadHE) {
            this.intIdConcepto = intIdConcepto
            this.tinPrioridadHE = tinPrioridadHE
        }
    }

    class JornadasBonificacion {
        constructor(intIdJorBonDet, intIdConcepto, intIdJornada, intIdUniOrg, dttFecAsig) {
            this.intIdJorBonDet = intIdJorBonDet
            this.intIdConcepto = intIdConcepto
            this.intIdJornada = intIdJornada
            this.intIdUniOrg = intIdUniOrg
            this.dttFecAsig = dttFecAsig


        }
    }

    var detalleVar = new Array();
    $('#tb_HorasExtras tr').each((index, item) => {
        var tr_cogido = $(item).find('td').first().html();
        var td_id = $(item).find('select option:selected').val();
        //var input = $(item).find('input');
        //   $('.HEP' + (index + 1) + '').val();
        // $('.HEP' + (index + 1) + '').prop('id');

        detalleVar.push(new PrioridadesConcepto(tr_cogido, td_id));

    });
    console.log(detalleVar);

    var detalleBoni = new Array();
    $('#ListaHorario option:selected').each((index, item) => {
        //var input = $(item).find('input');
        console.log(item);
        var tr_cogido = $(item).val();
        detalleBoni.push(new JornadasBonificacion(0, 0, tr_cogido, 0, null));

    });
    console.log(detalleBoni);


    $.post(
        '/Asistencia/RegistrarEditarVariable',
        { ObjConcepto: Variable, listaConcepto: detalleVar, listaDetaBoni: detalleBoni, intTipoOperacion: 2 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Variable',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaVariable();
                    $('.form-hide-variable').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Variable';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Variable',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-cancel-variable').on('click', function () {
    validarSession()
    $('.form-hide-variable').hide();
});

function TablaExtra() {

    var variable = $('#cboVariable option:selected').val();
    $.post(
        '/Asistencia/ListarHorasExtrasxPrio',
        { strEntidad: 'TGCONCEPTO', intIdFiltroGrupo: variable, strGrupo: '', strSubGrupo: '' },

        (response) => {
            $('#tb_HorasExtras').empty();
            $('#HE').empty();
            Prioridad = 1;
            response.forEach(element => {

                $('#tb_HorasExtras').append('<tr><td  style="display:none" class="id">' + element.intIdConcepto + '</td><td class="strcoconcepto">' + element.strCoConcepto + '</td><td class="strDesConcepto">' + element.strDesConcepto + '</td><td class="tinPrioridadHE">' + element.tinPrioridadHE + '</td><td><select class= "form-control ComboPrioridad" id ="Prioridad' + Prioridad + '" > ' +

                    '</select> </td></tr>');

                $('#HE').append('<div id="abc" ><input type="hidden" class="HEP' + Prioridad + '" id="' + Prioridad + '" value="' + element.intIdConcepto + '"/></div>')


                Prioridad = Prioridad + 1;

            });
            var count_hours = response.length;

            for (var y = 1; y <= count_hours; y++) {

                for (var i = 0; i <= count_hours; i++) {

                    $('#Prioridad' + y + '').append('<option value="' + i + '" >' + i + '</option>');

                }
                //priority(count_hours, y);
                var seleccionados = new Array();
                var iddd = new Array();


                if ($('#Prioridad' + y + '  option:selected').val() !== 0) {


                } else if ($('#Prioridad' + x + '  option:selected').val() == 0) {


                    iddd.push(x);
                    seleccionados.push(selecets);

                }
            }

            $('#Reset').on('click', function () {

                for (var i = 0; i <= Prioridad; i++) {

                    $('#Prioridad' + i + '').val(0);

                }

            });
        });
}

function EdiatarPrioridades() {
    var variable = $('#cboVariable option:selected').val();
    $.post(
        '/Asistencia/ListarHorasExtrasxPrio',
        { strEntidad: 'TGCONCEPTO', intIdFiltroGrupo: variable, strGrupo: '', strSubGrupo: '' },
        (response) => {


            Prioridad = 1;
            response.forEach(element => {

                if ($('#' + Prioridad + '').val() == element.intIdConcepto) {
                    $('#Prioridad' + Prioridad + '').val(element.tinPrioridadHE);

                } else if ($('#' + Prioridad + '').val() !== element.intIdConcepto) {

                    $('#Prioridad' + Prioridad + '').val(0);

                }

                $('#Prioridad' + Prioridad + '').on('change', function () {


                    var o = Prioridad - 1;
                    for (var y = 1; y <= o; y++) {

                        for (var i = 2; i <= o; i++) {

                            if (i !== y) {


                                var combo1 = $('#Prioridad' + y + '').val();
                                var combo2 = $('#Prioridad' + i + '').val();



                                if (combo1 == 0 || combo2 == 0) {

                                }

                                else if (combo1 == combo2) {


                                    new PNotify({
                                        title: 'Horas Extras',
                                        text: 'No pueden poner la misma prioridad ' + combo1 + '',
                                        type: 'info',
                                        delay: 3000,
                                        styling: 'bootstrap3'
                                    });
                                    $('#Prioridad' + y + '').val(0);

                                    return;
                                }
                                else if (combo1 !== combo2) {


                                }


                            } else if (i == y) {

                            }

                        }
                    }

                });


                Prioridad = Prioridad + 1;

            });




        });

}

function CamposAdicionalesConcepto() {

    $.post(
        '/Asistencia/CamposAdicionales',
        { strEntidad: 'TGCONCEPTO' },
        (response) => {
            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');
            });

            if (response.length == 0) {
                $('#headingSix1').hide();
            } else {
                $('#headingSix1').show();
            }
        });
}


/**--------------------------------------------------------- */

/**14. Empleado */
/**-------------------------------------------------------- */
//Se movio al archivo /Resources/Empleado/empleado.js
/**-------------------------------------------------------- */


/**15. Cambio Documento de Identidad */
/**------------------------------------------------------- */
//$('#btn-new-cambioDI').on('click', function () {
//    $('.form-hide-cambioDI').show();
//    $.post(
//        '/Personal/NuevoCambioDI',
//        {},
//        (response) => {
//            if (response !== '') {
//                $('.form-hide-cambioDI .x_content').empty();
//                $('.form-hide-cambioDI .x_content').html(response);
//                $('.form-hide-cambioDI').show();
//            }
//        });
//});

//function editarCambioDI() {
//    $('.form-hide-cambioDI').show();
//}

//function eliminarCambioDI() {

//    swal({
//        title: "Eliminar Documento de Identidad",
//        text: "Esta seguro de eliminar el registro?",
//        type: "warning",
//        showCancelButton: true,
//        confirmButtonText: "Sí, eliminar",
//        cancelButtonText: "No, cancelar",
//    }).then(function (isConfirm) {
//        if (isConfirm) {
//            swal("Eliminado!", "El resgistro fue eliminado correctamente", "success");
//        } else {
//            swal("Cancelado", "La operacion fue cancelada :)", "error");
//        }
//    });

//}

//$('#btn-save-change-cambioDI').on('click', function () {

//    var typeArray = ['success', 'info', 'error'];

//    var typeItem = typeArray[Math.floor(Math.random() * typeArray.length)];

//    new PNotify({
//        title: 'Registro Documento de Identidad',
//        text: 'El registro se creó correctamente',
//        type: typeItem,
//        delay: 1000,
//        styling: 'bootstrap3'
//    });
//});

//$('#btn-cancel-cambioDI').on('click', function () {
//    $('.form-hide-cambioDI').hide();
//});


/**------------------------------------------------------- */
/**16. Perfil */
/**------------------------------------------------------ */
var echartGlobalInstance

function graficoAsistencia() {
    if ($('#mainb').length) {

        var echartBar = echarts.init(document.getElementById('mainb'), theme);
        echartGlobalInstance = echartBar
        var intIdPersonal = window.SISCOP.intIdPersonal
        const anio = moment().startOf('year').format('YYYY')
        fechaInicio = '01/01/' + anio
        fechaFin = '31/12/' + anio
        const anioGnl = anio.substr(2, 2)
        var list_asistencia = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var list_inasistencia = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

        $.blockUI({
            css: {
                border: 'none',
                padding: '15px',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius': '10px',
                opacity: .5,
                color: '#fff'
            },
            message: 'Procesando...'
        });

        $.post(
            '/Asistencia/ObtenerAsistenciaXFecha',
            { intIdPersonal: intIdPersonal, fechaInicio: fechaInicio, fechaFin: fechaFin },

            (response) => {

                var list_asistencia = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                var list_inasistencia = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

                response.forEach(element => {
                    switch (element.mes) {
                        case 1:
                            list_asistencia[0] = element.asistencia;
                            list_inasistencia[0] = element.faltas;
                            break
                        case 2:
                            list_asistencia[1] = element.asistencia;
                            list_inasistencia[1] = element.faltas;
                            break
                        case 3:
                            list_asistencia[2] = element.asistencia;
                            list_inasistencia[2] = element.faltas;
                            break;
                        case 4:
                            list_asistencia[3] = element.asistencia;
                            list_inasistencia[3] = element.faltas;
                            break;
                        case 5:
                            list_asistencia[4] = element.asistencia;
                            list_inasistencia[4] = element.faltas;
                            break;
                        case 6:
                            list_asistencia[5] = element.asistencia;
                            list_inasistencia[5] = element.faltas;
                            break;
                        case 7:
                            list_asistencia[6] = element.asistencia;
                            list_inasistencia[6] = element.faltas;
                            break;
                        case 8:
                            list_asistencia[7] = element.asistencia;
                            list_inasistencia[7] = element.faltas;
                            break;
                        case 9:
                            list_asistencia[8] = element.asistencia;
                            list_inasistencia[8] = element.faltas;
                            break;
                        case 10:
                            list_asistencia[9] = element.asistencia;
                            list_inasistencia[9] = element.faltas;
                            break;
                        case 11:
                            list_asistencia[10] = element.asistencia;
                            list_inasistencia[10] = element.faltas;
                            break;
                        case 12:
                            list_asistencia[11] = element.asistencia;
                            list_inasistencia[11] = element.faltas;
                            break;
                    }
                });

                echartBar.setOption({
                    title: {
                        text: 'Gráfico de Consumo Anual'//Gráfico de Asistencia Anual
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        bottom: 10,
                        //left: 'center',
                        data: ['Consumos', 'Consumos Inválidos']//['Asistencias', 'Faltas']
                    },
                    toolbox: {
                        show: false
                    },
                    calculable: false,
                    xAxis: [{
                        type: 'category',
                        name: 'meses',
                        data: ['Ene' + anioGnl, 'Feb' + anioGnl, 'Mar' + anioGnl, 'Abr' + anioGnl, 'May' + anioGnl, 'Jun' + anioGnl, 'Jul' + anioGnl, 'Ago' + anioGnl, 'Set' + anioGnl, 'Oct' + anioGnl, 'Nov' + anioGnl, 'Dic' + anioGnl]
                    }],
                    yAxis: [{
                        name: 'N° de consumos',
                        type: 'value'
                    }],
                    series: [{
                        name: 'Consumos',//Asistencias
                        type: 'bar',
                        data: list_asistencia,
                        markPoint: {
                            data: [{
                                type: '',//max
                                name: ''//MAX
                            }, {
                                type: '',//min
                                name: ''//MIN
                            }]
                        },
                        markLine: {
                            data: [{
                                type: 'average',
                                name: 'PROMEDIO'
                            }]
                        }
                    }, {
                        name: 'Consumos Inválidos',
                        type: 'bar',
                        data: list_inasistencia,
                        markPoint: {
                            data: [{
                                type: '',//max
                                name: ''//MAX
                            }, {
                                type: '',//min
                                name: ''//MIN
                            }]
                        },
                        markLine: {
                            data: [{
                                type: 'average',
                                name: 'PROMEDIO'
                            }]
                        }
                    }]
                });
                $.unblockUI();
            });
    };
}

$(document).ready(function () {
    $('.collapse-link').on('click', function () {
        var $BOX_PANEL = $(this).closest('.x_panel'),
            $ICON = $(this).find('i'),
            $BOX_CONTENT = $BOX_PANEL.find('#oculto');
        // fix for some div with hardcoded fix class
        if ($BOX_PANEL.attr('style')) {
            $BOX_CONTENT.slideToggle(200, function () {
                $BOX_PANEL.removeAttr('style');
            });
        } else {
            $BOX_CONTENT.slideToggle(200);
            $BOX_PANEL.css('height', 'auto');
        }
        $ICON.toggleClass('fa-chevron-up fa-chevron-down');
    });
});



function init_ToolbarBootstrapBindings() {
    var fonts = ['Serif', 'Sans', 'Arial', 'Arial Black', 'Courier',
        'Courier New', 'Comic Sans MS', 'Helvetica', 'Impact', 'Lucida Grande', 'Lucida Sans', 'Tahoma', 'Times',
        'Times New Roman', 'Verdana'
    ],
        fontTarget = $('[title=Font]').siblings('.dropdown-menu');
    $.each(fonts, function (idx, fontName) {
        fontTarget.append($('<li><a data-edit="fontName ' + fontName + '" style="font-family:\'' + fontName + '\'">' + fontName + '</a></li>'));
    });
    $('a[title]').tooltip({
        container: 'body'
    });
    $('.dropdown-menu input').click(function () {
        return false;
    })
        .change(function () {
            $(this).parent('.dropdown-menu').siblings('.dropdown-toggle').dropdown('toggle');
        })
        .keydown('esc', function () {
            this.value = '';
            $(this).change();
        });

    $('[data-role=magic-overlay]').each(function () {
        var overlay = $(this),
            target = $(overlay.data('target'));
        overlay.css('opacity', 0).css('position', 'absolute').offset(target.offset()).width(target.outerWidth()).height(target.outerHeight());
    });

    if ("onwebkitspeechchange" in document.createElement("input")) {
        var editorOffset = $('#editor').offset();

        $('.voiceBtn').css('position', 'absolute').offset({
            top: editorOffset.top,
            left: editorOffset.left + $('#editor').innerWidth() - 35
        });
    } else {
        $('.voiceBtn').hide();
    }
}


function editarPapeletaSalida() {
    $('.form-hide-PapeletaSalida').show();
}

function eliminarPapeletaSalida() {

    swal({
        title: "Eliminar Papeleta de Salida",
        text: "Esta seguro de eliminar el registro?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            swal("Eliminado!", "El resgistro fue eliminado correctamente", "success");
        } else {
            swal("Cancelado", "La operacion fue cancelada : )", "error");
        }
    });

}

$('#btn-save-change-PapeletaSalida').on('click', function () {

    var typeArray = ['success', 'info', 'error'];

    var typeItem = typeArray[Math.floor(Math.random() * typeArray.length)];

    new PNotify({
        title: 'Registro Papeleta de Salida',
        text: 'El registro se creó correctamente',
        type: typeItem,
        delay: 1000,
        styling: 'bootstrap3'
    });
});

$('#btn-cancel-PapeletaSalida').on('click', function () {
    $('.form-hide-PapeletaSalida').hide();
});

/**------------------------------------------------------*//*ln_14731_all*/
/**21. Campos Adicionales I */
/**------------------------------------------------------*//*ln_14773_all*/
$('#btn-new-CamposAdicionales').on('click', function () {
    $('.form-hide-CamposAdicionales').show();

});
function editarCamposAdicionales() {
    $('.form-hide-CamposAdicionales').show();
}
function eliminarCamposAdicionales() {

    swal({
        title: "Eliminar Campos Adicionales",
        text: "Esta seguro de eliminar el registro?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            swal("Eliminado!", "El resgistro fue eliminado correctamente", "success");
        } else {
            swal("Cancelled", "Your imaginary file is safe :)", "error");
        }
    });

}
$('#btn-save-change-CamposAdicionales').on('click', function () {

    var typeArray = ['success', 'info', 'error'];

    var typeItem = typeArray[Math.floor(Math.random() * typeArray.length)];

    new PNotify({
        title: 'Registro Campos Adicionales',
        text: 'El registro se creó correctamente',
        type: typeItem,
        delay: 1000,
        styling: 'bootstrap3'
    });
});
$('#btn-cancel-CamposAdicionales').on('click', function () {
    $('.form-hide-CamposAdicionales').hide();
});




/**------------------------------------------------------ *//*ln_15621_site*/
/**22. Jornada Diaria (desde SISFOOD) */ 
/**-------------------------------------------------------*//*ln_21066_site*/

$('#filActi1').on('change', function () {

    TablaJornada();

});

$('#filtojer1').on('change', function () {

    TablaJornada();

});

$('#filtro1').keyup(function () {

    TablaJornada();

});

$('#filtrojer2').on('change', function () { //Martes16

    TablaJornada();

});

var _varTablaJornada;
function TablaJornada() {
    validarSession();//AÑADIDO HG 22.04.2021
    var filtroActivo = $('#filActi1').val();
    var strfiltro = $('#filtro1').val();
    var filtrojer = $('#filtojer1').val();
    var filtroTipoServ_ = $('#filtrojer2').val();
    //var filtroTipoServ_ = $('#TipoServC').val();


    $.post(
        '/Asistencia/GetTablaFiltradaJornadaDiaria',
        { IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer, filtroTipoServ: filtroTipoServ_ },
        (response) => {
            console.log(response);

            if (typeof _varTablaJornada !== 'undefined') {
                _varTablaJornada.destroy();
            }
            _varTablaJornada = $('#tablaJornada').DataTable({
                data: response,
                columns: [

                    { data: 'strCodJornada' },   //Código
                    { data: 'strDscJornada' },   //Descripción
                    { data: 'EXtra1' },          //Tipo Jornada
                    { data: 'EXtra2' },          //Tipo de Refrigerio
                    { data: 'timeHoraIni' },     //Entrada
                    { data: 'timeHoraFin' },     //Salida 
                    { data: 'EXtra3' },          //Dependencia
                    { data: 'EXtra4' },          //Und. Organizacional
                    { data: 'strTipoServicio' }, //Añadido HG.16.02.21 jueves18        //08   //Inicio y Fin de código para solucionar observación 1.3  HG 02.03.2021
                    { data: null },              //Acción              //08            //09
                    { data: 'intIdJornada' },    //style="display:none"//09            //10
                    //{ data: 'strTipoServicio' }, //Añadido HG.16.02.21 jueves18 //10 


                ],
                lengthMenu: [10, 25, 50],
                order: [1, 'asc'],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [9],//8
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                        '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    },
                    {

                        targets: [10],//9
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });

            $('#tablaJornada  tbody').on('click', 'tr button.btn-delete', function () {
                validarSession();//AÑADIDO HG 22.04.2021
                var data = _varTablaJornada.row($(this).parents('tr')).data();

                if (data == null) {
                    data = null;

                    var data = _varTablaJornada.row($(this).parents('li')).data();
                    intentEliminarJornada(data['intIdJornada'], data['strDscJornada']);

                } else {

                    var data = _varTablaJornada.row($(this).parents('tr')).data();
                    intentEliminarJornada(data['intIdJornada'], data['strDscJornada']);

                }


            });

        });

}

//Reubicado desde TablaJornada()
$('#tablaJornada  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var data = _varTablaJornada.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaJornada.row($(this).parents('li')).data();
        cardarDatosJornada(data);
    } else {
        var data = _varTablaJornada.row($(this).parents('tr')).data();
        cardarDatosJornada(data);
    }

});

function intentEliminarJornada(idJor, nomJor) {
    validarSession();//AÑADIDO HG 22.04.2021
    swal({
        title: "Eliminar Variable",
        text: "¿Está seguro de eliminar la variable   ''<strong>" + nomJor + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            yesEliminaJornada(idJor);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaJornada(idJor) {
    validarSession();//AÑADIDO HG 22.04.2021
    $.post(
        '/Asistencia/EliminarJornada',
        { intIdJornada: idJor },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaJornada();

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

function CamposAdicionalesJornada() {
    validarSession();//AÑADIDO HG 22.04.2021
    $.post(
        '/Asistencia/CamposAdicionales',
        { strEntidad: 'TGJORNADA' },
        (response) => {

            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}

class Intervalos {
    constructor(
        interva
        , intTipoInterval
        , NomTipoInter
        , timeHoraIni
        , timeHoraFin
        , intTurno
        , timeTolerancia
        , timeDuracion
        , timeTiempoMaximo
        , bitFlHT
        , bitDiaSig
        , strorden
        , intnum
        , clave
        , intIdInterval
        , intidTipoServ//añadido
        , strDeTipServ //añadido
    ) {

        this.interva = interva
        this.intTipoInterval = intTipoInterval
        this.NomTipoInter = NomTipoInter
        this.timeHoraIni = timeHoraIni
        this.timeHoraFin = timeHoraFin
        this.intTurno = intTurno
        this.timeTolerancia = timeTolerancia
        this.timeDuracion = timeDuracion
        this.timeTiempoMaximo = timeTiempoMaximo
        this.bitFlHT = bitFlHT
        this.bitDiaSig = bitDiaSig
        this.strorden = strorden
        this.intnum = intnum
        this.clave = clave
        this.intIdInterval = intIdInterval
        this.intidTipoServ = intidTipoServ //Añadido HG_18.02.21 TIPO DE SERVICIO
        this.strDeTipServ = strDeTipServ   //Añadido HG_19.02.21 TIPO DE SERVICIO
    }
}


//===============================================================================================
//================================= BOTON EDITAR JORNADA DIARIA =================================boton editar jornada diaria
//===============================================================================================
function cardarDatosJornada(data) {

    $('.form-hide-JornadaDiaria').show();
    $.post(
        '/Asistencia/EditarJornadaDiaria',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-JornadaDiaria .x_content').empty();
                $('.form-hide-JornadaDiaria .x_content').html(response);
                //$('.form-hide-JornadaDiaria .x_content').hide();
                $('.form-hide-JornadaDiaria .x_content').show();
                $('.form-hide-JornadaDiaria').show();
                switcheryLoad();
                init_checkBox_styles();
                $('#btn-update-JornadaDiaria').show();
                $('#btn-save-change-JornadaDiaria').hide();

                //Inicio de código para solucionar observación de menús deplegables  HG 17.03.2021 
                //La ejecución de la siguiente función en este punto genera  
                //el error de los menús desplegables del panel lateral izquierdo

                //init_sidebar();   //HG 17.03.21 COMENTADO

                //Fin de código para solucionar observación de menús deplegables  HG 17.03.2021 

                // BuscarUnidades();
                CamposAdicionalesJornada();
                //CombosJornadaDiaria();//COMETADO HG 04.03.21 NOTA: volvia a caragr los combos y no era necesario
                var detalleinterval = new Array();
                var detalleHoras = new Array();


                $.post(
                    '/Asistencia/ObtenerJornadaPorsuPK',//Viernes12 ObtenerJornadaComedorPorsuPK
                    { intIdJornada: data.intIdJornada },
                    (response) => {

                        console.log(response);

                        let element = response[0];

                        //Combo Tipo Jornada
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'JORN', strSubGrupo: 'TIPO' },
                            (response) => {
                                $('#TipoJor').empty();
                                response.forEach(element => {
                                    $('#TipoJor').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });
                                $('#TipoJor').val(element.intTipoDia);
                            });

                        //ComboRefrigerio 
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'REF' },
                            (response) => {
                                $('#cboRef').empty();
                                response.forEach(element => {
                                    $('#cboRef').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });


                                $('#cboRef').val(element.intControlRefri); //Añadido ES 25.02.2021 08:57AM

                                var IntidCombo = $('#cboRef option:selected').val();

                                $.post(
                                    '/Asistencia/LlenarTipoUM',
                                    { strEntidad: 'TGTIPO', intIdFiltroGrupo: IntidCombo, strGrupo: 'CAL', strSubGrupo: 'HOR' },
                                    (response) => {
                                        $('#TipoInter').empty();

                                        response.forEach(element => {
                                            //$('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                            $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                                        });
                                    });
                            });

                        //ComboJerarquia Formulario EDITAR -
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: '' },
                            (response) => {
                                $('#cboJerar').empty();
                                $('#cboJerar').append('<option value="0">Seleccione</option>');
                                response.forEach(element => {
                                    $('#cboJerar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });
                                $("#cboJerar option").filter(function () {
                                    return this.text == element.EXtra3;
                                }).attr('selected', true);

                                var idER = $('#cboJerar').val();

                                $.post(
                                    '/Asistencia/LlenarTipoUM',
                                    { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: idER, strGrupo: 'JERAR', strSubGrupo: '' },
                                    (response) => {
                                        $('#cboUndOrg').empty();
                                        $('#cboUndOrg').attr('disabled', false);

                                        response.forEach(element => {
                                            $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                                        });

                                        $("#cboUndOrg").val(element.IntIdUniOrg);
                                    });


                            });

                        //Combo Turno Formulario EDITAR
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'TURN' },
                            (response) => {
                                $('#TipoTurn').empty();
                                response.forEach(element => {
                                    $('#TipoTurn').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                                });
                            });


                            $('#cboJerar').on('change', function () {
                                validarSession();//AÑADIDO HG 22.04.2021
                                var IntidJerar = $('#cboJerar option:selected').val();

                                $.post(
                                    '/Asistencia/LlenarTipoUM',
                                    { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: '' },
                                    (response) => {
                                        $('#cboUndOrg').empty();
                                        $('#cboUndOrg').attr('disabled', false);

                                        response.forEach(element => {
                                            $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                                        });
                                    });


                            });



                            //Combo Tipo Intervalo #2 -añadido 24.02.2021 Formulario EDITAR
                            $('#cboRef').on('change', function () {
                                validarSession();//AÑADIDO HG 22.04.2021
                                var IntidCombo = $('#cboRef option:selected').val();

                                $.post(
                                    '/Asistencia/LlenarTipoUM',
                                    { strEntidad: 'TGTIPO', intIdFiltroGrupo: IntidCombo, strGrupo: 'CAL', strSubGrupo: 'HOR' },
                                    (response) => {
                                        $('#TipoInter').empty();
                                        //$('#TipoInter').attr('disabled', false);

                                         //Inicio de código para solucionar observación 1.2  HG 02.03.2021
                                        $('#TipServCom').hide();
                                        $('#TipoServC').val(0);
                                        $('#consi_max').hide();
                                        $('#cons_trab').hide();
                                        $('#checks_pri_ult').show();
                                        $('#TipoServC').val(0);
                                        $('#tiempo_cons_max').val('00:00');
                                        $('#TipoTurn').val(42);
                                        $('#chck_pri').iCheck('uncheck');
                                        $('#chck_ult').iCheck('uncheck');

                                         //Fin de código para solucionar observación 1.2   HG 02.03.2021

                                        response.forEach(element => {
                                            //$('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                            $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                                        });
                                    });                        
              



                            });


                            //Combo Tipo De Servicio - Jornada Diaria
                            $.post(
                                '/Asistencia/LlenarTipoUM',
                                { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'TIPOSERV' }, // HG 13.03.21 Cambiado COMEDOR por RN --se devuelve a COMEDOR 05.04.2021
                                (response) => {
                                    
                                    $('#TipoServC').empty();
                                   
                                    $('#TipoServC').append('<option value="0">Seleccione</option>');

                                    response.forEach(element => {

                                      
                                        $('#TipoServC').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                                    });
                                });


                        //OnChange del Tipo de Servicio -- Pendiente

                            $('#cbounidsupe').empty();
                            //Llenado de controles de :Código(*), Descripción(*) EDITAR JORNADA DIARIA COMEDOR
                            $('#TipoJor').val(element.intTipoDia);
                            $('#cboRefriguerio').val(element.intControlRefri);
                            // $('#cboJerarquia').val(element.IntIdUniOrg);
                            $('#txt_cod_Jor').val(element.strCodJornada);
                            $('#txt_desc_Jor').val(element.strDscJornada);
                            $('#idjorn').val(data.intIdJornada);

                            //CHECKBOX ACTIVO/INACTIVO EDITAR JORNADA DIARIA COMEDOR
                            if (element.bitFlActivo == false) {

                                $('#idche').html('<input type="checkbox" id="chk-activo-JO" class=" js-switch"  /> Activo');
                                // $('#chck_Activo_Var').iCheck('uncheck');
                                switcheryLoad();
                            } else if (element.bitFlActivo == true) {

                                $('#idche').html('<input type="checkbox" id="chk-activo-JO" class=" js-switch" checked /> Activo');
                                // $('#chck_Activo_Var').iCheck('check');
                                switcheryLoad();
                            }

                            if (element.bitDiaSig == true) {
                                $('#chck_cambdia').iCheck('check');
                            }
                            else if (element.bitDiaSig == false) {
                                $('#chck_cambdia').iCheck('uncheck');
                            }
                            if (element.bitPertenecDiaSig == true) {
                                $('#chck_perteneceJor').iCheck('check');
                            }
                            else if (element.bitDiaSig == false) {
                                $('#chck_perteneceJor').iCheck('uncheck');
                            }


                            $('#txtcolor').val(element.strColor);

                            init_ColorPicker();


                            $('#strJornadaCampo1').val(element.strJornadaCampo1);
                            $('#strJornadaCampo2').val(element.strJornadaCampo2);
                            $('#strJornadaCampo3').val(element.strJornadaCampo3);
                            $('#strJornadaCampo4').val(element.strJornadaCampo4);
                            $('#strJornadaCampo5').val(element.strJornadaCampo5);



                           

                    });

                    //});


                $('#chck_cambdia').on('ifChanged', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    if ($('#chck_cambdia').is(':checked') == true) {

                        $('#Pertenece_Jor').show();
                        $('#chck_perteneceJor').attr('disabled', false);
                    }
                    if ($('#chck_cambdia').is(':checked') == false) {
                        $('#chck_perteneceJor').iCheck('uncheck');
                        $('#Pertenece_Jor').hide();
                        $('#chck_perteneceJor').attr('disabled', true);

                    }

                });

                if ($('#TipoInter').val() == 2) {

                    $('#cons_trab').hide();
                    $('#consi_max').hide();
                    $('#checks_pri_ult').show();
                    $('#chck_pri').iCheck('uncheck');
                    $('#chck_ult').iCheck('uncheck');
                    $('#consTrab').iCheck('uncheck');
                    $('#tiempo_cons_max').empty();

                }

                //HG 04.03.21 01
                $('#TipoInter').on('change', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    $('#TipoServC').val(0);

                    if ($('#TipoInter').val() == 39) {

                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                        $('#TipServCom').hide();

                    } else if ($('#TipoInter').val() == 40) {

                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                        $('#TipServCom').hide();

                    } else if ($('#TipoInter').val() == 41) {

                        $('#cons_trab').show();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                        $('#TipServCom').show();

                    } else if ($('#TipoInter').val() == 45) {

                        $('#cons_trab').hide();
                        $('#consi_max').show();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                        $('#TipServCom').hide();

                    } else if ($('#TipoInter').val() == 46) {

                        $('#consi_max').show();
                        $('#cons_trab').show();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                        $('#TipServCom').show();

                    }
                });


                //LIMPIAR INTERVALOS
                $('#btn-limpiar-Intrevalos').on('click', function () {
                    validarSession();//AÑADIDO HG 22.04.2021

                    $('#TipoInter').val(39);
                    $('#TipoTurn').val(42);
                    $('#tiempo_inic').val('00:00');
                    $('#tiempo_fin').val('00:00');
                    $('#tiempo_tole').val('00:00');
                    $('#tiempo_dura').val('00:00');
                    $('#tiempo_cons_max').val('00:00');
                    $('#cons_trab').hide();
                    $('#consi_max').hide();
                    $('#checks_pri_ult').hide();
                    //HG 04.03.21
                    $('#TipServCom').hide();
                    $('#TipoServC').val(0);           




                    if ($('#TipoInter').val() == 39) {

                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();

                    }
                });

                $('#chck_pri').on('ifChanged', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    if ($('#chck_pri').is(':checked') == true) {
                        $('#chck_ult').iCheck('uncheck');
                    } else if ($('#chck_pri').is(':checked') == false) {
                        $('#chck_pri').iCheck('uncheck');
                    }
                });

                $('#chck_ult').on('ifChanged', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    if ($('#chck_ult').is(':checked') == true) {
                        $('#chck_pri').iCheck('uncheck');
                    } else if ($('#chck_ult').is(':checked') == false) {
                        $('#chck_ult').iCheck('uncheck');
                    }
                });


                var d = new Date();
                var n = d.getTime()

                var uiui = 2;

                //REALIZA LA PETICION DE LOS INTERVALOS GUARDADOS EN LA TABLA TGINTERVALO
                $.post(
                    '/Asistencia/GetTablaFiltradaIntervalos',//devuelto a como estaba jueve18
                    { intfiltrojer: data.intIdJornada },

                    (response) => {

                        response.forEach(element => {

                            if (element.intNuOrden == 1) {
                                var strorden = 'Primero';
                                $('#end').val(5);
                            }
                            if (element.intNuOrden == 999) {
                                var strorden = 'Ultimo';
                                $('#end2').val(5);
                            }
                            if (element.intNuOrden !== 1 && element.intNuOrden !== 999) {
                                var strorden = ' ';
                            }



                            class Horas {

                                constructor(HoraInicial, MinIninicial, HoraFinal, MiniFinal, clave) {

                                    this.HoraInicial = HoraInicial
                                    this.MinIninicial = MinIninicial
                                    this.HoraFinal = HoraFinal
                                    this.MiniFinal = MiniFinal
                                    this.clave = n

                                }

                            }

                            var _HoraIni = element.strectra7;
                            var _HoraFin = element.strectra8;

                            var HoraIni = parseInt(_HoraIni.substring(0, 2));
                            var MiniIni = parseInt(_HoraIni.substring(5, 3));
                            var HoraFin = parseInt(_HoraFin.substring(0, 2));
                            var MiniFin = parseInt(_HoraFin.substring(5, 3));

                            //Añadido 05.03.21                          
                            var element_strtipointer = element.strtipointer;
                            if (element.intidTipoServ == 0) {
                                element_strtipointer = 'No Aplica';
                            }

                         

                            detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n + uiui));

                            //ARRELO ORIGINAL COMENTADO
                            //detalleinterval.push(new Intervalos(element.strectra3,
                            //    element.intTipoInterval, element.strectra1, element.strectra7, element.strectra8, element.intTurno,
                            //    element.strectra5, element.strectra4, element.strectra6, element.bitFlHT, element.bitDiaSig, strorden,  element.intNuOrden,
                            //    n + uiui, element.intIdIntervalo));

                            //ARREGLO FORMULARIO EDITAR  
                            detalleinterval.push(new Intervalos(
                                  element.strectra3           //00
                                , element.intTipoInterval     //01
                                , element.strectra1           //02
                                , element.strectra7           //03
                                , element.strectra8           //04
                                , element.intTurno            //05
                                , element.strectra5           //06
                                , element.strectra4           //07
                                , element.strectra6           //08
                                , element.bitFlHT             //09
                                , element.bitDiaSig           //10
                                , strorden                    //11
                                , element.intNuOrden          //12
                                , n + uiui                    //13
                                , element.intIdIntervalo      //14
                                , element.intidTipoServ       //15 Añadido
                                , element_strtipointer        //16 Añadido

                            ));


                            uiui = uiui + 2;

                        });

                        if (typeof _varTablaIntervalo !== 'undefined') {
                            _varTablaIntervalo.destroy();
                        }

                        //Boton "EDITAR": Intervalos Agregados a la Jornada 
                        _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                            data: detalleinterval,
                            columns: [
                                { data: 'interva' },             //P00 
                                { data: 'NomTipoInter' },        //P01
                                { data: 'intTurno' },            //P02
                                { data: 'intTipoInterval' },     //P03
                                { data: 'timeDuracion' },        //P04
                                { data: 'bitDiaSig' },           //P05
                                { data: 'timeHoraIni' },         //P06
                                { data: 'timeTiempoMaximo' },    //P07
                                { data: 'timeTolerancia' },      //P08
                                { data: 'strorden' },            //P09
                                { data: 'intnum' },              //P10
                                { data: 'timeHoraFin' },         //P11
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let clave = item.clave;
                                        return `<input type="button" class="btn btn-primary btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                    }
                                },
                                { data: 'clave' },
                                { data: 'bitFlHT' },
                                { data: 'intIdInterval' },

                                //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                                { data: 'intidTipoServ' },  //P16 AÑADIDO 
                                { data: 'strDeTipServ' },   //p17 AÑADIDO 
                            ],
                            order: [10, 'asc'],
                            lengthMenu: [15],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas

                                {

                                    targets: [2],
                                    visible: false,

                                },
                                {

                                    targets: [3],
                                    visible: false,

                                },
                                {

                                    targets: [5],
                                    visible: false,

                                },
                                {

                                    targets: [6],
                                    visible: false,

                                },
                                {

                                    targets: [7],
                                    visible: false,

                                },
                                //{

                                //    targets: [8],
                                //    visible: false,

                                //},
                                {

                                    targets: [10],
                                    visible: false,

                                },
                                {

                                    targets: [11],
                                    visible: false,

                                },
                                {

                                    targets: [13],
                                    visible: false,

                                },
                                {

                                    targets: [14],
                                    visible: false,

                                },
                                {

                                    targets: [15, 16],//SE ESCONDEN ESTOS DOS CAMPOS(EVITAR A QUE SE VEAN) Aunque aun sean programables
                                    visible: false,

                                }

                            ],

                        });


                        $('.form-control input-sm').hide();


                    });

                //QUITAR UN INTERVALO - FORMULARIO EDITAR 
                $('#TablaIntervalso  tbody').on('click', 'tr input.btn-delete', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    let claves = $(this).attr("dataid")
                    var LimiteBucle = parseInt(detalleinterval.length);

                    if (!isNaN(claves)) {

                        for (var i = 0; i < parseInt(detalleinterval.length); i++) {

                            if (detalleinterval[i].clave == claves) {

                                u = detalleinterval[i].timeHoraIni;

                                detalleinterval.splice(i, 1);

                                if (detalleHoras[i].clave = claves) {


                                    detalleHoras.splice(i, 1);
                                    console.log(detalleinterval + '---->2');
                                    console.log(detalleHoras + '---->2');
                                    continue;
                                }


                            }

                        }


                        if (typeof _varTablaIntervalo !== 'undefined') {
                            _varTablaIntervalo.destroy();
                        }

                        //BOTON "EDITAR": Cargado de Intervalos Agregados a la Jornada
                        _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                            data: detalleinterval,
                            columns: [
                                { data: 'interva' },
                                { data: 'NomTipoInter' },
                                { data: 'intTurno' },
                                { data: 'intTipoInterval' },
                                { data: 'timeDuracion' },
                                { data: 'bitDiaSig' },
                                { data: 'timeHoraIni' },
                                { data: 'timeTiempoMaximo' },
                                { data: 'timeTolerancia' },
                                { data: 'strorden' },
                                { data: 'intnum' },
                                { data: 'timeHoraFin' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let clave = item.clave;
                                        return `<input type="button" class="btn btn-primary btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                    }
                                },
                                { data: 'clave' },
                                { data: 'bitFlHT' },
                                { data: 'intIdInterval' },

                                //AÑADIDO-002 (para el campo tipo de servicio) en Formulario 
                                { data: 'intidTipoServ' },  //AÑADIDO 
                                { data: 'strDeTipServ' },   //AÑADIDO 


                            ],
                            order: [10, 'asc'],
                            lengthMenu: [15],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas

                                {

                                    targets: [2],
                                    visible: false,

                                },
                                {

                                    targets: [3],
                                    visible: false,

                                },
                                {

                                    targets: [5],
                                    visible: false,

                                },
                                {

                                    targets: [6],
                                    visible: false,

                                },
                                {

                                    targets: [7],
                                    visible: false,

                                },
                                //{

                                //    targets: [8],
                                //    visible: false,

                                //},
                                {

                                    targets: [10],
                                    visible: false,

                                }, {

                                    targets: [11],
                                    visible: false,

                                },
                                {

                                    targets: [13],
                                    visible: false,

                                },
                                {

                                    targets: [14],
                                    visible: false,

                                },
                                {

                                    targets: [15, 16],
                                    visible: false,

                                }
                            ],

                        });

                    }


                });


                $('#tiempo_inic').on('change', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    $('#tiempo_dura').val('00:00');


                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {

                        $('#tiempo_dura').val('00:00');

                    } else if (_HoraFin == '00:00') {

                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni == 0 && HoraFin == 0 && MiniIni !== 0) {

                            var HoraDur = 0;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {

                                MinDur = 60 - MiniIni;

                            }



                            if (HoraDur < 10) {

                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }

                            } else if (HoraDur > 9) {

                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }
                            }


                        } else if (HoraIni !== 0) {




                            var HoraDur = 24 - HoraIni;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {

                                MinDur = 60 - MiniIni;

                            }



                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }

                            }
                        }



                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;
                                //var Ini = (HoraIni * 60) + MiniIni;
                                //var Fin = (HoraFin * 60) + MiniIni;

                                //var Result = Fin - Ini;
                                //var HoraDur = HoraFin - HoraIni;
                                //var MinDur = MiniFin - MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }

                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = ((24 - HoraIni) + HoraFin) - 1;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');

                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');

                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }

                });

                $('#tiempo_fin').on('change', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {

                        $('#tiempo_dura').val('00:00');

                    } if (_HoraIni == '00:00') {





                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MinFin = parseInt(_HoraFin.substring(5, 3));


                        var HoraDur = HoraFin;
                        var MinDur = MinFin;




                        if (HoraDur < 10) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                            }
                        } else if (HoraDur > 9) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                            }
                        }



                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;


                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }
                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');

                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');

                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }


                });

                $('#tiempo_tole').on('change', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    var _HoraTole = $('#tiempo_tole').val();
                    var _HoraDura = $('#tiempo_dura').val();
                    //alert(_HoraDura);
                    if (_HoraDura == '00:00') {

                        $('#tiempo_tole').val('00:00');
                        new PNotify({
                            title: 'Intervalo',
                            text: 'Ingrese ek Rango de Horas ',
                            type: 'info',
                            delay: 1000,
                            styling: 'bootstrap3'

                        });

                        return;
                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;
                                //var Ini = (HoraIni * 60) + MiniIni;
                                //var Fin = (HoraFin * 60) + MiniIni;

                                //var Result = Fin - Ini;
                                //var HoraDur = HoraFin - HoraIni;
                                //var MinDur = MiniFin - MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        } else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }


                });


                //=====================================================================================
                //========== BOTON AÑADIR INTERVALOS - FORMULARIO EDITAR - JORNADA DIARIA Boton "+"
                //=====================================================================================
                //domingo21: renombrar luego a "btn-agregar-intervalo-editar" tmb en el html
                $('#btn-save-changes-Intrevalos').on('click', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    var _TiEMPOiNTERV = $('#TipoInter option:selected').val();
                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _TipTutn = $('#TipoTurn option:selected').val();
                    var strorden = null;
                    var intnum = null;
                    var num1 = parseInt(_HoraIni);
                    var num2 = parseInt(_HoraFin);
                    var idasig = $('#chck_cambdia').is(':checked');


                    //Cuando se alcanzó los 15 intervalos permitidos
                    if (detalleinterval.length >= 15) {

                        new PNotify({
                            title: 'Intervalo',
                            text: 'Ya alcanzó los 15 intervalos permitidos para una Jornada.',
                            type: 'info',
                            delay: 2000,
                            styling: 'bootstrap3'

                        });

                        return;

                    }


                    if (idasig == false) {
                        if (num1 > num2) {
                            new PNotify({
                                title: 'Intervalo',
                                text: 'La hora Fin no puede ser menor a la Hora de inicio para una Jornada sin Cambio de Día.',
                                type: 'info',
                                delay: 1000,
                                styling: 'bootstrap3'

                            });
                            return;
                        } else {

                        }
                    }
                    if ($('#chck_pri').is(':checked')) {


                        var arr = jQuery.grep(detalleinterval, function (n, i) {
                            return (n.strorden == "Primero")
                        });

                        console.log(arr);

                        if (arr.length == 1) {


                            new PNotify({
                                title: 'Orden',
                                text: 'Ya Existe el Intervalo de Primer Orden',
                                type: 'info',
                                delay: 1000,
                                styling: 'bootstrap3'

                            });
                            return;
                        }
                        else {

                            strorden = 'Primero';
                            intnum = 1
                        }
                    }
                    else if ($('#chck_ult').is(':checked')) {
                        var arr = jQuery.grep(detalleinterval, function (n, i) {
                            return (n.strorden == "Ultimo")
                        });

                        console.log(arr);

                        if (arr.length == 1) {


                            new PNotify({
                                title: 'Orden',
                                text: 'Ya Existe el Intervalo de Ultimo Orden',
                                type: 'info',
                                delay: 1000,
                                styling: 'bootstrap3'

                            });
                            return;
                        } else {
                            strorden = 'Ultimo';

                            intnum = 999;
                        }
                    } else {
                        strorden = '';
                        intnum = detalleinterval.length + 1;
                    }




                    var _Tiptoler = $('#tiempo_tole').val();
                    var _Tipdur = $('#tiempo_dura').val();

                    var _chck_pri = $('#chck_pri').is(':checked');
                    var _chck_ult = $('#chck_ult').is(':checked');

                    var _consTrab = $('#consTrab').is(':checked');
                    var _chck_cambdia = $('#chck_cambdia').is(':checked');


                    //----------------------------------------------------------------------
                    //Añadido viernes19.02 HG_ln16954 para FORMULARIO EDITAR
                    var _strDesTipoServ;
                    var _intTipoServ = $('#TipoServC option:selected').val();  
                    if (_intTipoServ > 0) {
                        _strDesTipoServ = $('#TipoServC option:selected').text();
                    }

                    else {
                        _strDesTipoServ = 'No Aplica';
                    }

                    //_intTipoServ, _strDesTipoServ


                    if (_consTrab == 'true') {
                        _consTrab = true;
                    } else if (_consTrab == true) {
                        _consTrab = true;
                    }
                    var _tiempo_cons_max = $('#tiempo_cons_max').val();
                    var NOMTIP_INT = $('#TipoInter option:selected').text();  // var NOMTIP_INT = null;

                    var interva;

                    interva = _HoraIni + ' - ' + _HoraFin;

 
                    var d = new Date();
                    var n = d.getTime()

                    //$.post(
                    //    '/Asistencia/LlenarTipoUM',
                    //    { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'HOR' },
                    //    (response) => {

                            //response.forEach(element2 => {



                            //    if (_TiEMPOiNTERV == element2.intidTipo) {
                            //        NOMTIP_INT = element2.strDeTipo;


                                    //////FORMULARIO EDITAR
                                    ////class Intervalos {
                                    ////    constructor(interva, intTipoInterval, NomTipoInter, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, strorden, intnum, clave, intidTipoServ, strTipoServ) {

                                    ////        this.interva = interva                        //1               
                                    ////        this.intTipoInterval = intTipoInterval        //2
                                    ////        this.NomTipoInter = NomTipoInter              //3
                                    ////        this.timeHoraIni = timeHoraIni                //4s
                                    ////        this.timeHoraFin = timeHoraFin                //5
                                    ////        this.intTurno = intTurno                      //6
                                    ////        this.timeTolerancia = timeTolerancia          //7
                                    ////        this.timeDuracion = timeDuracion              //8
                                    ////        this.timeTiempoMaximo = timeTiempoMaximo      //9
                                    ////        this.bitFlHT = bitFlHT                        //10
                                    ////        this.bitDiaSig = bitDiaSig                    //11
                                    ////        this.strorden = strorden                      //12
                                    ////        this.intnum = intnum                          //13
                                    ////        this.clave = n                                //14

                                    ////        //AÑADIDO
                                    ////        this.intidTipoServ = intidTipoServ            //15
                                    ////        this.strTipoServ = strTipoServ                //16
                                    ////    }
                                    ////}



                                    class Horas {
                                        constructor(HoraInicial, MinIninicial, HoraFinal, MiniFinal, clave) {

                                            this.HoraInicial = HoraInicial
                                            this.MinIninicial = MinIninicial
                                            this.HoraFinal = HoraFinal
                                            this.MiniFinal = MiniFinal
                                            this.clave = n

                                        }
                                    }


                                    var _HoraIni = $('#tiempo_inic').val();
                                    var _HoraFin = $('#tiempo_fin').val();
                                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                                    var HoraIni = parseInt(_HoraIni.substring(0, 2));
                                    var MiniIni = parseInt(_HoraIni.substring(5, 3));
                                    var HoraFin = parseInt(_HoraFin.substring(0, 2));
                                    var MiniFin = parseInt(_HoraFin.substring(5, 3));

                                    detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n));

                                    //////console.log("Con repetidos es:", detalleHoras);
                                    //////let detalleHorase = detalleHoras.filter((valorActual, indiceActual, arreglo) => {
                                    //////    //Podríamos omitir el return y hacerlo en una línea, pero se vería menos legible
                                    //////    return arreglo.findIndex(valorDelArreglo => JSON.stringify(valorDelArreglo) === JSON.stringify(valorActual)) === indiceActual
                                    //////});
                                    //////console.log("Sin repetidos es:", detalleHorase);

                                    var Notify = 0; var xd = 1; var Valdes = 0;
                                    detalleHoras.filter(function (dato) {

                                        //if (_bitDiaSiq == false) {

                                        if (HoraIni == dato.HoraFinal && HoraFin == dato.HoraFinal) {

                                            if (MiniIni == dato.MiniFinal) {

                                                if (MiniFin > MiniIni) {

                                                } else if (MiniIni > MiniFin) {
                                                    Notify = 1;
                                                    Valdes = 2;


                                                    return;

                                                }
                                            } else if (MiniIni >= dato.MiniFinal) {
                                                if (MiniFin > MiniIni) {

                                                } else if (MiniIni > MiniFin) {
                                                    Notify = 1;
                                                    Valdes = 2;

                                                    return;

                                                }
                                            } else if (MiniIni > MiniFin) {
                                                Notify = 1;
                                                Valdes = 2;


                                                return;
                                            }

                                        }
                                        else if (HoraIni !== dato.HoraInicial || HoraFin !== dato.HoraFinal) {

                                            if (HoraIni < dato.HoraFinal && HoraFin > dato.HoraFinal) {
                                                //se Cruza con  Rango Posterior a nivel de horas
                                                Notify = 1;
                                                Valdes = 2;



                                            } else if (HoraIni < dato.HoraInicial && HoraFin > dato.HoraInicial) {
                                                //se Cruza con  Rango Contenido a nivel de horas
                                                Notify = 1;
                                                Valdes = 2;



                                            } else if (HoraIni > dato.HoraInicial && HoraFin < dato.HoraFinal) {
                                                //Se Cruza con  Rango Anterior a nivel de horas
                                                Notify = 1;
                                                Valdes = 2;



                                            } else if (HoraIni == dato.HoraFinal && HoraFin > dato.HoraFinal) {
                                                //Rango con igualdad en posterior

                                                if (MiniIni >= dato.MiniFinal) {

                                                } else if (MiniIni < dato.MiniFinal) {
                                                    Notify = 1;
                                                    Valdes = 2;



                                                }
                                            } else if (HoraFin == dato.HoraInicial && HoraIni < dato.HoraFinal) {
                                                //Rango con igualdad en posterior

                                                if (MiniFin <= dato.MinIninicial) {

                                                } else if (MiniFin > dato.MinIninicial) {
                                                    Notify = 1;
                                                    Valdes = 2;


                                                }
                                            }
                                            else if (HoraIni == dato.HoraInicial && HoraIni < dato.HoraFinal) {
                                                //Rango con igualdad en posterior
                                                Notify = 1;
                                                Valdes = 2;


                                            }

                                            else if (HoraFin == dato.HoraFinal && HoraIni > dato.HoraInicial) {
                                                //Rango con igualdad en posterior
                                                Notify = 1;
                                                Valdes = 2;


                                            }

                                        }
                                        else if (HoraIni == dato.HoraInicial && HoraFin == dato.HoraFinal) {

                                            if (detalleHoras.length == 1) {

                                            } else if (detalleHoras.length > 1) {

                                                Valdes = 3 + xd;
                                                xd++;
                                            }
                                        }
                                        else if (HoraIni == dato.HoraInicial && HoraIni == dato.HoraIni) {

                                            if (detalleHoras.length == 1) {

                                            } else if (detalleHoras.length > 1) {

                                                Valdes = 3 + xd;
                                                xd++;
                                            }
                                        }
                                        else if (HoraIni == dato.HoraFinal || HoraFin == dato.HoraInicial || HoraIni == dato.HoraFinal && HoraFin == dato.HoraInicial) {

                                            if (MiniIni >= dato.MiniFinal) {

                                            } else if (MiniIni < dato.MiniFinal) {
                                                Notify = 1;
                                                Valdes = 2;


                                                return;

                                            }
                                            else if (MiniFin <= dato.MinIninicial) {


                                            } else if (MiniFin > dato.MinIninicial) {
                                                Notify = 1;
                                                Valdes = 2;

                                                return;


                                            }
                                        }
                                        //} else if (_bitDiaSiq == true) {

                                        //    alert('Con dia siguiente');

                                        //}


                                    });

                                    if (Notify == 1) {
                                        new PNotify({
                                            title: 'Intervalo Agregado',
                                            text: 'Cruce de Intervalos',
                                            type: 'info',
                                            delay: 3000,
                                            styling: 'bootstrap3',
                                            addclass: 'dark'
                                        });


                                        var dex = (detalleHoras.length) - 1;
                                        detalleHoras.splice(dex, 1);

                                        return;

                                    }
                                    else if (Notify == 0 && Valdes == 2 || Notify == 0 && Valdes == 4 || Notify == 0 && Valdes == 0) {

                                      
                                        //AL ACCIONAR AÑADIR INTERVALO EN EL FORMULARIO EDITAR
                                        detalleinterval.push(new Intervalos(
                                            interva,
                                            parseInt(_TiEMPOiNTERV),
                                            NOMTIP_INT,
                                            _HoraIni,
                                            _HoraFin,
                                            parseInt(_TipTutn),
                                            _Tiptoler,
                                            _Tipdur,
                                            _tiempo_cons_max,
                                            _consTrab,
                                            _chck_cambdia,
                                            strorden,
                                            intnum,
                                            n,
                                            0,
                                            parseInt(_intTipoServ),
                                            _strDesTipoServ
                                        
                                            ));  

                                        //alert('PUSH a detalleinterval EDITAR'+' '+interva)

                                    }
                                    else if (Valdes > 4) {

                                        new PNotify({
                                            title: 'Nueva Intervalos',
                                            text: 'No se puede Repetir el Intervalo',
                                            type: 'info',
                                            delay: 3000,
                                            styling: 'bootstrap3',
                                            addclass: 'dark'
                                        });

                                        var dex = (detalleHoras.length) - 1;
                                        detalleHoras.splice(dex, 1);


                                        return;

                                    }


                                    console.log(detalleinterval);

                                //} FIN IF


                                var numeroArreglos = detalleinterval.length;

                                $('#CantArrInter').val(numeroArreglos);

                                if (strorden == 'Primero') {

                                    $('#end').val(5);
                                }
                                if (strorden == 'Ultimo') {

                                    $('#end2').val(5);
                                }

                            //}); FIN EACH ELEMENT RESPONSE


                            var numeroArreglos = detalleinterval.length;

                            $('#CantArrInter').val(numeroArreglos);


                            if (typeof _varTablaIntervalo !== 'undefined') {
                                _varTablaIntervalo.destroy();
                            }

                            //Agregar Intervalo - FORMULARIO EDITAR
                            _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                                data: detalleinterval,
                                columns: [
                                    { data: 'interva' },
                                    { data: 'NomTipoInter' },
                                    { data: 'intTurno' },
                                    { data: 'intTipoInterval' },
                                    { data: 'timeDuracion' },
                                    { data: 'bitDiaSig' },
                                    { data: 'timeHoraIni' },
                                    { data: 'timeTiempoMaximo' },
                                    { data: 'timeTolerancia' },
                                    { data: 'strorden' },
                                    { data: 'intnum' },
                                    { data: 'timeHoraFin' },
                                    {
                                        sortable: false,
                                        "render": (data, type, item, meta) => {

                                            let clave = item.clave;
                                            return `<input type="button" class="btn btn-primary btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                        }
                                    },
                                    { data: 'clave' },
                                    { data: 'bitFlHT' },
                                    { data: 'intIdInterval' },
                                    //AÑADIDO-003 (para el campo tipo de servicio) en Formulario 
                                    { data: 'intidTipoServ' }, //P16 AÑADIDO 
                                    { data: 'strDeTipServ' },  //P17 AÑADIDO 

                                ],
                                order: [10, 'asc'],
                                lengthMenu: [15],
                                sDom: '',
                                responsive: true,
                                language: {
                                    lengthMenu: '',
                                    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                    infoEmpty: 'No hay Items para mostrar',
                                    search: '',
                                    sSearchPlaceholder: '',
                                    zeroRecords: '',
                                    infoFiltered: '',
                                    paginate: {
                                        previous: 'Anterior',
                                        next: 'Siguiente'
                                    }
                                },
                                columnDefs: [//ocultar y definir columnas

                                    //{

                                    //    targets: [2],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [3],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [5],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [6],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [7],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [8],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [10],
                                    //    visible: false,

                                    //}, {

                                    //    targets: [11],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [13],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [14],
                                    //    visible: false,

                                    //},
                                    //{

                                    //    targets: [15],
                                    //    visible: false,

                                    //},

                                    {

                                        targets: [2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 16], //tambien estaba escondido e "8"
                                        visible: false,

                                    },
                                ],

                            });


                        //});// FIN

                    //FIN POST

                    $('.form-control input-sm').hide();

                });


                //QUITAR UN INTERVALO - FORMULARIO EDITAR
                $('#TablaIntervalso  tbody').on('click', 'tr input.btn-delete', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    let claves = $(this).attr("dataid")
                    var LimiteBucle = parseInt(detalleinterval.length);

                    if (!isNaN(claves)) {

                        for (var i = 0; i < parseInt(detalleinterval.length); i++) {

                            if (detalleinterval[i].clave == claves) {

                                u = detalleinterval[i].timeHoraIni;

                                detalleinterval.splice(i, 1);

                                if (detalleHoras[i].clave = claves) {


                                    detalleHoras.splice(i, 1);
                                    console.log(detalleinterval + '---->2');
                                    console.log(detalleHoras + '---->2');
                                    continue;
                                }


                            }

                        }


                        if (typeof _varTablaIntervalo !== 'undefined') {
                            _varTablaIntervalo.destroy();
                        }

                        //Quitar un Intervalo Agregado - FORMULARIO NUEVO
                        _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                            data: detalleinterval,
                            columns: [
                                { data: 'interva' },                   //interva          
                                { data: 'NomTipoInter' },              //NomTipoInter
                                { data: 'intTurno' },                  //intTurno
                                { data: 'intTipoInterval' },           //intTipoInterval
                                { data: 'timeDuracion' },              //timeDuracion
                                { data: 'bitDiaSig' },                 //bitDiaSig
                                { data: 'timeHoraIni' },               //timeHoraIni
                                { data: 'timeTiempoMaximo' },          //timeTiempoMaximo
                                { data: 'timeTolerancia' },            //timeTolerancia
                                { data: 'strorden' },                  //strorden
                                { data: 'intnum' },                    //intnum
                                { data: 'timeHoraFin' },               //timeHoraFin
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let clave = item.clave;
                                        return `<input type="button" class="btn btn-primary btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                    }
                                },
                                { data: 'clave' },
                                { data: 'bitFlHT' },
                                { data: 'intIdInterval' },

                                //AÑADIDO-004 (para el campo tipo de servicio) en Formulario 
                                { data: 'intidTipoServ' },  //AÑADIDO 
                                { data: 'strDeTipServ' },   //AÑADIDO 

                            ],
                            order: [10, 'asc'],
                            lengthMenu: [15],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas  //Ocultar 12 columnas: [2,3,5,6,7,8,10,11,13,14,15,16] 

                                {

                                    targets: [2],
                                    visible: false,

                                },
                                {

                                    targets: [3],
                                    visible: false,

                                },
                                {

                                    targets: [5],
                                    visible: false,

                                },
                                {

                                    targets: [6],
                                    visible: false,

                                },
                                {

                                    targets: [7],
                                    visible: false,

                                },
                                //{

                                //    targets: [8],
                                //    visible: false,

                                //},
                                {

                                    targets: [10],
                                    visible: false,

                                }, {

                                    targets: [11],
                                    visible: false,

                                },
                                {

                                    targets: [13],
                                    visible: false,

                                },
                                {

                                    targets: [14],
                                    visible: false,

                                },
                                {

                                    targets: [15, 16],
                                    visible: false,

                                }
                            ],

                        });



                    }



                });


                function EliminarIntervalos(data) {
                    validarSession();//AÑADIDO HG 22.04.2021
                    var u = 0;

                    for (var i = 0; i < detalleinterval.length; i++) {

                        if (u == 0) {

                            if (detalleinterval[i].clave == data * 1) {


                                u = detalleinterval[i].timeHoraIni;


                                detalleinterval.splice(i, 1);


                                detalleHoras.splice(i, 1);

                                continue;

                            }


                        } else if (u !== 0) {


                            u++;


                            return false;

                            //break;hg_comentado


                        }


                    }

                }

                $('#btn-clear-Intrevalos').on('click', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    if (detalleinterval.length == 0) {

                    } else if (detalleinterval.length > 0) {

                        swal({
                            title: "Eliminar intervalos ",
                            text: "¿Está seguro de eliminar Todos los Intervalos'?",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonText: "Sí, eliminar",
                            cancelButtonText: "No, cancelar",
                        }).then(function (isConfirm) {
                            if (isConfirm) {

                                detalleinterval.length = 0;
                                detalleHoras.length = 0;

                                if (typeof _varTablaIntervalo !== 'undefined') {
                                    _varTablaIntervalo.destroy();
                                }

                                //AÑADIDO 05
                                _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                                    data: detalleinterval,
                                    columns: [
                                        { data: 'interva' },
                                        { data: 'NomTipoInter' },
                                        { data: 'intTurno' },
                                        { data: 'intTipoInterval' },
                                        { data: 'timeDuracion' },
                                        { data: 'bitDiaSig' },
                                        { data: 'timeHoraIni' },
                                        { data: 'timeTiempoMaximo' },
                                        { data: 'timeTolerancia' },   //P09
                                        { data: 'strorden' },
                                        { data: 'intnum' },
                                        { data: 'timeHoraFin' },
                                        {
                                            sortable: false,
                                            "render": (data, type, item, meta) => {

                                                let clave = item.clave;
                                                return `<input type="button" class="btn btn-primary btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                            }
                                        },
                                        { data: 'clave' },
                                        { data: 'bitFlHT' },
                                        { data: 'intIdInterval' },

                                        //AÑADIDO-005 (para el campo tipo de servicio) en Formulario 
                                        { data: 'intidTipoServ' },  //P16 AÑADIDO 
                                        { data: 'strDeTipServ' },   //P17 AÑADIDO 


                                    ],
                                    order: [10, 'asc'],
                                    lengthMenu: [15],
                                    sDom: '',
                                    responsive: true,
                                    language: {
                                        lengthMenu: '',
                                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                        infoEmpty: 'No hay Items para mostrar',
                                        search: '',
                                        sSearchPlaceholder: '',
                                        zeroRecords: '',
                                        infoFiltered: '',
                                        paginate: {
                                            previous: 'Anterior',
                                            next: 'Siguiente'
                                        }
                                    },
                                    columnDefs: [//ocultar y definir columnas

                                        {

                                            targets: [2],
                                            visible: false,

                                        },
                                        {

                                            targets: [3],
                                            visible: false,

                                        },
                                        {

                                            targets: [5],
                                            visible: false,

                                        },
                                        {

                                            targets: [6],
                                            visible: false,

                                        },
                                        {

                                            targets: [7],
                                            visible: false,

                                        },
                                        //{

                                        //    targets: [8],
                                        //    visible: false,

                                        //},
                                        {

                                            targets: [10],
                                            visible: false,

                                        }, {

                                            targets: [11],
                                            visible: false,

                                        },
                                        {

                                            targets: [13],
                                            visible: false,

                                        },
                                        {

                                            targets: [14],
                                            visible: false,

                                        },
                                        {

                                            targets: [15, 16],
                                            visible: false,

                                        }
                                    ],

                                });

                                return;
                            } else {
                                swal("Cancelado", "La Operación fue cancelada", "error");
                            }
                        });

                    }
                });

                //$(document).ready(function () {
                //    $('.collapse-link').on('click', function () {
                //        var $BOX_PANEL = $(this).closest('.x_panel'),
                //            $ICON = $(this).find('i'),
                //            $BOX_CONTENT = $BOX_PANEL.find('#oculto');
                //        // fix for some div with hardcoded fix class
                //        if ($BOX_PANEL.attr('style')) {
                //            $BOX_CONTENT.slideToggle(200, function () {
                //                $BOX_PANEL.removeAttr('style');
                //            });
                //        } else {
                //            $BOX_CONTENT.slideToggle(200);
                //            $BOX_PANEL.css('height', 'auto');
                //        }
                //        $ICON.toggleClass('fa-chevron-up fa-chevron-down');
                //    });
                //});
                //var CURRENT_URL = window.location.href.split('#')[0].split('?')[0],
                //    $BODY = $('body'),
                //    $MENU_TOGGLE = $('#menu_toggle'),
                //    $SIDEBAR_MENU = $('#sidebar-menu'),
                //    $SIDEBAR_FOOTER = $('.sidebar-footer'),
                //    $LEFT_COL = $('.left_col'),
                //    $RIGHT_COL = $('.right_col'),
                //    $NAV_MENU = $('.nav_menu'),
                //    $FOOTER = $('footer');

            }
        });

    //$(".range_min_max").ionRangeSlider({
    //    type: "double",
    //    min: 0,
    //    max: +24,
    //    from: -24,
    //    step: 1,
    //    to: +24,
    //    max_interval: 48
    //});

    function init_ColorPicker() {

        if (typeof ($.fn.colorpicker) === 'undefined') { return; }

        $('.demo1').colorpicker();
        $('.demo2').colorpicker();

        $('#demo_forceformat').colorpicker({
            format: 'rgba',
            horizontal: true
        });

        $('#demo_forceformat3').colorpicker({
            format: 'rgba',
        });

        $('.demo-auto').colorpicker();




    }
}


//COMBOS JORNADA DIARIA
var _varTablaIntervalo;
function CombosJornadaDiaria() {

    //Combo Tipo Jornada
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'JORN', strSubGrupo: 'TIPO' },
        (response) => {
            $('#filtojer1').empty();
            $('#TipoJor').empty();
            response.forEach(element => {
                $('#filtojer1').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                $('#TipoJor').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });

    //ComboRefrigerio
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'REF' },
        (response) => {
            $('#cboRef').empty();
            response.forEach(element => {
                $('#cboRef').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });

    //ComboJerarquia
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: '' },
        (response) => {
            $('#cboJerar').empty();
            $('#cboJerar').append('<option value="0">Seleccione</option>');

            response.forEach(element => {
                $('#cboJerar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });


    //Combo Tipo De Servicio - Jornada Diaria
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR_FILTRO', strSubGrupo: 'TIPOSERV' }, // HG 13.03.21 
        (response) => {
            $('#filtrojer2').empty();
            $('#filtrojer2').append('<option value="2">Todos</option>');
            response.forEach(element => {
                $('#filtrojer2').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });
    //Combo Tipo De Servicio - Nuevo/Editar Jornada Diaria ()
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR_JORNADA', strSubGrupo: 'TIPOSERV' }, // HG 13.03.21 
        (response) => {
            $('#TipoServC').empty();
            $('#TipoServC').append('<option value="0">Seleccione</option>');
            response.forEach(element => {
                $('#TipoServC').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

    //Combos Intervalo
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'HOR' },
        (response) => {
            $('#TipoInter').empty();
            response.forEach(element => {
                $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });

            if ($('#TipoInter').val() == 41 || $('#TipoInter').val() == 46) {

                //$('#TipoInter').val('41');
                $('#TipoServC').show();
                $('#TipServCom').show();

               //alert('Mostrar combo Tipo de Servicio (*)');
            } else {
                $('#TipoServC').hide();
                $('#TipServCom').hide();
            }

  
        });

    //Combo Turno
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'TURN' },
        (response) => {
            $('#TipoTurn').empty();
            response.forEach(element => {
                $('#TipoTurn').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });


    //Combo UnidadOrganizacional
    $('#cboJerar').on('change', function () {

        var IntidJerar = $('#cboJerar option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: '' },
            (response) => {
                $('#cboUndOrg').empty();
                $('#cboUndOrg').attr('disabled', false);

                response.forEach(element => {
                    $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            });
    });

    //--AÑADIDO DE SISFOOD HG.16.02.21
    //Combos Tipo de Servicio  x   Tipo de Intervalo (*)
    $('#TipoInter').on('change', function () {

        //var _TipoInterxJorn = $('#TipoInter').val();

        //if ($('#TipoInter').val() == 41 || $('#TipoInter').val() == 0) {
        //    $('#TipoServC').hide();
        //    $('#TipServCom').hide();
        //    //$('#TipoInter').val('0');
        //    //alert('Esconder combo Tipo de Servicio (*)');
        //}
        $('#TipServCom').show();
        //else 
        if ($('#TipoInter').val() == 41 || $('#TipoInter').val() == 46) {

            //$('#TipoInter').val('41');
            $('#TipoServC').show();
            $('#TipServCom').show();

            //alert('Mostrar combo Tipo de Servicio (*)');
        } else {
            $('#TipoServC').hide();
            $('#TipoServC').val(0);
            $('#TipServCom').hide();
        }

    });

    //Combo Tipo Intervalo #2 -añadido 24.02.2021
    $('#cboRef').on('change', function () {

        var IntidCombo = $('#cboRef option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGTIPO', intIdFiltroGrupo: IntidCombo, strGrupo: 'CAL', strSubGrupo: 'HOR' },
            (response) => {
                $('#TipoInter').empty();
                //$('#TipoInter').attr('disabled', false);

                $('#TipServCom').hide();
                $('#TipoServC').val(0);
                $('#consi_max').hide();
                $('#cons_trab').hide();
                $('#checks_pri_ult').show();
                $('#TipoServC').val(0);
                $('#tiempo_cons_max').val('00:00');
                $('#TipoTurn').val(42);
                $('#chck_pri').iCheck('uncheck');
                $('#chck_ult').iCheck('uncheck');

                response.forEach(element => {

                    //$('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                    $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            });


        //if (IntidCombo == 36) {//SIN REFRIGERIO
        //    //$('#TipServCom').hide();
        //    //$('#consi_max').hide();
        //    //$('#cons_trab').hide();
        //}


    });
}


//===============================================================================================
//================================= BOTON NUEVO JORNADA DIARIA ================================== boton nuevo jornada diaria
//===============================================================================================
var u = 0;
$('#btn-new-JornadaDiaria').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    $('.form-hide-JornadaDiaria').show();
    $('#cpicker').colorpicker();
    $('#btn-update-JornadaDiaria').hide();
    $('#btn-save-change-JornadaDiaria').show();


    $.post(
        '/Asistencia/NuevoJornadaDiaria',
        {},
        (response) => {
            if (response !== '') {

                $('.form-hide-JornadaDiaria .x_content').empty();
                $('.form-hide-JornadaDiaria .x_content').html(response);
                $('.form-hide-JornadaDiaria').show();
                switcheryLoad();
                init_checkBox_styles();
                init_ColorPicker();

                //Inicio de código para solucionar observación de menús deplegables  HG 17.03.2021 
                //La ejecución de la siguiente función en este punto genera  
                //el error de los menús desplegables del panel lateral izquierdo

                //init_sidebar();   //HG 17.03.21
                
                //Fin de código para solucionar observación de menús deplegables  HG 17.03.2021 


                CamposAdicionalesJornada();
                CombosJornadaDiaria();
                var detalleinterval = new Array();
                var detalleHoras = new Array();
                $('#chck_cambdia').on('ifChanged', function () {

                    if ($('#chck_cambdia').is(':checked') == true) {

                        $('#Pertenece_Jor').show();
                        $('#chck_perteneceJor').attr('disabled', false);
                    }
                    if ($('#chck_cambdia').is(':checked') == false) {
                        $('#chck_perteneceJor').iCheck('uncheck');
                        $('#Pertenece_Jor').hide();
                        $('#chck_perteneceJor').attr('disabled', true);
                    }
                });


                if ($('#TipoInter').val() == 2) {
                    $('#cons_trab').hide();
                    $('#consi_max').hide();
                    $('#checks_pri_ult').show();
                    $('#chck_pri').iCheck('uncheck');
                    $('#chck_ult').iCheck('uncheck');
                    $('#consTrab').iCheck('uncheck');
                    $('#tiempo_cons_max').empty();
                }

                $('#TipoInter').on('change', function () {
                    $('#TipoServC').val(0);
                    if ($('#TipoInter').val() == 39) {
                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == 40) {
                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == 41) {
                        $('#cons_trab').show();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == 45) {
                        $('#cons_trab').hide();
                        $('#consi_max').show();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == 46) {
                        $('#consi_max').show();
                        $('#cons_trab').show();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    }
                });
                $('#tiempo_dura').attr('disabled', true);
                $('#btn-limpiar-Intrevalos').on('click', function () {
                    $('#TipoInter').val(39);
                    $('#TipoTurn').val(42);
                    $('#tiempo_inic').val('00:00');
                    $('#tiempo_fin').val('00:00');
                    $('#tiempo_tole').val('00:00');
                    $('#tiempo_dura').val('00:00');
                    $('#tiempo_cons_max').val('00:00');
                    $('#cons_trab').hide();
                    $('#consi_max').hide();
                    $('#checks_pri_ult').hide();

                    //HG 04.03.21
                    $('#TipServCom').hide();
                    $('#TipoServC').val(0);           


                    if ($('#TipoInter').val() == 39) {

                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();

                    }
                });
                $('#chck_pri').on('ifChanged', function () {

                    if ($('#chck_pri').is(':checked') == true) {
                        $('#chck_ult').iCheck('uncheck');
                    } else if ($('#chck_pri').is(':checked') == false) {
                        $('#chck_pri').iCheck('uncheck');
                    }
                });
                $('#chck_ult').on('ifChanged', function () {

                    if ($('#chck_ult').is(':checked') == true) {
                        $('#chck_pri').iCheck('uncheck');
                    } else if ($('#chck_ult').is(':checked') == false) {
                        $('#chck_ult').iCheck('uncheck');
                    }
                });
                $('#chck_cambdia').on('ifChanged', function () {



                    $('#tiempo_dura').val('00:00');


                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {

                        $('#tiempo_dura').val('00:00');

                    } else if (_HoraFin == '00:00') {

                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni == 0 && HoraFin == 0 && MiniIni !== 0) {

                            var HoraDur = 0;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {
                                MinDur = 60 - MiniIni;
                            }

                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }
                            }
                        } else if (HoraIni !== 0) {
                            var HoraDur = 24 - HoraIni;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {
                                MinDur = 60 - MiniIni;
                            }


                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }
                            }
                        }



                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;
                                //var Ini = (HoraIni * 60) + MiniIni;
                                //var Fin = (HoraFin * 60) + MiniIni;

                                //var Result = Fin - Ini;
                                //var HoraDur = HoraFin - HoraIni;
                                //var MinDur = MiniFin - MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }

                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }
                                } else if (MiniIni > MiniFin) {
                                    var HoraDur = ((24 - HoraIni) + HoraFin) - 1;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }
                                }
                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }


                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {

                        $('#tiempo_dura').val('00:00');

                    } if (_HoraIni == '00:00') {





                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MinFin = parseInt(_HoraFin.substring(5, 3));


                        var HoraDur = HoraFin;
                        var MinDur = MinFin;




                        if (HoraDur < 10) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                            }
                        } else if (HoraDur > 9) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                            }
                        }



                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;


                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }
                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');

                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');

                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }


                });
                $('#tiempo_inic').on('change', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    $('#tiempo_dura').val('00:00');


                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {

                        $('#tiempo_dura').val('00:00');

                    } else if (_HoraFin == '00:00') {

                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni == 0 && HoraFin == 0 && MiniIni !== 0) {

                            var HoraDur = 0;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {

                                MinDur = 60 - MiniIni;

                            }



                            if (HoraDur < 10) {

                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }

                            } else if (HoraDur > 9) {

                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }
                            }


                        } else if (HoraIni !== 0) {




                            var HoraDur = 24 - HoraIni;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {

                                MinDur = 60 - MiniIni;

                            }



                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }

                            }
                        }



                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }

                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = ((24 - HoraIni) + HoraFin) - 1;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');

                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');

                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }

                });
                $('#tiempo_fin').on('change', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {

                        $('#tiempo_dura').val('00:00');

                    } if (_HoraIni == '00:00') {





                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MinFin = parseInt(_HoraFin.substring(5, 3));


                        var HoraDur = HoraFin;
                        var MinDur = MinFin;




                        if (HoraDur < 10) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                            }
                        } else if (HoraDur > 9) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                            }
                        }



                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;


                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }
                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');

                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');

                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }


                });
                $('#tiempo_tole').on('change', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    var _HoraTole = $('#tiempo_tole').val();
                    var _HoraDura = $('#tiempo_dura').val();

                    if (_HoraDura == '00:00') {

                        $('#tiempo_tole').val('00:00');
                        new PNotify({
                            title: 'Intervalo',
                            text: 'Ingrese el Rango de Horas',
                            type: 'info',
                            delay: 1000,
                            styling: 'bootstrap3'

                        });

                        return;
                    } else {
                        var HoraDur = parseInt(_HoraDura.substring(0, 2));
                        var MiniDur = parseInt(_HoraDura.substring(5, 3));
                        var HoraTole = parseInt(_HoraTole.substring(0, 2));
                        var MiniTole = parseInt(_HoraTole.substring(5, 3));

                        if (HoraDur == HoraTole) {

                            if (MiniDur == MiniTole) {

                            } else if (MiniTole > MiniDur) {
                                $('#tiempo_tole').val('00:00');
                                new PNotify({
                                    title: 'Intervalo',
                                    text: 'El tiempo de Tolerancia no puede ser mayor a la Duracion.',
                                    type: 'info',
                                    delay: 1000,
                                    styling: 'bootstrap3'

                                });

                                return;
                            }
                        } else if (HoraDur > HoraTole) {

                        } else if (HoraDur < HoraTole) {

                            $('#tiempo_tole').val('00:00');
                            new PNotify({
                                title: 'Intervalo',
                                text: 'El tiempo de Tolerancia no puede ser mayor a la Duracion.',
                                type: 'info',
                                delay: 1000,
                                styling: 'bootstrap3'

                            });

                            return;
                        }
                    }


                });



                //=======================================================================
                //========== BOTON AÑADIR INTERVALOS - FORMULARIO NUEVO - JORNADA DIARIA
                //=======================================================================
                $('#btn-save-changes-Intrevalos').on('click', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    var _TiEMPOiNTERV = $('#TipoInter option:selected').val(); //1
                    var _HoraIni = $('#tiempo_inic').val();                    //2
                    var _HoraFin = $('#tiempo_fin').val();                     //3
                    var _TipTutn = $('#TipoTurn option:selected').val();       //4
                    var strorden = null;                                       //5
                    var intnum = null;                                         //6
                    var num1 = parseInt(_HoraIni);                             //7
                    var num2 = parseInt(_HoraFin);                             //8
                    


                   //Cuando se alcanzó los 15 intervalos permitidos
                   if (detalleinterval.length >= 15) {

                        new PNotify({
                            title: 'Intervalo',
                            text: 'Ya alcanzó los 15 intervalos permitidos para una Jornada.',
                            type: 'info',
                            delay: 2000,
                            styling: 'bootstrap3'

                        });

                        return;

                   }


                   //03 ELSE IF   Añadido martes16
                   if ($('#TipoInter').val() == 41 || $('#TipoInter').val() == 46) {

                       if ($('#TipoServC').val() == 0) {
                           //alert('Falta Seleccionar un Tipo de Servicio');
                           new PNotify({
                               title: 'Jornada Diaria',
                               text: 'Tiene que seleccionar un Tipo de Servicio',
                               type: 'info',
                               delay: 1000,
                               styling: 'bootstrap3'

                           });

                           $("#TipServCom").effect("highlight", { color: '#b8c5d275' }, 2500);
                           return;
                       }
                   }



                    var idasig = $('#chck_cambdia').is(':checked');            //9
                    //01 IF
                    if (idasig == false) {
                        if (num1 > num2) {
                            new PNotify({
                                title: 'Intervalo',
                                text: 'La hora Fin no puede ser menor a la Hora de inicio para una Jornada sin Cambio de Día.',
                                type: 'info',
                                delay: 1000,
                                styling: 'bootstrap3'

                            });
                            return;
                        } else {

                        }
                    }


                    //02 IF
                    if ($('#chck_pri').is(':checked')) {


                        var arr = jQuery.grep(detalleinterval, function (n, i) {
                            return (n.strorden == "Primero")
                        });

                        console.log(arr);

                        if (arr.length == 1) {


                            new PNotify({
                                title: 'Orden',
                                text: 'Ya Existe el Intervalo de Primer Orden',
                                type: 'info',
                                delay: 1000,
                                styling: 'bootstrap3'

                            });
                            return;
                        }
                        else {

                            strorden = 'Primero';
                            intnum = 1
                        }
                    }



                    //04 ELSE IF
                    else if ($('#chck_ult').is(':checked')) { //


                        var arr = jQuery.grep(detalleinterval, function (n, i) {

                            return (n.strorden == "Ultimo")

                        });

                        console.log(arr);

                        if (arr.length == 1) {


                            new PNotify({
                                title: 'Orden',
                                text: 'Ya Existe el Intervalo de Ultimo Orden',
                                type: 'info',
                                delay: 1000,
                                styling: 'bootstrap3'

                            });
                            return;
                        } else {
                            strorden = 'Ultimo';

                            intnum = 999;
                        }
                    }


                   
                    //05 ELSE
                    else {

                        if (detalleinterval.length == 0) {

                            strorden = '';
                            intnum = detalleinterval.length + 2;

                        }
                        else if (detalleinterval.length !== 0) { //
                            strorden = '';
                            intnum = detalleinterval.length + 1;
                        }


                    }

                    //06 VARIABLES
                    var _Tiptoler = $('#tiempo_tole').val();                //1
                    var _Tipdur = $('#tiempo_dura').val();                  //2
                    var _chck_pri = $('#chck_pri').is(':checked');          //3
                    var _chck_ult = $('#chck_ult').is(':checked');          //4
                    var _consTrab = $('#consTrab').is(':checked');          //5
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');     //6

                    //Añadido marte16.02 HG
                    var _strTipoServ;
                    var _TipoServ = $('#TipoServC option:selected').val();  
                    if (_TipoServ > 0) {
                        _strTipoServ = $('#TipoServC option:selected').text();
                    }

                    else {
                         _strTipoServ = 'No Aplica';
                    }


                    if (_consTrab == 'true') {
                        _consTrab = true;
                    }
                    else if (_consTrab == true) {
                        _consTrab = true;
                    }
                    var _tiempo_cons_max = $('#tiempo_cons_max').val();
                    var NOMTIP_INT = $('#TipoInter option:selected').text();   
                    var interva;//el intervalo de horas---ok
                    interva = _HoraIni + ' - ' + _HoraFin;//el intervalo de horas---ok

                    var d = new Date();
                    var n = d.getTime();



                    //POST 02: Ya existente 
                    //$.post(
                    //    '/Asistencia/LlenarTipoUM',
                    //    { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'HOR' },
                    //    (response) =>
                    //    {

                    //response.forEach(element2 =>
                    //{

                    //if (_TiEMPOiNTERV == element2.intidTipo)
                    //{ //_TiEMPOiNTERV =39
                    //                NOMTIP_INT = element2.strDeTipo;       //NOMTIP_INT= "ordinario"

                                    //FORMULARIO NUEVO
                                    class Intervalos {
                                        constructor(interva, intTipoInterval, NomTipoInter, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, strorden, intnum, clave, intidTipoServ, strTipoServ) {

                                            this.interva = interva                        //1               
                                            this.intTipoInterval = intTipoInterval        //2
                                            this.NomTipoInter = NomTipoInter              //3
                                            this.timeHoraIni = timeHoraIni                //4
                                            this.timeHoraFin = timeHoraFin                //5
                                            this.intTurno = intTurno                      //6
                                            this.timeTolerancia = timeTolerancia          //7
                                            this.timeDuracion = timeDuracion              //8
                                            this.timeTiempoMaximo = timeTiempoMaximo      //9
                                            this.bitFlHT = bitFlHT                        //10
                                            this.bitDiaSig = bitDiaSig                    //11
                                            this.strorden = strorden                      //12
                                            this.intnum = intnum                          //13
                                            this.clave = n                                //14

                                            //AÑADIDO 
                                            this.intidTipoServ = intidTipoServ
                                            this.strTipoServ = strTipoServ
                                        }
                                    }

                                    //CLASE 02
                                    class Horas {
                                        constructor(HoraInicial, MinIninicial, HoraFinal, MiniFinal, clave) {

                                            this.HoraInicial = HoraInicial
                                            this.MinIninicial = MinIninicial
                                            this.HoraFinal = HoraFinal
                                            this.MiniFinal = MiniFinal
                                            this.clave = n

                                        }
                                    }

                                    //VARIABLES 01
                                    var _HoraIni = $('#tiempo_inic').val();
                                    var _HoraFin = $('#tiempo_fin').val();
                                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                                    //VARIABLES 02
                                    var HoraIni = parseInt(_HoraIni.substring(0, 2));
                                    var MiniIni = parseInt(_HoraIni.substring(5, 3));
                                    var HoraFin = parseInt(_HoraFin.substring(0, 2));
                                    var MiniFin = parseInt(_HoraFin.substring(5, 3));


                                    detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n));


                                    console.log("Con repetidos es:", detalleHoras);
                                    let detalleHorase = detalleHoras.filter((valorActual, indiceActual, arreglo) => {
                                        //Podríamos omitir el return y hacerlo en una línea, pero se vería menos legible
                                        return arreglo.findIndex(valorDelArreglo => JSON.stringify(valorDelArreglo) === JSON.stringify(valorActual)) === indiceActual
                                    });
                                    console.log("Sin repetidos es:", detalleHorase);

                                    var Notify = 0; var xd = 1; var Valdes = 0;

                                    detalleHoras.filter(function (dato) {

                                        if (HoraIni == dato.HoraFinal && HoraFin == dato.HoraFinal) {

                                            if (MiniIni == dato.MiniFinal) {

                                                if (MiniFin > MiniIni) {

                                                } else if (MiniIni > MiniFin) {
                                                    Notify = 1;
                                                    Valdes = 2;


                                                    return;

                                                }
                                            } else if (MiniIni >= dato.MiniFinal) {
                                                if (MiniFin > MiniIni) {

                                                } else if (MiniIni > MiniFin) {
                                                    Notify = 1;
                                                    Valdes = 2;

                                                    return;

                                                }
                                            } else if (MiniIni > MiniFin) {
                                                Notify = 1;
                                                Valdes = 2;


                                                return;
                                            }

                                        }
                                        else if (HoraIni !== dato.HoraInicial || HoraFin !== dato.HoraFinal) {

                                            if (HoraIni < dato.HoraFinal && HoraFin > dato.HoraFinal) {
                                                //se Cruza con  Rango Posterior a nivel de horas
                                                Notify = 1;
                                                Valdes = 2;



                                            } else if (HoraIni < dato.HoraInicial && HoraFin > dato.HoraInicial) {
                                                //se Cruza con  Rango Contenido a nivel de horas
                                                Notify = 1;
                                                Valdes = 2;



                                            } else if (HoraIni > dato.HoraInicial && HoraFin < dato.HoraFinal) {
                                                //Se Cruza con  Rango Anterior a nivel de horas
                                                Notify = 1;
                                                Valdes = 2;



                                            } else if (HoraIni == dato.HoraFinal && HoraFin > dato.HoraFinal) {
                                                //Rango con igualdad en posterior

                                                if (MiniIni >= dato.MiniFinal) {

                                                } else if (MiniIni < dato.MiniFinal) {
                                                    Notify = 1;
                                                    Valdes = 2;



                                                }
                                            } else if (HoraFin == dato.HoraInicial && HoraIni < dato.HoraFinal) {
                                                //Rango con igualdad en posterior

                                                if (MiniFin <= dato.MinIninicial) {

                                                } else if (MiniFin > dato.MinIninicial) {
                                                    Notify = 1;
                                                    Valdes = 2;


                                                }
                                            }
                                            else if (HoraIni == dato.HoraInicial && HoraIni < dato.HoraFinal) {
                                                //Rango con igualdad en posterior
                                                Notify = 1;
                                                Valdes = 2;


                                            }

                                            else if (HoraFin == dato.HoraFinal && HoraIni > dato.HoraInicial) {
                                                //Rango con igualdad en posterior
                                                Notify = 1;
                                                Valdes = 2;


                                            }

                                        }
                                        else if (HoraIni == dato.HoraInicial && HoraFin == dato.HoraFinal) {

                                            if (detalleHoras.length == 1) {

                                            } else if (detalleHoras.length > 1) {

                                                Valdes = 3 + xd;
                                                xd++;
                                            }
                                        }
                                        else if (HoraIni == dato.HoraInicial && HoraIni == dato.HoraIni) {

                                            if (detalleHoras.length == 1) {

                                            } else if (detalleHoras.length > 1) {

                                                Valdes = 3 + xd;
                                                xd++;
                                            }
                                        }
                                        else if (HoraIni == dato.HoraFinal || HoraFin == dato.HoraInicial || HoraIni == dato.HoraFinal && HoraFin == dato.HoraInicial) {

                                            if (MiniIni >= dato.MiniFinal) {

                                            } else if (MiniIni < dato.MiniFinal) {
                                                Notify = 1;
                                                Valdes = 2;


                                                return;

                                            }
                                            else if (MiniFin <= dato.MinIninicial) {


                                            } else if (MiniFin > dato.MinIninicial) {
                                                Notify = 1;
                                                Valdes = 2;

                                                return;


                                            }
                                        }

                                    });



                                    if (HoraIni == HoraFin) {
                                        if (MiniIni == MiniFin) {
                                            Notify = 6;
                                        }
                                    }

                                    if (Notify == 1) {
                                        new PNotify({
                                            title: 'Nuevo Intervalo',
                                            text: 'Cruce de Intervalos',
                                            type: 'info',
                                            delay: 3000,
                                            styling: 'bootstrap3',
                                            addclass: 'dark'
                                        });





                                        var dex = (detalleHoras.length) - 1;
                                        detalleHoras.splice(dex, 1);



                                        return;

                                    } else if (Notify == 6) {
                                        new PNotify({
                                            title: 'Nuevo Intervalo',
                                            text: 'La hora Inicial y la hora Final no pueden ser la misma',
                                            type: 'info',
                                            delay: 3000,
                                            styling: 'bootstrap3',
                                            addclass: 'dark'
                                        });
                                        var de = (detalleHoras.length) - 1;
                                        detalleHoras.splice(de, 1);
                                        return;

                                    }
                                    else if (Notify == 0 && Valdes == 2 || Notify == 0 && Valdes == 4 || Notify == 0 && Valdes == 0) {

                                        //PUSH 14 elementos
                                        detalleinterval.push(new Intervalos(interva, _TiEMPOiNTERV, NOMTIP_INT, _HoraIni, _HoraFin, _TipTutn, _Tiptoler, _Tipdur, _tiempo_cons_max, _consTrab, _bitDiaSiq, strorden, intnum, n, _TipoServ, _strTipoServ));


                                        //////PUSH 14 elementos
                                        ////detalleinterval.push(new Intervalos(interva, _TiEMPOiNTERV, NOMTIP_INT, _HoraIni, _HoraFin, _TipTutn, _Tiptoler, _Tipdur, _tiempo_cons_max, _consTrab, _bitDiaSiq, strorden, intnum, n));

                                        //////PUSH 16 elementos
                                        ////detalleinterval.push(new Intervalos(interva, _TiEMPOiNTERV, NOMTIP_INT, _HoraIni, _HoraFin, _TipTutn, _Tiptoler, _Tipdur, _tiempo_cons_max, _consTrab, _bitDiaSiq, _TipoServ, strorden, intnum, n, _strTipoServ));

                                    }

                                    else if (Valdes > 4) {

                                        new PNotify({
                                            title: 'Nueva Intervalo',
                                            text: 'No se puede Repetir el Intervalo',
                                            type: 'info',
                                            delay: 3000,
                                            styling: 'bootstrap3',
                                            addclass: 'dark'
                                        });

                                        var dea = (detalleHoras.length) - 1;
                                        detalleHoras.splice(dea, 1);

                                        return;

                                    }

                                    console.log(detalleinterval);

                                //}
                                var numeroArreglos = detalleinterval.length;

                                $('#CantArrInter').val(numeroArreglos);

                                if (strorden == 'Primero') {

                                    $('#end').val(5);
                                }
                                if (strorden == 'Ultimo') {

                                    $('#end2').val(5);
                                }

                            //});

                            if (typeof _varTablaIntervalo !== 'undefined') {
                                _varTablaIntervalo.destroy();
                            }


                            //INTERVALOS AGREGADOS - FORMULARIO NUEVO - JORNADA DIARIA
                            _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                                data: detalleinterval,
                                columns: [
                                    { data: 'interva' },             //01 INTERVALO          "01:00 - 05:00" VISIBLE 1
                                    { data: 'NomTipoInter' },        //02 TIPO DE INTERVALO  "Ordinario"     VISIBLE 2  
                                    { data: 'intTurno' },            //03                    "42"
                                    { data: 'intTipoInterval' },     //04                    "39"
                                    { data: 'timeDuracion' },        //05 DURACION           "04:00"         VISIBLE 3
                                    { data: 'bitDiaSig' },           //06                    false
                                    { data: 'timeHoraIni' },         //07                    "01:00"
                                    { data: 'timeTiempoMaximo' },    //08                    "00:00"
                                    { data: 'timeTolerancia' },      //09                    "00:00"
                                    { data: 'strorden' },            //10 ORDEN              "Primero"       VISIBLE 4
                                    { data: 'intnum' },              //11                    1
                                    { data: 'timeHoraFin' },         //12                    "05:00"

                                    //{ data: 'strTipoServ' },         //DOMINGO21

                                    {
                                        sortable: false,
                                        "render": (data, type, item, meta) => {

                                            let clave = item.clave;
                                            return `<input type="button" class="btn btn-primary btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                        }
                                    },
                                    { data: 'clave' },               //15//14                    "1613519013394"
                                    { data: 'bitFlHT' },             //16//15                    false

                                    //AÑADIDO (para el campo tipo de servicio) en Formulario "NUEVO"
                                    { data: 'intidTipoServ' },     //AÑADIDO   
                                    { data: 'strTipoServ' },       //AÑADIDO

                                    //EN SISCOP existian inicialmente 14 campos, en SISFOOD 16
                                ],
                                order: [10, 'asc'],
                                lengthMenu: [15],
                                sDom: '',
                                responsive: true,
                                language: {
                                    lengthMenu: '',
                                    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                    infoEmpty: 'No hay Items para mostrar',
                                    search: '',
                                    sSearchPlaceholder: '',
                                    zeroRecords: '',
                                    infoFiltered: '',
                                    paginate: {
                                        previous: 'Anterior',
                                        next: 'Siguiente'
                                    }
                                },
                                columnDefs: [//ocultar y definir columnas

                                    {

                                        targets: [2],
                                        visible: false,

                                    },
                                    {

                                        targets: [3],
                                        visible: false,

                                    },
                                    {

                                        targets: [5],
                                        visible: false,

                                    },
                                    {

                                        targets: [6],
                                        visible: false,

                                    },
                                    {

                                        targets: [7],
                                        visible: false,

                                    },
                                    //{

                                    //    targets: [8],
                                    //    visible: false,

                                    //},
                                    {

                                        targets: [10],
                                        visible: false,

                                    },
                                    {

                                        targets: [11],
                                        visible: false,

                                    },
                                    {

                                        targets: [13],
                                        visible: false,//false

                                    },
                                    {

                                        targets: [14],
                                        visible: false,

                                    },
                                    {

                                        targets: [15],//solo estaba 15
                                        visible: false,

                                    }

                                ],

                            });
                    //    }
                    //);
                    $('.form-control input-sm').hide();
                    $('#chck_pri').iCheck('uncheck');
                    $('#chck_ult').iCheck('uncheck');
                    $('#consTrab').iCheck('uncheck');

                });


                //QUITAR UN INTERVALO - FORMULARIO NUEVO - JORNADA DIARIA
                $('#TablaIntervalso  tbody').on('click', 'tr input.btn-delete', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    let clave1 = $(this).attr("dataid");
                    //var LimiteBucle = (detalleinterval.length);// - 1;                    
                    var LimiteBucle = parseInt(detalleinterval.length);

                    if (!isNaN(clave1)) {

                        //for (var i = 0; i < LimiteBucle; i++) {
                            for (var i = 0; i < parseInt(detalleinterval.length); i++) {

                            if (detalleinterval[i].clave == clave1) {

                                u = detalleinterval[i].timeHoraIni;

                                detalleinterval.splice(i, 1);

                                if (detalleHoras[i].clave = clave1) {

                                    detalleHoras.splice(i, 1);
                                    console.log(detalleinterval + '---->2');
                                    console.log(detalleHoras + '---->2');
                                    continue;
                                }


                            }

                        }


                        if (typeof _varTablaIntervalo !== 'undefined') {
                            _varTablaIntervalo.destroy();
                        }

                        //QUITAR Intervalo Añadido - FORMULARIO NUEVO
                        _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                            data: detalleinterval,
                            columns: [
                                { data: 'interva' },
                                { data: 'NomTipoInter' },
                                { data: 'intTurno' },
                                { data: 'intTipoInterval' },
                                { data: 'timeDuracion' },
                                { data: 'bitDiaSig' },
                                { data: 'timeHoraIni' },
                                { data: 'timeTiempoMaximo' },
                                { data: 'timeTolerancia' },
                                { data: 'strorden' },
                                { data: 'intnum' },
                                { data: 'timeHoraFin' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let clave = item.clave;
                                        return `<input type="button" class="btn btn-primary btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                    }
                                },
                                { data: 'clave' },
                                { data: 'bitFlHT' },

                                //Formulario NUEVO (para el campo Tipo de Servicio)
                                { data: 'intidTipoServ' }, //AÑADIDO
                                { data: 'strTipoServ' },   //AÑADIDO      

                            ],
                            order: [10, 'asc'],
                            lengthMenu: [15],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas

                                {

                                    targets: [2],
                                    visible: false,

                                },
                                {

                                    targets: [3],
                                    visible: false,

                                },
                                {

                                    targets: [5],
                                    visible: false,

                                },
                                {

                                    targets: [6],
                                    visible: false,

                                },
                                {

                                    targets: [7],
                                    visible: false,

                                },
                                //{

                                //    targets: [8],
                                //    visible: false,

                                //},
                                {

                                    targets: [10],
                                    visible: false,

                                }, {

                                    targets: [11],
                                    visible: false,

                                },
                                {

                                    targets: [13],
                                    visible: false,

                                },
                                {

                                    targets: [14],
                                    visible: false,

                                },
                                {//AÑADIDO DOMINGO 21 HG: Esconder Columna "posicion 15"

                                    targets: [15],
                                    visible: false,

                                }
                            ],

                        });


                    }



                });

                //QUITAR TODOS LOS INTERVALOS - FORMULARIO NUEVO - JORNADA DIARIA
                $('#btn-clear-Intrevalos').on('click', function () {
                    validarSession();//AÑADIDO HG 22.04.2021
                    if (detalleinterval.length == 0) {

                    } else if (detalleinterval.length > 0) {


                        swal({
                            title: "Eliminar intervalos ",
                            text: "¿Está seguro de eliminar Todos los Intervalos'?",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonText: "Sí, eliminar",
                            cancelButtonText: "No, cancelar",
                        }).then(function (isConfirm) {
                            if (isConfirm) {

                                detalleinterval.length = 0;
                                detalleHoras.length = 0;

                                if (typeof _varTablaIntervalo !== 'undefined') {
                                    _varTablaIntervalo.destroy();
                                }

                                //Clear Intervalo - FORMULARIO NUEVO
                                _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                                    data: detalleinterval,
                                    columns: [
                                        { data: 'interva' },
                                        { data: 'NomTipoInter' },
                                        { data: 'intTurno' },
                                        { data: 'intTipoInterval' },
                                        { data: 'timeDuracion' },
                                        { data: 'bitDiaSig' },
                                        { data: 'timeHoraIni' },
                                        { data: 'timeTiempoMaximo' },
                                        { data: 'timeTolerancia' },
                                        { data: 'strorden' },
                                        { data: 'intnum' },
                                        { data: 'timeHoraFin' },
                                        {
                                            sortable: false,
                                            "render": (data, type, item, meta) => {

                                                let clave = item.clave;
                                                return `<input type="button" class="btn btn-primary btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                            }
                                        },
                                        { data: 'clave' },
                                        { data: 'bitFlHT' },

                                        { data: 'intidTipoServ' },//AÑADIDO al QUITAR INTERVALO
                                        { data: 'strTipoServ' },  //AÑADIDO al QUITAR INTERVALO      

                                    ],
                                    order: [10, 'asc'],
                                    lengthMenu: [15],
                                    sDom: '',
                                    responsive: true,
                                    language: {
                                        lengthMenu: '',
                                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                        infoEmpty: 'No hay Items para mostrar',
                                        search: '',
                                        sSearchPlaceholder: '',
                                        zeroRecords: '',
                                        infoFiltered: '',
                                        paginate: {
                                            previous: 'Anterior',
                                            next: 'Siguiente'
                                        }
                                    },
                                    columnDefs: [//ocultar y definir columnas

                                        {

                                            targets: [2],
                                            visible: false,

                                        },
                                        {

                                            targets: [3],
                                            visible: false,

                                        },
                                        {

                                            targets: [5],
                                            visible: false,

                                        },
                                        {

                                            targets: [6],
                                            visible: false,

                                        },
                                        {

                                            targets: [7],
                                            visible: false,

                                        },
                                        //{

                                        //    targets: [8],
                                        //    visible: false,

                                        //},
                                        {

                                            targets: [10],
                                            visible: false,

                                        }, {

                                            targets: [11],
                                            visible: false,

                                        },
                                        {

                                            targets: [13],
                                            visible: false,

                                        },
                                        {

                                            targets: [14],
                                            visible: false,

                                        },
                                        {//AÑADIDO DOMINGO 21 HG: Esconder Columna "posicion 15""

                                            targets: [15],
                                            visible: false,

                                        }
                                    ],

                                });



                                return;
                            } else {
                                swal("Cancelado", "La Operación fue cancelada", "error");
                            }

                        });

                    }
                });

            }

            //////miercoles17.03.21 // Comentado HG 17.03.21
            ////var CURRENT_URL = window.location.href.split('#')[0].split('?')[0],
            ////    $BODY = $('body'),
            ////    $MENU_TOGGLE = $('#menu_toggle'),
            ////    $SIDEBAR_MENU = $('#sidebar-menu'),
            ////    $SIDEBAR_FOOTER = $('.sidebar-footer'),
            ////    $LEFT_COL = $('.left_col'),
            ////    $RIGHT_COL = $('.right_col'),
            ////    $NAV_MENU = $('.nav_menu'),
            ////    $FOOTER = $('footer');
            //$(document).ready(function () {
            //    $('.collapse-link').on('click', function () {
            //        var $BOX_PANEL = $(this).closest('.x_panel'),
            //            $ICON = $(this).find('i'),
            //            $BOX_CONTENT = $BOX_PANEL.find('#oculto');
            //        // fix for some div with hardcoded fix class
            //        if ($BOX_PANEL.attr('style')) {
            //            $BOX_CONTENT.slideToggle(200, function () {
            //                $BOX_PANEL.removeAttr('style');
            //            });
            //        } else {
            //            $BOX_CONTENT.slideToggle(200);
            //            $BOX_PANEL.css('height', 'auto');
            //        }
            //        $ICON.toggleClass('fa-chevron-up fa-chevron-down');
            //    });
            //});

        });



    $(".range_min_max").ionRangeSlider({
        type: "double",
        min: 0,
        max: +24,
        from: -24,
        step: 1,
        to: +24,
        max_interval: 48
    });
    function init_ColorPicker() {

        if (typeof ($.fn.colorpicker) === 'undefined') { return; }
        console.log('init_ColorPicker');

        $('.demo1').colorpicker();
        $('.demo2').colorpicker();

        $('#demo_forceformat').colorpicker({
            format: 'rgba',
            horizontal: true
        });

        $('#demo_forceformat3').colorpicker({
            format: 'rgba',
        });

        $('.demo-auto').colorpicker();



    };


});


$('#btn-cancel-JornadaDiaria').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    $('.form-hide-JornadaDiaria').hide();
});


//===============================================================================================
//===============================  GUARDAR Jornada Diaria Comedor ===============================
//===============================================================================================
$('#btn-save-change-JornadaDiaria').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var chckactivo = null;
    if ($('#chk-activo-JO').is(':checked') == false) {
        chckactivo = false;
    } if ($('#chk-activo-JO').is(':checked') == true) {
        chckactivo = true;
    }

    var _TipoJor = $('#TipoJor option:selected').val();
    var _Refriguerio = $('#cboRef option:selected').val();
    var _jerar = $('#cboJerar option:selected').val();
    var _uo = $('#cboUndOrg option:selected').val();
    var _codigo = $('#txt_cod_Jor').val();
    var _desc = $('#txt_desc_Jor').val();



    var _cambio48 = $('#chck_cambdia').is(':checked');
    var _pertejor = $('#chck_perteneceJor').is(':checked');

    var _color = $('#txtcolor').val();
    var _campo1 = $('#strJornadaCampo1').val();
    var _campo2 = $('#strJornadaCampo2').val();
    var _campo3 = $('#strJornadaCampo3').val();
    var _campo4 = $('#strJornadaCampo4').val();
    var _campo5 = $('#strJornadaCampo5').val();



    if (_codigo === '' || _desc === '' || _TipoJor === '' || _Refriguerio === ''
        || _jerar === '' || _uo === '') {
        new PNotify({
            title: 'Nueva Jornada',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    var _TiEMPOiNTERV = $('#TipoInter option:selected').val();
    var _HoraIni = $('#tiempo_inic').val();
    var _HoraFin = $('#tiempo_fin').val();
    var _TipTutn = $('#TipoTurn option:selected').val();
    var _Tiptoler = $('#tiempo_tole').val();
    var _Tipdur = $('#tiempo_dura').val();
    var _chck_pri = $('#chck_pri').is(':checked');
    var _chck_ult = $('#chck_ult').is(':checked');
    var _consTrab = $('#consTrab').is(':checked');
    var _tiempo_cons_max = $('#tiempo_cons_max').val();

    //

    //var tablaIntervalos = $('#TablaIntervalso').DataTable();

    ////if (!table.data().any()) {
    ////    alert('Empty table');
    ////}
    //if (!tablaIntervalos.data().any()) {
    //    new PNotify({
    //        title: 'Nueva Jornada',
    //        text: 'Debe contener al menos un  Intervalo. ',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });
    //    return;
    //}
    



    var detallejornada = new Array();

    class Intervalo {
        constructor(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, intNuOrden, intidTipoServ, bitFlActivo) {
            this.intTipoInterval = intTipoInterval
            this.timeHoraIni = timeHoraIni
            this.timeHoraFin = timeHoraFin
            this.intTurno = intTurno
            this.timeTolerancia = timeTolerancia
            this.timeDuracion = timeDuracion
            this.timeTiempoMaximo = timeTiempoMaximo
            this.bitFlHT = bitFlHT
            this.bitDiaSig = bitDiaSig
            this.intNuOrden = intNuOrden
            this.intidTipoServ = intidTipoServ
            this.bitFlActivo = bitFlActivo

        }
    }



    $('#Tabla_Intervalos tr').each((index, item) => {

        var orden = new Array();

        for (var y = 0; y <= index; y++) {

            var interva = _varTablaIntervalo.cells({ row: y, column: 0 }).data()[0];
            var NomTipoInter = _varTablaIntervalo.cells({ row: y, column: 1 }).data()[0];
            var intTurno = _varTablaIntervalo.cells({ row: y, column: 2 }).data()[0];
            var intTipoInterval = _varTablaIntervalo.cells({ row: y, column: 3 }).data()[0];
            var timeDuracion = _varTablaIntervalo.cells({ row: y, column: 4 }).data()[0];
            var bitDiaSig = _varTablaIntervalo.cells({ row: y, column: 5 }).data()[0];
            var timeHoraIni = _varTablaIntervalo.cells({ row: y, column: 6 }).data()[0];
            var timeTiempoMaximo = _varTablaIntervalo.cells({ row: y, column: 7 }).data()[0];
            var timeTolerancia = _varTablaIntervalo.cells({ row: y, column: 8 }).data()[0];
            var strorden = _varTablaIntervalo.cells({ row: y, column: 9 }).data()[0];
            var intnum = _varTablaIntervalo.cells({ row: y, column: 10 }).data()[0];
            var timeHoraFin = _varTablaIntervalo.cells({ row: y, column: 11 }).data()[0];
            var clave = _varTablaIntervalo.cells({ row: y, column: 13 }).data()[0];
            var bitTrabajado = _varTablaIntervalo.cells({ row: y, column: 14 }).data()[0];

            //Añadido miercoles17 hg.16.02.21
            var intidTipoServComedor = _varTablaIntervalo.cells({ row: y, column: 15 }).data()[0];//var intidTipoServ = _varTablaIntervalo.cells({ row: y, column: 15 }).data()[0];
            //var strTipoServ = _varTablaIntervalo.cells({ row: y, column: 16 }).data()[0];


            orden.push(intnum);
        }

        var bitFlActivo = true;
        var intidTipoServ = null;
        var CantArr = $('#CantArrInter').val();
        var prim = $('#primer').val();
        var end = $('#end').val();
        var end2 = $('#end2').val();

        if (CantArr == 1) { 
            var intnum = 1;

            detallejornada.push(new Intervalo(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServComedor, bitFlActivo));

        }

        else if (CantArr == 2) {


            //if (end == 5) {

                detallejornada.push(new Intervalo(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServComedor, bitFlActivo));

            //}

            //else if (end !== 5) {

            //    $('#primer').val(3);

            //}


        }


        else if (CantArr > 2) {

            //if (end == 5 && end2 == 5) {

                detallejornada.push(new Intervalo(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServComedor, bitFlActivo));

            }

        //    else if (end !== 5 && end2 !== 5) {

        //        $('#primer').val(4);

        //    } else if (end !== 5) {

        //        $('#primer').val(3);

        //    }

        //    else if (end2 !== 5) {

        //        $('#primer').val(5);

        //    }

        //}s

        else {

            detallejornada.push(new Intervalo(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServComedor, bitFlActivo));

        }

    });

    var prim = $('#primer').val();
    var end = $('#end').val();
    if (prim == 4) {
        //new PNotify({
        //    title: 'Nueva Jornada',
        //    text: 'Ingrese la primera jornada y la ultima jornada.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //    });
        //    return;
    }


    if (prim == 3) {
        //new PNotify({
        //    title: 'Nueva Jornada',
        //    text: 'Ingrese la primera jornada.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        //return;
    }


    if (prim == 5) {
        //new PNotify({
        //    title: 'Nueva Jornada',
        //    text: 'Ingrese la ultima jornada.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        //return;
    }


    console.log('detallejornada' + detallejornada);
    //alert('detallejornada en Consola');

    //console.log(detallejornada);

    var Jornada = {

        strCodJornada: _codigo,
        strDscJornada: _desc,
        intTipoDia: _TipoJor,
        // timeHoraIni: null,
        // timeHoraFin: null,
        intControlRefri: _Refriguerio,
        strColor: _color,
        IntIdUniOrg: _uo,
        bitDiaSig: _cambio48,
        bitPertenecDiaSig: _pertejor,
        bitPertenecDiaSig: _pertejor,
        strJornadaCampo1: _campo1,
        strJornadaCampo2: _campo2,
        strJornadaCampo3: _campo3,
        strJornadaCampo4: _campo4,
        strJornadaCampo5: _campo5,
        strJornadaCampo5: _campo5,
        bitFlActivo: chckactivo,

    }

    if (detallejornada.length == 0) {
        new PNotify({
            title: 'Nueva Jornada',
            text: 'Debe contener al menos un  Intervalo ',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    if (detallejornada.length == null) {
        alert('Debe contener un registro Minimo');
        new PNotify({
            title: 'Nueva Jornada',
            text: 'Debe contener al menos un Intervalo Minimo',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    $.post(
        '/Asistencia/RegistrarNuevaJornada',
        { ObjJornada: Jornada, listaIntervalos: detallejornada },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nueva Jornada',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablaJornada();
                    $('.form-hide-JornadaDiaria').hide();
                } else {

                    if (response.type === 'info') {
                        var nomMantemiento = 'Jornada';
                        var campo = 'txt_cod_Jor';
                        var msj = response.message;
                        var response = response.type;
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;

                    } else {

                        if (response.type === 'error') {

                            var nomMantemiento = 'Jornada';
                            var campo = 'txt_desc_Jor';
                            var msj = response.message;
                            var response = 'info';
                            var deta = 'notifry_errordes';
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                        } else {
                            if (response.type === 'alert') {

                                var nomMantemiento = 'Jornada';
                                var campo = 'txt_codPla_Var';
                                var msj = response.message;
                                var response = 'info';
                                var deta = 'notifry_errorpla';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                                return;
                            } else if (response.type === 'externo') {

                                var nomMantemiento = 'Jornada';
                                var campo = 'txt_codExte_Var';
                                var msj = response.message;
                                var response = 'info';
                                var deta = 'notifry_errorext';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            } else {
                                new PNotify({
                                    title: 'Error en actualización Jornada',
                                    text: response.message,
                                    type: 'alert',
                                    delay: 3000,
                                    styling: 'bootstrap3'
                                });
                                return;
                            }
                        }

                    }
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});


//===============================================================================================
//=============================== BOTON ACTUALIZAR JORNADA DIARIA ===============================
//===============================================================================================
$('#btn-update-JornadaDiaria').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var chckactivo = null;
    if ($('#chk-activo-JO').is(':checked') == false) {
        chckactivo = false;
    } if ($('#chk-activo-JO').is(':checked') == true) {
        chckactivo = true;
    }

    var _TipoJor = $('#TipoJor option:selected').val();
    var _Refriguerio = $('#cboRef option:selected').val();
    var _jerar = $('#cboJerar option:selected').val();
    var _uo = $('#cboUndOrg option:selected').val();
    var _codigo = $('#txt_cod_Jor').val();
    var _desc = $('#txt_desc_Jor').val();

    var _cambio48 = $('#chck_cambdia').is(':checked');
    var _pertejor = $('#chck_perteneceJor').is(':checked');

    var _color = $('#txtcolor').val();
    var _campo1 = $('#strJornadaCampo1').val();
    var _campo2 = $('#strJornadaCampo2').val();
    var _campo3 = $('#strJornadaCampo3').val();
    var _campo4 = $('#strJornadaCampo4').val();
    var _campo5 = $('#strJornadaCampo5').val();



    if (_codigo === '' || _desc === '' || _TipoJor === '' || _Refriguerio === ''
        || _jerar === '' || _uo === '') {
        new PNotify({
            title: 'Nueva Jornada',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    var _TiEMPOiNTERV = $('#TipoInter option:selected').val();
    var _HoraIni = $('#tiempo_inic').val();
    var _HoraFin = $('#tiempo_fin').val();
    var _TipTutn = $('#TipoTurn option:selected').val();
    var _Tiptoler = $('#tiempo_tole').val();
    var _Tipdur = $('#tiempo_dura').val();
    var _chck_pri = $('#chck_pri').is(':checked');
    var _chck_ult = $('#chck_ult').is(':checked');
    var _consTrab = $('#consTrab').is(':checked');

    var _tiempo_cons_max = $('#tiempo_cons_max').val();
    var _idjor = $('#idjorn').val();


    var tablaIntervalos = $('#TablaIntervalso').DataTable();

    if (!tablaIntervalos.data().any()) {
        new PNotify({
            title: 'Nueva Jornada',
            text: 'Debe Contener al Menos un  Intervalo. ',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    //Contar filas en una tabla datatable
    //Añadido HG.19.02.21 Viernes
    var table = $('#TablaIntervalso').DataTable();
    numero_total_intervalos_ = table.data().count();
    //alert(numero_total_intervalos_); 


                //var table = $('#datatable-reg-neg-serv').DataTable();
                var value = 'primer'
                var primerOrden=  table.columns(0).search(value);
                        
                   //domingo07.03     
                        //.draw();




    var detallejornadas = new Array();

    class Intervaloe {

        constructor(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, intNuOrden, intidTipoServ, bitFlActivo, IntIdIntervalo) {
            this.intTipoInterval = intTipoInterval
            this.timeHoraIni = timeHoraIni
            this.timeHoraFin = timeHoraFin
            this.intTurno = intTurno
            this.timeTolerancia = timeTolerancia
            this.timeDuracion = timeDuracion
            this.timeTiempoMaximo = timeTiempoMaximo
            this.bitFlHT = bitFlHT
            this.bitDiaSig = bitDiaSig
            this.intNuOrden = intNuOrden
            this.intidTipoServ = intidTipoServ
            this.bitFlActivo = bitFlActivo
            this.IntIdIntervalo = IntIdIntervalo

        }
    }


    selectedIndex = _varTablaIntervalo.row(this).data();





    $('#Tabla_Intervalose tr').each((index, item) => {

        var orden = new Array();

        for (var y = 0; y <= index; y++) {


            var interva = _varTablaIntervalo.cells({ row: y, column: 0 }).data()[0];
            var NomTipoInter = _varTablaIntervalo.cells({ row: y, column: 1 }).data()[0];
            var intTurno = _varTablaIntervalo.cells({ row: y, column: 2 }).data()[0];
            var intTipoInterval = _varTablaIntervalo.cells({ row: y, column: 3 }).data()[0];
            var timeDuracion = _varTablaIntervalo.cells({ row: y, column: 4 }).data()[0];
            var bitDiaSig = _varTablaIntervalo.cells({ row: y, column: 5 }).data()[0];
            var timeHoraIni = _varTablaIntervalo.cells({ row: y, column: 6 }).data()[0];
            var timeTiempoMaximo = _varTablaIntervalo.cells({ row: y, column: 7 }).data()[0];
            var timeTolerancia = _varTablaIntervalo.cells({ row: y, column: 8 }).data()[0];
            var strorden = _varTablaIntervalo.cells({ row: y, column: 9 }).data()[0];
            var intnum = _varTablaIntervalo.cells({ row: y, column: 10 }).data()[0];
            var timeHoraFin = _varTablaIntervalo.cells({ row: y, column: 11 }).data()[0];
            var clave = _varTablaIntervalo.cells({ row: y, column: 13 }).data()[0];
            var bitTrabajado = _varTablaIntervalo.cells({ row: y, column: 14 }).data()[0];
            var intIdIntervalo = _varTablaIntervalo.cells({ row: y, column: 15 }).data()[0];
            var intidTipoServComedorAct = _varTablaIntervalo.cells({ row: y, column: 16 }).data()[0];

            orden.push(intnum);
        }



        var bitFlActivo = true;
        var intidTipoServ = null;
        var CantArr = numero_total_intervalos_// $('#CantArrInter').val();//HG.19.02.21
        //alert(CantArr); 
        var prim = $('#primer').val();
        var end = $('#end').val();
        var end2 = $('#end2').val();


        //if (CantArr == 1) {//if (CantArr >= 1) {
        //    var intnum = 1;
        //    detallejornadas.push(new Intervaloe(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServComedorAct, bitFlActivo, intIdIntervalo));
        //}
        //else if (CantArr == 2) {
        //    if (end == 5) {
        //        detallejornadas.push(new Intervaloe(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServComedorAct, bitFlActivo, intIdIntervalo));
        //    }
        //    else if (end !== 5) {

        //        $('#primer').val(3);

        //    }
        //} else if (CantArr > 2) {

        //    if (end == 5 && end2 == 5) {

        //        detallejornadas.push(new Intervaloe(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServComedorAct, bitFlActivo, intIdIntervalo));

        //    } else if (end !== 5 && end2 !== 5) {

        //        $('#primer').val(4);

        //    } else if (end !== 5) {

        //        $('#primer').val(3);

        //    }

        //    else if (end2 !== 5) {

        //        $('#primer').val(5);

        //    }

            //else {

                detallejornadas.push(new Intervaloe(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServComedorAct, bitFlActivo, intIdIntervalo));

            //}
            //detallejornadas.push(new Intervalo(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, intnum, intidTipoServ, bitFlActivo, intIdIntervalo));

        //}

    });

    var prim = $('#primer').val();
    var end = $('#end').val();
    //if (prim == 4) {//COMENTADO HG.19.02.21
    //    new PNotify({
    //        title: 'Nueva Jornada',
    //        text: 'Ingrese la primera jornada y la ultima jornada.',//EN BOTON ACTUALIZAR
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });
    //    return;
    //}


    //if (prim == 3) {//COMENTADO HG.19.02.21
    //    new PNotify({
    //        title: 'Nueva Jornada',
    //        text: 'Ingrese la primera jornada.',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });
    //    return;
    //}

    //if (prim == 5) {//COMENTADO HG.19.02.21
    //    new PNotify({
    //        title: 'Nueva Jornada',
    //        text: 'Ingrese la ultima jornada.',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });
    //    return;
    //}

    console.log(detallejornadas);
    //alert("array jornada para actualizar STOP");



    var Jornada = {

        strCodJornada: _codigo,
        strDscJornada: _desc,
        intTipoDia: _TipoJor,
        // timeHoraIni: null,
        // timeHoraFin: null,
        intControlRefri: _Refriguerio,
        strColor: _color,
        IntIdUniOrg: _uo,
        bitDiaSig: _cambio48,
        bitPertenecDiaSig: _pertejor,
        bitPertenecDiaSig: _pertejor,
        strJornadaCampo1: _campo1,
        strJornadaCampo2: _campo2,
        strJornadaCampo3: _campo3,
        strJornadaCampo4: _campo4,
        strJornadaCampo5: _campo5,
        strJornadaCampo5: _campo5,
        bitFlActivo: chckactivo,
        intIdJornada: _idjor,

    }

    //return;//SOLO PARA PRUEBAS

    $.post(
        '/Asistencia/ActualizarJornada',
        { ObjJornada: Jornada, listaIntervalos: detallejornadas },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualización de Jornada',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    //detallejornada = [];
                    //detallejornadas = [];
                    //detalleinterval = [];
                    //detalleHoras = [];

                    TablaJornada();
                    $('.form-hide-JornadaDiaria').hide();
                } else {

                    if (response.type === 'info') {
                        var nomMantemiento = 'Jornada';
                        var campo = 'txt_cod_Jor';
                        var msj = response.message;
                        var response = response.type;
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;

                    } else {

                        if (response.type === 'error') {

                            var nomMantemiento = 'Jornada';
                            var campo = 'txt_desc_Jor';
                            var msj = response.message;
                            var response = 'info';
                            var deta = 'notifry_errordes';
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                        } else {
                            if (response.type === 'alert') {

                                var nomMantemiento = 'Jornada';
                                var campo = 'txt_codPla_Var';
                                var msj = response.message;
                                var response = 'info';
                                var deta = 'notifry_errorpla';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                                return;
                            } else if (response.type === 'externo') {

                                var nomMantemiento = 'Jornada';
                                var campo = 'txt_codExte_Var';
                                var msj = response.message;
                                var response = 'info';
                                var deta = 'notifry_errorext';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            } else {

                            }
                        }

                    }
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});



/**------------------------------------------------------*//*ln_19401_all*/
/**23. Regla de Negocio */
/**------------------------------------------------------*//*ln_25832_all*/
$('#filActivoRegNeg').on('change', function () {
    validarSession()
    TablarReglaNeg();
});

$('#cboJerar').on('change', function () {
    validarSession()
    TablarReglaNeg();
});

$('#filtroRegNeg').keyup(function () {
    validarSession()
    TablarReglaNeg();
});


function CombosReglaDeNegocio() {


    //ComboJerarquia formulario
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: '' },
        (response) => {
            $('#cboJerarquia').empty();
            $('#cboJerarquia').append('<option value="0" selected>Seleccione</option>');

            response.forEach(element => {
                $('#cboJerarquia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
        });

    //ComboJerarquia title

    //Combo UnidadOrganizacional
    $('#cboJerarquia').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021
        var IntidJerar = $('#cboJerarquia option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: '' },
            (response) => {
                $('#cboUndOrg').empty();
                $('#cboUndOrg').attr('disabled', false);

                var cantreg = response.length;

                if (cantreg == 0) {
                    $('#cboUndOrg').append('<option value="0" selected>No existen Registros</option>');
                    $('#cboUndOrg').attr('disabled', true);

                }
                else if (cantreg !== 0) {
                    response.forEach(element => {


                        $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                    });

                }
            });
    });



    //Combo USo Maximo de Tolerancia

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'REGNEG', strSubGrupo: 'USO' },
        (response) => {
            var cantreg = response.length;
            if (cantreg == 0) {
                $('#UsoTole').empty();
                $('#UsoTole').append('<option selected>No existen Registros</option>');
                $('#UsoTole').attr('disabled', true);

            }
            else if (cantreg !== 0) {
                $('#UsoTole').empty();
                response.forEach(element => {

                    $('#UsoTole').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            }
        });

    //Combo USo Maximo de Tolerancia

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'REGNEG', strSubGrupo: 'HE' },
        (response) => {
            var cantreg = response.length;
            $('#UsoTolera').empty();
            $('#UsoTolera').append('<option selected>Seleccione</option>');

            if (cantreg == 0) {
                $('#UsoTolera').empty();
                $('#UsoTolera').append('<option selected>No existen Registros</option>');
                $('#UsoTolera').attr('disabled', true);

            }
            else if (cantreg !== 0) {
                response.forEach(element => {
                    $('#UsoTolera').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            }
        });

    //Combo USo Maximo de Tolerancia

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGHEXTRAS', intIdFiltroGrupo: 0, strGrupo: '', strSubGrupo: '' },
        (response) => {
            var cantreg = response.length;
            $('#HorasExtras').empty();
            $('#HorasExtras').append('<option selected>Seleccione</option>');
            $('#HorasExtrase').empty();
            $('#HorasExtrase').append('<option selected>Seleccione</option>');
            if (cantreg == 0) {
                $('#HorasExtras').empty();
                $('#HorasExtras').append('<option selected>No existen Registros</option>');
                $('#HorasExtras').attr('disabled', true);
                $('#HorasExtrase').empty();
                $('#HorasExtrase').append('<option selected>No existen Registros</option>');
                $('#HorasExtrase').attr('disabled', true);
            }
            else if (cantreg !== 0) {
                response.forEach(element => {
                    $('#HorasExtras').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                    $('#HorasExtrase').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                });

            }
        });

    //Metodo de Calculo

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'REGNEG', strSubGrupo: 'CALC' },
        (response) => {
            var cantreg = response.length;
            $('#MetCal').empty();


            if (cantreg == 0) {
                $('#MetCal').empty();
                $('#MetCal').append('<option selected>No existen Registros</option>');
                $('#MetCal').attr('disabled', true);

            }
            else if (cantreg !== 0) {


                response.forEach(element => {
                    $('#MetCal').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });

            }
        });

    //Metodo de Calculo

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'REGNEG', strSubGrupo: 'TCALC' },
        (response) => {
            $('#MetCalc').empty();

            var cantreg = response.length;


            if (cantreg == 0) {
                $('#MetCalc').empty();
                $('#MetCalc').append('<option selected>No existen Registros</option>');
                $('#MetCalc').attr('disabled', true);

            }
            else if (cantreg !== 0) {


                response.forEach(element => {
                    $('#MetCalc').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });

            }
        });
}

var _varTablaRegNeg;

function TablarReglaNeg() {

    var filtroActivo = $('#filActivoRegNeg').val();
    var strfiltro = $('#filtroRegNeg').val();
    var filtrojer = $('#cboJerar').val();


    $.ajax({
        url: '/Asistencia/GetTablaFiltradaReglaNegocio',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response);

            if (typeof _varTablaRegNeg !== 'undefined') {
                _varTablaRegNeg.destroy();
            }

            _varTablaRegNeg = $('#TablaReg').DataTable({
                data: response,
                columns: [


                    { data: 'strCoRegNeg' },
                    { data: 'strDesRegNeg' },
                    { data: 'strDescUO' },
                    { data: 'strJerOrg' },
                    { data: 'strEstado' },
                    { data: null },
                    { data: 'intIdReglaNeg' },
                    { data: 'intextra1' },
                    { data: 'strRegNegCampo1' },
                    { data: 'strRegNegCampo2' },
                    { data: 'strRegNegCampo3' },
                    { data: 'strRegNegCampo4' },
                    { data: 'strRegNegCampo5' },
                    { data: 'intextra2' },
                    { data: 'bitFlActivo' },
                    { data: 'bitFlPrincipal' },



                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    },
                    {

                        targets: [6],
                        visible: false,
                        searchable: false
                    },
                    {

                        targets: [7],
                        visible: false,
                        searchable: false
                    },
                    {

                        targets: [8],
                        visible: false,
                        searchable: false
                    },
                    {

                        targets: [9],
                        visible: false,
                        searchable: false
                    },
                    {

                        targets: [10],
                        visible: false,
                        searchable: false
                    },
                    {

                        targets: [11],
                        visible: false,
                        searchable: false
                    },
                    {

                        targets: [12],
                        visible: false,
                        searchable: false
                    },
                    {

                        targets: [13],
                        visible: false,
                        searchable: false
                    },
                    {

                        targets: [14],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [15],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}

$('#TablaReg  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaRegNeg.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaRegNeg.row($(this).parents('li')).data();
        cardarDatosRegNeg(data);
    } else {
        var data = _varTablaRegNeg.row($(this).parents('tr')).data();
        cardarDatosRegNeg(data);
    }

});

$('#TablaReg  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaRegNeg.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaRegNeg.row($(this).parents('li')).data();
        intentEliminarReglaNegocio(data['intIdReglaNeg'], data['strDesRegNeg']);

    } else {

        var data = _varTablaRegNeg.row($(this).parents('tr')).data();
        intentEliminarReglaNegocio(data['intIdReglaNeg'], data['strDesRegNeg']);

    }


});

function intentEliminarReglaNegocio(idJor, nomJor) {
    validarSession();//AÑADIDO HG 22.04.2021
    swal({
        title: "Eliminar Regla de Negocio",
        text: "¿Está seguro de eliminar la regla   ''<strong>" + nomJor + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            validarSession()
            yesEliminaRegla(idJor);
        }
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function yesEliminaRegla(idJor) {
    validarSession();//AÑADIDO HG 22.04.2021
    $.post(
        '/Asistencia/EliminarReglaNegocio',
        { intIdReglaNeg: idJor },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablarReglaNeg();

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

var _varTablaConfigHECD;
var _varTablaConfigHECDD;

function cardarDatosRegNeg(data) {

    console.log(data);

    $.post(
        '/Asistencia/EditarReglaNegocio',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-ReglaNegocio').show();
                $('.form-hide-ReglaNegocio .x_content').empty();
                $('.form-hide-ReglaNegocio .x_content').html(response);
                $('#btn-save-change-ReglaNegocio').hide();
                $('#btn-update-ReglaNegocio').show();
                $('#btn-update-ReglaNegocio').attr('disabled', false);
                CombosReglaDeNegocio();
                init_SmartWizard();
                init_sidebar();
                init_checkBox_styles();


                $('#txt_codigo_RN').val(data.strCoRegNeg);
                $('#txt_descripcion_RN').val(data.strDesRegNeg);

                //ComboJerarquia formulario
                $.post(
                    '/Asistencia/LlenarTipoUM',
                    { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: '' },
                    (response) => {
                        $('#cboJerarquia').empty();
                        $('#cboJerarquia').append('<option value="0" selected>Seleccione</option>');

                        response.forEach(element => {
                            $('#cboJerarquia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                        });
                        $("#cboJerarquia").val(data.intextra1);
                    });




                $.post(
                    '/Asistencia/LlenarTipoUM',
                    { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: data.intextra1, strGrupo: 'JERAR', strSubGrupo: '' },
                    (response) => {
                        $('#cboUndOrg').empty();
                        $('#cboUndOrg').attr('disabled', false);

                        var cantreg = response.length;

                        if (cantreg == 0) {
                            $('#cboUndOrg').append('<option value="0" selected>No existen Registros</option>');
                            $('#cboUndOrg').attr('disabled', true);

                        }
                        else if (cantreg !== 0) {
                            response.forEach(element => {


                                $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                            });

                        }
                        $("#cboUndOrg").val(data.intextra2);
                    });

                $.post(
                    '/Asistencia/CamposAdicionales',
                    { strEntidad: 'TGREGLANEG' },
                    (response) => {

                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


                        });
                        $('#strRegNegCampo1').val(data.strRegNegCampo1);
                        $('#strRegNegCampo2').val(data.strRegNegCampo2);
                        $('#strRegNegCampo3').val(data.strRegNegCampo3);
                        $('#strRegNegCampo4').val(data.strRegNegCampo4);
                        $('#strRegNegCampo5').val(data.strRegNegCampo5);


                    });


                if (data.bitFlActivo == false) {

                    $('#idche').html('<input type="checkbox" id="chk-activo-JO" class=" js-switch"  /> Activo');
                    // $('#chck_Activo_Var').iCheck('uncheck');
                }
                else if (data.bitFlActivo == true) {

                    $('#idche').html('<input type="checkbox" id="chk-activo-JO" class=" js-switch" checked /> Activo');
                    // $('#chck_Activo_Var').iCheck('check');
                }

                if (data.bitFlPrincipal === true) {
                    $('#checkPrincipal').iCheck('check')
                }

                switcheryLoad();


                $('#IdRegNeg').val(data.intIdReglaNeg);

                LlenarTablaHE();



                $.post(
                    '/Asistencia/ObtenerRegistroReglaNedocio',
                    { intIdReglaNeg: data.intIdReglaNeg },
                    (response) => {

                        console.log(response);
                        response.forEach(element => {


                            // 1.-Bloque  A.1.1
                            if (element.strCoReglaDet == 'AVPM') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_valid_pri_marca').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_valid_pri_marca').iCheck('uncheck');

                                }
                            }


                            if (element.strCoReglaDet == 'PVALIDREF') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_valid_marca_refri').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_valid_marca_refri').iCheck('uncheck');

                                }
                            }


                            if (element.strCoReglaDet == 'PASMAREF') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_asumir_Marcar_MI').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_asumir_Marcar_MI').iCheck('uncheck');

                                }
                            }

                            //2.-Bloque A.1.1


                            if (element.strCoReglaDet == 'TMINHTREF') {


                                $('#TimeMinHTDsctRefri').val(element.strPosibValor);

                            }


                            if (element.strCoReglaDet == 'TVALIDREF') {


                                $('#TimeMinValidMarCRefri').val(element.strPosibValor);

                            }


                            if (element.strCoReglaDet == 'TREFDIADES') {


                                $('#TimeDsctRefriDiaDesca').val(element.strPosibValor);

                            }

                            //3.-Bloque A.1.1

                            if (element.strCoReglaDet == 'ABO') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_Valida_Bon').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_Valida_Bon').iCheck('uncheck');

                                }
                            }


                            if (element.strCoReglaDet == 'DINIPLANHO') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_config_dia_ini').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_config_dia_ini').iCheck('uncheck');
                                }
                            }


                            if (element.strCoReglaDet == 'ASIGM') {

                                if (element.strPosibValor == "1") {

                                    $('#Vali_Asig_marc').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#Vali_Asig_marc').iCheck('uncheck');

                                }
                            }


                            if (element.strCoReglaDet == 'PEXCEP') {

                                if (element.strPosibValor == "1") {

                                    $('#Cons_Exc_SinCargo').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#Cons_Exc_SinCargo').iCheck('uncheck');

                                }
                            }


                            if (element.strCoReglaDet == 'FSH') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_cons_fer_hor').iCheck('check');

                                }
                                else if (element.strPosibValor == "false") {

                                    $('#chck_cons_fer_hor').iCheck('0');
                                }
                            }


                            if (element.strCoReglaDet == 'FEF') {

                                if (element.strPosibValor == "1") {

                                    $('#ConsFal').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#ConsFal').iCheck('uncheck');

                                }
                            }


                            //4.-Bloque A.1.2


                            if (element.strCoReglaDet == 'TING') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_Tar_Ing_Tole').iCheck('check');
                                    $('#chck_Tar_Tole').iCheck('uncheck');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_Tar_Tole').iCheck('check');
                                    $('#chck_Tar_Ing_Tole').iCheck('uncheck');

                                }
                            }


                            if (element.strCoReglaDet == 'TREF') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_Tar_Refr_Tole').iCheck('check');
                                    $('#chck_Tar_Tole_xd').iCheck('uncheck');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_Tar_Tole_xd').iCheck('check');
                                    $('#chck_Tar_Refr_Tole').iCheck('uncheck');

                                }

                            }

                            //5.-Bloque A.1.2

                            if (element.strCoReglaDet == 'TIPOTOL') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_PorSemana').iCheck('check');
                                    $('#chck_PorPeriodo').iCheck('uncheck');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_PorPeriodo').iCheck('check');
                                    $('#chck_PorSemana').iCheck('uncheck');

                                }
                            }

                            if (element.strCoReglaDet == 'FORMTOL') {

                                $('#UsoTole').val(element.strPosibValor);
                                $('#UsoTole').on('change', function () {

                                    var VARI = $('#UsoTole').val();

                                    if (VARI == 107) {

                                        $('#change_state_TipoTole').html('<input type="time" id="DscTole" class="form-control" min="00:00" max="24:00" accept="hh:mm" value="00:00">');

                                    } else if (VARI == 108) {

                                        $('#change_state_TipoTole').html('<input type="number" id="DscTole" class="form-control" min="0" value="0">');


                                    }

                                });

                                var VARI = $('#UsoTole').val();

                                if (VARI == 107) {

                                    $('#change_state_TipoTole').html('<input type="time" id="DscTole" class="form-control" min="00:00" max="24:00" accept="hh:mm" value="00:00">');

                                } else if (VARI == 108) {

                                    $('#change_state_TipoTole').html('<input type="number" id="DscTole" class="form-control" min="0" value="0">');



                                }


                            }



                            if (element.strCoReglaDet == 'GENTOLTAR') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_GeneTar_MaxTol').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_GeneTar_MaxTol').iCheck('uncheck');

                                }
                            }







                            $.post(
                                '/Asistencia/ObtenerRegistroReglaNedocio',
                                { intIdReglaNeg: data.intIdReglaNeg },
                                (response) => {
                                    response.forEach(element => {
                                        if (element.strCoReglaDet == 'TMAXTOL') {
                                            $('#DscTole').val(element.strPosibValor);
                                        }

                                    });
                                });









                            //6.-Bloque A.1.2

                            if (element.strCoReglaDet == 'CJD') {

                                if (element.strPosibValor == "1") {

                                    $('#ConsAusJustDiaria').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#ConsAusJustDiaria').iCheck('uncheck');

                                }
                            }

                            if (element.strCoReglaDet == 'CDF') {

                                if (element.strPosibValor == "1") {

                                    $('#ConsFeriSinAsis').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#ConsFeriSinAsis').iCheck('uncheck');

                                }
                            }

                            if (element.strCoReglaDet == 'HTDOM') {



                                if (element.strPosibValor > '00:00') {

                                    $('#chk_cons_dom').iCheck('check');

                                } else if (element.strPosibValor == '00:00') {

                                    $('#chk_cons_dom').iCheck('uncheck');

                                }


                                $('#time_chk_cons_dom').val(element.strPosibValor);

                            }

                            if (element.strCoReglaDet == 'TMAXREF') {



                                $('#chck_con_refr_max').iCheck('check');

                                if (element.strPosibValor > '00:00') {

                                    $('#chk_cons_dom').iCheck('check');

                                } else if (element.strPosibValor == '00:00') {

                                    $('#chck_con_refr_max').iCheck('uncheck');

                                }

                                $('#time_chck_con_refr_max').val(element.strPosibValor);


                            }

                            if (element.strCoReglaDet == 'TCASTMIREF') {




                                if (element.strPosibValor > '00:00') {

                                    $('#chck_dsct_no_marcar').iCheck('check');

                                } else if (element.strPosibValor == '00:00') {

                                    $('#chck_dsct_no_marcar').iCheck('uncheck');

                                }


                                $('#time_chck_dsct_no_marcar').val(element.strPosibValor);

                            }


                            //7.-Bloque A.1.3

                            if (element.strCoReglaDet == 'TMAH') {

                                $('#time_min_antes_hor').val(element.strPosibValor);

                            }

                            if (element.strCoReglaDet == 'TMDH') {

                                $('#time_min_despues_hor').val(element.strPosibValor);

                            }

                            if (element.strCoReglaDet == 'TMDNL') {

                                $('#time_min_durante_diaslab').val(element.strPosibValor);

                            }

                            if (element.strCoReglaDet == 'PHAJUST') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_dias_just').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_dias_just').iCheck('uncheck');

                                }
                            }

                            if (element.strCoReglaDet == 'PREF') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_per_refr').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_per_refr').iCheck('uncheck');

                                }
                            }

                            if (element.strCoReglaDet == 'TMREF') {

                                $('#time_chck_per_refr').val(element.strPosibValor);
                            }

                            //8.-Bloque A.1.3

                            if (element.strCoReglaDet == 'DTR') {

                                $('#Time_TE_ConsiDTrab').val(element.strPosibValor);

                            }

                            if (element.strCoReglaDet == 'TMHADT') {

                                $('#Time_HA_Efect_ConsDT').val(element.strPosibValor);

                            }

                            if (element.strCoReglaDet == 'ADTRAB') {

                                $('#chck_Sabado').iCheck('uncheck');
                                $('#chck_Domingo').iCheck('uncheck');
                                $('#chck_DiaFer').iCheck('uncheck');
                                $('#chck_DiaDesc').iCheck('uncheck');

                                if (element.strPosibValor.includes('SAB') == true) {

                                    $('#chck_Sabado').iCheck('check');

                                } if (element.strPosibValor.includes('DOM') == true) {

                                    $('#chck_Domingo').iCheck('check');

                                } if (element.strPosibValor.includes('FER') == true) {

                                    $('#chck_DiaFer').iCheck('check');

                                } if (element.strPosibValor.includes('DESC') == true) {

                                    $('#chck_DiaDesc').iCheck('check');

                                }

                            }


                            //9.-Bloque A.1.4

                            if (element.strCoReglaDet == 'CHORARIO') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_Con_Hor').iCheck('check');
                                    $('#chck_Sin_Hor').iCheck('uncheck');


                                } else if (element.strPosibValor == "0") {

                                    $('#chck_Sin_Hor').iCheck('check');
                                    $('#chck_Con_Hor').iCheck('uncheck');


                                }
                            }


                            if (element.strCoReglaDet == 'TRABAMA') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_trab_amanecida').iCheck('check');


                                } else if (element.strPosibValor == "0") {

                                    $('#chck_trab_amanecida').iCheck('uncheck');

                                }
                            }


                            if (element.strCoReglaDet == 'PTAREOS') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_proc_tareo').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_proc_tareo').iCheck('uncheck');

                                }
                            }

                            //10.-Bloque A.1.4

                            if (element.strCoReglaDet == 'HGESMIREF') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_marc_incom_refr').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_marc_incom_refr').iCheck('uncheck');

                                }
                            }


                            if (element.strCoReglaDet == 'THOLINIREF') {

                                $('#time_ini_chck_marc_incom_refr').val(element.strPosibValor);

                            }


                            if (element.strCoReglaDet == 'THOLFINREF') {

                                $('#time_fin_chck_marc_incom_refr').val(element.strPosibValor);

                            }

                            //11.-Bloque A.1.4

                            if (element.strCoReglaDet == 'ACASTXTI') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_apli_catigo').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_apli_catigo').iCheck('uncheck');

                                }
                            }

                            /************************************************/
                            $('#chck_apli_catigo').on('ifChanged', function () {

                                if ($('#chck_apli_catigo').is(':checked') == false) {

                                    $('#time_ini_cast1').attr('disabled', true);
                                    $('#time_ini_cast1').val('00:00');
                                    $('#time_ini_cast2').attr('disabled', true);
                                    $('#time_ini_cast2').val('00:00');
                                    $('#time_ini_cast3').attr('disabled', true);
                                    $('#time_ini_cast3').val('00:00');
                                    $('#time_fin_cast1').attr('disabled', true);
                                    $('#time_fin_cast1').val('00:00');
                                    $('#time_fin_cast2').attr('disabled', true);
                                    $('#time_fin_cast2').val('00:00');
                                    $('#time_apli_cast1').attr('disabled', true);
                                    $('#time_apli_cast1').val('00:00');
                                    $('#time_apli_cast2').attr('disabled', true);
                                    $('#time_apli_cast2').val('00:00');
                                    $('#time_apli_cast3').attr('disabled', true);
                                    $('#time_apli_cast3').val('00:00');

                                } if ($('#chck_apli_catigo').is(':checked') == true) {

                                    $('#time_ini_cast1').attr('disabled', false);
                                    $('#time_ini_cast2').attr('disabled', false);
                                    $('#time_ini_cast3').attr('disabled', false);
                                    $('#time_fin_cast1').attr('disabled', false);
                                    $('#time_fin_cast2').attr('disabled', false);
                                    $('#time_apli_cast1').attr('disabled', false);
                                    $('#time_apli_cast2').attr('disabled', false);
                                    $('#time_apli_cast3').attr('disabled', false);


                                }
                            });
                            if ($('#chck_apli_catigo').is(':checked') == false) {

                                $('#time_ini_cast1').attr('disabled', true);
                                $('#time_ini_cast1').val('00:00');
                                $('#time_ini_cast2').attr('disabled', true);
                                $('#time_ini_cast2').val('00:00');
                                $('#time_ini_cast3').attr('disabled', true);
                                $('#time_ini_cast3').val('00:00');
                                $('#time_fin_cast1').attr('disabled', true);
                                $('#time_fin_cast1').val('00:00');
                                $('#time_fin_cast2').attr('disabled', true);
                                $('#time_fin_cast2').val('00:00');
                                $('#time_apli_cast1').attr('disabled', true);
                                $('#time_apli_cast1').val('00:00');
                                $('#time_apli_cast2').attr('disabled', true);
                                $('#time_apli_cast2').val('00:00');
                                $('#time_apli_cast3').attr('disabled', true);
                                $('#time_apli_cast3').val('00:00');

                            }


                            $('#time_apli_cast1').on('change', function () {
                                var _HoraIni = $('#time_ini_cast1').val();
                                var _HoraFin = $('#time_fin_cast1').val();

                                if (_HoraFin == '00:00') {

                                } else if (_HoraFin !== '00:00') {
                                    if (_HoraIni <= _HoraFin) {
                                        return;
                                    } else if (_HoraIni > _HoraFin) {

                                        new PNotify({
                                            title: 'Configuración de Horas Extras',
                                            text: 'Ingrese un Intervalo Correcto del Castigo #1',
                                            type: 'info',
                                            delay: 3000,
                                            styling: 'bootstrap3',
                                        });
                                        $('#time_ini_cast1').val('00:00');
                                        $('#time_fin_cast1').val('00:00');

                                        return;
                                    }
                                }
                            });


                            $('#time_apli_cast2').on('change', function () {
                                var _HoraIni = $('#time_ini_cast2').val();
                                var _HoraFin = $('#time_fin_cast2').val();
                                var _HoraFinAnt = $('#time_fin_cast1').val();

                                if (_HoraFin == '00:00') {

                                } else if (_HoraFin !== '00:00') {
                                    if (_HoraIni <= _HoraFin) {
                                        return;
                                    } else if (_HoraIni > _HoraFin) {

                                        new PNotify({
                                            title: 'Configuración de Horas Extras',
                                            text: 'Ingrese un Intervalo Correcto del Castigo #2',
                                            type: 'info',
                                            delay: 3000,
                                            styling: 'bootstrap3',
                                        });
                                        $('#time_ini_cast2').val('00:00');
                                        $('#time_fin_cast2').val('00:00');
                                        return;
                                    } else if (_HoraIni < _HoraFinAnt) {

                                        new PNotify({
                                            title: 'Configuración de Horas Extras',
                                            text: 'Ingrese un Intervalo Correcto del Castigo #2',
                                            type: 'info',
                                            delay: 3000,
                                            styling: 'bootstrap3',
                                        });
                                        $('#time_ini_cast2').val('00:00');
                                        $('#time_fin_cast2').val('00:00');
                                        return;
                                    }
                                }
                            });

                            $('#time_apli_cast3').on('change', function () {
                                var _HoraIni = $('#time_ini_cast3').val();
                                var _HoraFinAnt = $('#time_fin_cast2').val();

                                if (_HoraIni == '00:00') {

                                } else if (_HoraIni < _HoraFinAnt) {

                                    new PNotify({
                                        title: 'Configuración de Horas Extras',
                                        text: 'Ingrese un Intervalo Correcto del Castigo #3',
                                        type: 'info',
                                        delay: 3000,
                                        styling: 'bootstrap3',
                                    });
                                    $('#time_ini_cast2').val('00:00');
                                    $('#time_ini_cast3').val('00:00');
                                    return;

                                }
                            });


                            /************************************************/


                            if (element.strCoReglaDet == 'TINICAST1') {

                                $('#time_ini_cast1').val(element.strPosibValor);


                            }

                            if (element.strCoReglaDet == 'TINICAST2') {

                                $('#time_ini_cast2').val(element.strPosibValor);



                            }

                            if (element.strCoReglaDet == 'TFINCAST1') {

                                $('#time_fin_cast1').val(element.strPosibValor);



                            }

                            if (element.strCoReglaDet == 'TFINCAST2') {

                                $('#time_fin_cast2').val(element.strPosibValor);


                            }

                            if (element.strCoReglaDet == 'TCASTMAS') {

                                $('#time_ini_cast3').val(element.strPosibValor);


                            }

                            if (element.strCoReglaDet == 'TCASTAPL1') {

                                $('#time_apli_cast1').val(element.strPosibValor);


                            }

                            if (element.strCoReglaDet == 'TCASTAPL2') {

                                $('#time_apli_cast2').val(element.strPosibValor);

                            }

                            if (element.strCoReglaDet == 'TCASTAPL3') {

                                $('#time_apli_cast3').val(element.strPosibValor);

                            }



                            //12.-Bloque A.2.1

                            ///FUNCION CRREADA PARA LLENAR LA TABLA DE CONFIG H.E  => LlenarTablaHE() ,FUERA DEL CARGAR DATOS

                            //13.-Bloque  A.2.2

                            if (element.strCoReglaDet == "FCCD") {

                                if (element.strValorRegla == "1") {

                                    $('#chck_FechaProc').iCheck('check');
                                    $('#chck_FechaReal').iCheck('uncheck');


                                } else if (element.strValorRegla == "0") {



                                    $('#chck_FechaProc').iCheck('uncheck');
                                    $('#chck_FechaReal').iCheck('check');


                                }
                            }

                            if (element.strCoReglaDet == "MCHE") {

                                $('#MetCal').val(element.strPosibValor);
                            }

                            if (element.strCoReglaDet == "MCHE") {

                                $('#MetCal').val(element.strPosibValor);
                            }

                            if (element.strCoReglaDet == "TMEAH") {

                                $('#time_HE_antes_hor').val(element.strPosibValor);
                            }

                            if (element.strCoReglaDet == "TMEDH") {

                                $('#time_HE_despues_hor').val(element.strPosibValor);
                            }

                            if (element.strCoReglaDet == "TMEDNL") {

                                $('#time_HE_durante_diasnolab').val(element.strPosibValor);
                            }

                            if (element.strCoReglaDet == "TMAXHE") {

                                $('#time_Max_HE_Diario').val(element.strPosibValor);
                            }

                            if (element.strCoReglaDet == 'ASUMHDES') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_asu_hora_ultdialab').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_asu_hora_ultdialab').iCheck('uncheck');

                                }
                            }

                            if (element.strCoReglaDet == 'QTREFHE') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_qui_time_refri').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_qui_time_refri').iCheck('uncheck');

                                }
                            }

                            if (element.strCoReglaDet == 'HEAUTOFERI') {

                                if (element.strPosibValor == "1") {

                                    $('#Hab_HE_AutoFer').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#Hab_HE_AutoFer').iCheck('uncheck');

                                }
                            }

                            if (element.strCoReglaDet == 'GENHEDN') {

                                if (element.strPosibValor == "1") {

                                    $('#chck_HE_Diu_Noct').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#chck_HE_Diu_Noct').iCheck('uncheck');

                                }
                            }

                            //14.-Bloque  A.2.2


                            if (element.strCoReglaDet == "HNHI") {

                                var termino = element.strPosibValor;


                                var Inicial = String(termino.substring(0, 1));

                                console.log(Inicial + ' <-->');

                                if (Inicial == '+') {


                                    var datoFinal = String(termino.substring(1, 6));
                                    console.log(datoFinal + ' <-->');

                                    $('#time_HN_HI').val(datoFinal);

                                    $('#time_HN_HI_DIA_SIG').iCheck('check');


                                } else if (Inicial !== '+') {

                                    $('#time_HN_HI').val(element.strPosibValor);

                                    $('#time_HN_HI_DIA_SIG').iCheck('uncheck');

                                }


                            }

                            if (element.strCoReglaDet == "HNHF") {



                                var termino2 = element.strPosibValor;


                                var Inicial2 = String(termino2.substring(0, 1));

                                console.log(Inicial2 + ' <-->');

                                if (Inicial2 == '+') {

                                    var datoFinal2 = String(termino2.substring(1, 6));

                                    console.log(datoFinal2 + ' <-->');

                                    $('#time_HN_HF').val(datoFinal2);

                                    $('#time_HN_HF_DIA_SIG').iCheck('check');


                                } else if (Inicial2 !== '+') {

                                    $('#time_HN_HF').val(element.strPosibValor);

                                    $('#time_HN_HF_DIA_SIG').iCheck('uncheck');

                                }


                            }


                            if (element.strCoReglaDet == 'HNHTRAB') {

                                if (element.strPosibValor == "1") {

                                    $('#time_HN_HT').iCheck('check');

                                } else if (element.strPosibValor == "0") {

                                    $('#time_HN_HT').iCheck('uncheck');

                                }
                            }

                            //15.-Bloque  A.3.1
                            if (element.strCoReglaDet == "AHE") {

                                $('#MetCalc').val(element.strPosibValor);
                            }
                            if (element.strCoReglaDet == 'PAHECOMP') {


                                if (element.strPosibValor == "1") {

                                    $('#chk_priori_change').iCheck('check');

                                    $('#chk_priori_change_A').iCheck('UNcheck');


                                } else if (element.strPosibValor == "0") {

                                    $('#chk_priori_change_A').iCheck('check');
                                    $('#chk_priori_change').iCheck('UNcheck');


                                }



                            }




                        });



                        if ($('#time_HN_HI').val() == '00:00' && $('#time_HN_HF').val() == '00:00' && $('#time_HN_HF_DIA_SIG').is(':checked') == false && $('#time_HN_HI_DIA_SIG').is(':checked') == false && $('#time_HN_HT').is(':checked') == false) {


                            $('#CHCK_BLOQUEO_CONFIG_HOR').iCheck('uncheck');

                            $('#time_HN_HI').attr('disabled', true);
                            $('#time_HN_HI_DIA_SIG').attr('disabled', true);
                            $('#time_HN_HF').attr('disabled', true);
                            $('#time_HN_HF_DIA_SIG').attr('disabled', true);
                            $('#time_HN_HT').attr('disabled', true);
                        } else

                            if ($('#time_HN_HI').val() !== '00:00' || $('#time_HN_HF').val() !== '00:00' || $('#time_HN_HF_DIA_SIG').is(':checked') == true || $('#time_HN_HI_DIA_SIG').is(':checked') == true || $('#time_HN_HT').is(':checked') == true) {


                                $('#CHCK_BLOQUEO_CONFIG_HOR').iCheck('check');



                            }


                    });



                $('#chck_cons_fer_hor').on('ifChanged', function () {


                    if ($('#chck_cons_fer_hor').is(':checked') == true) {

                        $('#ConsFal').attr('disabled', false);

                    }


                    if ($('#chck_cons_fer_hor').is(':checked') == false) {


                        $('#ConsFal').iCheck('uncheck');
                        $('#ConsFal').attr('disabled', true);


                    }



                });




                $('#CHCK_BLOQUEO_CONFIG_HOR').on('ifChanged', function () {



                    if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == false) {

                        $('#time_HN_HI').attr('disabled', true);
                        $('#time_HN_HI_DIA_SIG').attr('disabled', true);
                        $('#time_HN_HF').attr('disabled', true);
                        $('#time_HN_HF_DIA_SIG').attr('disabled', true);
                        $('#time_HN_HT').attr('disabled', true);


                        $('#time_HN_HI').val('00:00');
                        $('#time_HN_HI_DIA_SIG').iCheck('uncheck');
                        $('#time_HN_HF').val('00:00');
                        $('#time_HN_HF_DIA_SIG').iCheck('uncheck');
                        $('#time_HN_HT').iCheck('uncheck');


                    } else if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == true) {

                        $('#time_HN_HI').attr('disabled', false);
                        $('#time_HN_HI_DIA_SIG').attr('disabled', false);
                        $('#time_HN_HF').attr('disabled', false);
                        $('#time_HN_HF_DIA_SIG').attr('disabled', false);
                        $('#time_HN_HT').attr('disabled', false);


                    }

                });

            }


        });




}

function LlenarTablaHE() {
    var DetalleHorasExtras = new Array();

    class DetalleConfigHoras {
        constructor(intIdRegNegHE, HorarioNorm, HorarioNoct, TipoDia, strHorarioNorm, strHorarioNoct, strTipoDia, TimeConfigHE, clave) {

            this.intIdRegNegHE = intIdRegNegHE
            this.HorarioNorm = HorarioNorm
            this.HorarioNoct = HorarioNoct
            this.TipoDia = TipoDia
            this.strHorarioNorm = strHorarioNorm
            this.strHorarioNoct = strHorarioNoct
            this.strTipoDia = strTipoDia
            this.TimeConfigHE = TimeConfigHE
            this.clave = clave


        }

    }


    var d = new Date();
    var n = d.getTime()



    var IDREGNEG = $('#IdRegNeg').val();

    $.post(
        '/Asistencia/ObtenerRegistroReglaNedocioConfigHE',
        { intIdReglaNeg: IDREGNEG },
        (response) => {

            console.log(response);
            response.forEach(element => {


                DetalleHorasExtras.push(new DetalleConfigHoras(element.intIdRegNegHE, element.intIdConceptoDiurno, element.intIdConceptoNocturno, element.intTipoDia, element.strDesConcepto1, element.strDesConcepto2, element.strTipoDia, element.timeTiempo, n));

                n = n + 2;

                if (typeof _varTablaConfigHECD !== 'undefined') {
                    _varTablaConfigHECD.destroy();
                }


                _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'strTipoDia' },
                        { data: 'strHorarioNorm' },
                        { data: 'strHorarioNoct' },
                        { data: 'TimeConfigHE' },
                        { data: null },
                        { data: 'clave' },


                    ],
                    order: [],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: 'No hay Items para mostrar',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas
                        {
                            targets: [0],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [1],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [2],
                            visible: false,
                            searchable: false
                        },

                        {
                            targets: [7],
                            data: null,
                            defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                        },
                        {
                            targets: [8],
                            visible: false,
                            searchable: false
                        }
                    ],

                });

                if (typeof _varTablaConfigHECDD !== 'undefined') {
                    _varTablaConfigHECDD.destroy();
                }


                _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'TimeConfigHE' },
                        { data: 'intIdRegNegHE' },
                        { data: 'TimeConfigHE' },



                    ],
                    order: [],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas


                        {
                            targets: [5],
                            visible: false,
                            searchable: false
                        }
                    ],

                });


            });


            $('#Config_Detalle_HESSS  tbody').on('click', 'tr input.btn-delete', function () {




                var data = $(this).parents('li').next().html();


                for (var i = 0; i < DetalleHorasExtras.length; i++) {

                    if (DetalleHorasExtras[i].clave == data * 1) {

                        DetalleHorasExtras.splice(i, 1);
                        //var claveInter = DetalleHorasExtras[i].clave;

                        //if (claveInter == detalleHoras[i].clave) {

                        //    detalleHoras.splice(i, 1);

                        //}
                    }

                }





                var data2 = $(this).parents('td').next().html();


                for (var i = 0; i < DetalleHorasExtras.length; i++) {

                    if (DetalleHorasExtras[i].clave == data2 * 1) {

                        DetalleHorasExtras.splice(i, 1);
                        //////var claveInter = n;

                        //////if (claveInter == DetalleHorasExtras[i].clave) {

                        //////    detalleHoras.splice(i, 1);

                        //////}
                    }
                }


                if (typeof _varTablaConfigHECD !== 'undefined') {
                    _varTablaConfigHECD.destroy();
                }


                _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'strTipoDia' },
                        { data: 'strHorarioNorm' },
                        { data: 'strHorarioNoct' },
                        { data: 'TimeConfigHE' },
                        { data: null },
                        { data: 'clave' },


                    ],
                    order: [],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas
                        {
                            targets: [0],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [1],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [2],
                            visible: false,
                            searchable: false
                        },

                        {
                            targets: [7],
                            data: null,
                            defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                        },
                        {
                            targets: [8],
                            visible: false,
                            searchable: false
                        }
                    ],

                });



                if (typeof _varTablaConfigHECDD !== 'undefined') {
                    _varTablaConfigHECDD.destroy();
                }


                _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'TimeConfigHE' },
                        { data: 'intIdRegNegHE' },
                        { data: 'TimeConfigHE' },



                    ],
                    order: [],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas


                        {
                            targets: [5],
                            visible: false,
                            searchable: false
                        }
                    ],

                });




            });



        });

    console.log(DetalleHorasExtras);


    ///Despues de Listado
    $('#UsoTolera').on('change', function () {
        var TipoDiaV = $('#UsoTolera option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'REGNEG', strSubGrupo: 'HE' },
            (response) => {
                $('#strTipoDiaV').empty();
                response.forEach(element => {


                    if (element.intidTipo == TipoDiaV) {

                        $('#strTipoDiaV').val(element.strDeTipo);


                    }


                });

            });
    });

    $('#chck_no_time').on('ifChanged', function () {

        if ($('#chck_no_time').is(':checked') == true) {

            $('#time_config_he').attr('disabled', true);
            $('#time_config_he').val('00:00');

        } else if ($('#chck_no_time').is(':checked') == false) {

            $('#time_config_he').attr('disabled', false);


        }
    });
    var escape_delete = 0;
    $('#btn_save_congig_he').on('click', function () {


        var HorarioNormV = $('#HorasExtras option:selected').val();
        var HorarioNoctV = $('#HorasExtrase option:selected').val();
        var TipoDiaV = $('#UsoTolera option:selected').val();
        var TimeConfigHEV = $('#time_config_he').val();

        var d = new Date();
        var n = d.getTime()

        if (!$('#chck_no_time').is(':checked') && TimeConfigHEV == '00:00') {
            new PNotify({
                title: 'Regla de Negocio',
                text: 'Ingrese un tiempo',
                type: 'info',
                delay: 1000,
                styling: 'bootstrap3',
                addclass: 'dark'

            });
            return;
        }

        if (TipoDiaV == 'Seleccione') {
            new PNotify({
                title: 'Regla de Negocio',
                text: 'Seleccione un Tipo de día',
                type: 'info',
                delay: 1000,
                styling: 'bootstrap3',
                addclass: 'dark'

            });
            return;
        }

        if (HorarioNormV == 'Seleccione' || TipoDiaV == 'Seleccione' || TimeConfigHEV == '00:00') {

            if ($('#chck_no_time').is(':checked') == true) {

            } else if ($('#chck_no_time').is(':checked') == false) {

                new PNotify({
                    title: 'Regla de Negocio',
                    text: 'Llene los campos Obligatorios',
                    type: 'info',
                    delay: 1000,
                    styling: 'bootstrap3',
                    addclass: 'dark'

                });
                return;
            }
        }

        if (HorarioNormV == 'Seleccione') {

            new PNotify({
                title: 'Regla de Negocio',
                text: 'Seleccione un Horario Normal',
                type: 'info',
                delay: 1000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;

        }

        class DetalleConfigHoras {
            constructor(intIdRegNegHE, HorarioNorm, HorarioNoct, TipoDia, strHorarioNorm, strHorarioNoct, strTipoDia, TimeConfigHE, clave) {

                this.intIdRegNegHE = intIdRegNegHE
                this.HorarioNorm = HorarioNorm
                this.HorarioNoct = HorarioNoct
                this.TipoDia = TipoDia
                this.strHorarioNorm = strHorarioNorm
                this.strHorarioNoct = strHorarioNoct
                this.strTipoDia = strTipoDia
                this.TimeConfigHE = TimeConfigHE
                this.clave = clave


            }

        }

        //DetalleHorasExtras.filter(function (dato) {

        //    //if (_bitDiaSiq == false) {

        //    if (TipoDiaV == dato.TipoDia && dato.TimeConfigHE == '00:00') {

        //        //if (TimeConfigHE == '00:00') {

        //        //    if (MiniFin > MiniIni) {

        //        //    } else if (MiniIni > MiniFin) {
        //        //        Notify = 1;
        //        //        Valdes = 2;


        //        //        return;

        //        //    }

        //        //}

        //    }

        //});

        $('#strsalir').empty();

        for (var i = 0; i < DetalleHorasExtras.length; i++) {

            if (DetalleHorasExtras[i].TipoDia == TipoDiaV) {

                if (DetalleHorasExtras[i].TimeConfigHE !== '00:00') {
                } else if (DetalleHorasExtras[i].TimeConfigHE == '00:00') {

                    new PNotify({
                        title: 'Regla de Negocio',
                        text: 'Intervalo anterior Indefinido',
                        type: 'info',
                        delay: 1000,
                        styling: 'bootstrap3'

                    });
                    return;
                }
            }
        }

        var exit = false
        DetalleHorasExtras.forEach(x => {
            if (x.TipoDia == TipoDiaV && x.HorarioNorm == HorarioNormV) {
                new PNotify({
                    title: 'Regla de Negocio',
                    text: 'El horario ya fue asignado al tipo de día',
                    type: 'info',
                    delay: 1000,
                    styling: 'bootstrap3'
                });
                exit = true;
            }
        })
        if (exit) {
            return;
        }


        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGHEXTRAS', intIdFiltroGrupo: 0, strGrupo: '', strSubGrupo: '' },
            (response) => {


                response.forEach(element => {

                    if (element.intidTipo == HorarioNormV) {

                        $('#strHorarioNormV').val(element.strDeTipo);



                    } if (element.intidTipo == HorarioNoctV) {

                        $('#strHorarioNoctV').val(element.strDeTipo);



                    }

                });

                var strHorarioNormV = $('#strHorarioNormV').val();
                var strHorarioNoctV = $('#strHorarioNoctV').val();
                if ($("#HorasExtrase").val() == "Seleccione") {
                    strHorarioNoctV = ""
                }
                var strTipoDiaV = $('#strTipoDiaV').val();

                DetalleHorasExtras.push(new DetalleConfigHoras(null, HorarioNormV, HorarioNoctV, TipoDiaV, strHorarioNormV, strHorarioNoctV, strTipoDiaV, TimeConfigHEV, n));




                if (typeof _varTablaConfigHECD !== 'undefined') {
                    _varTablaConfigHECD.destroy();
                }


                _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'strTipoDia' },
                        { data: 'strHorarioNorm' },
                        { data: 'strHorarioNoct' },
                        { data: 'TimeConfigHE' },
                        { data: null },
                        { data: 'clave' },


                    ],
                    order: [],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas
                        {
                            targets: [0],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [1],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [2],
                            visible: false,
                            searchable: false
                        },

                        {
                            targets: [7],
                            data: null,
                            defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                        },
                        {
                            targets: [8],
                            visible: false,
                            searchable: false
                        }
                    ],

                });



                if (typeof _varTablaConfigHECDD !== 'undefined') {
                    _varTablaConfigHECDD.destroy();
                }


                _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'TimeConfigHE' },
                        { data: 'intIdRegNegHE' },
                        { data: 'TimeConfigHE' },



                    ],
                    order: [],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas


                        {
                            targets: [5],
                            visible: false,
                            searchable: false
                        }
                    ],

                });



            });




        $('#Config_Detalle_HESSS  tbody').on('click', 'tr input.btn-delete', function () {





            var data = $(this).parents('li').next().html();


            for (var i = 0; i < DetalleHorasExtras.length; i++) {

                if (DetalleHorasExtras[i].clave == data * 1) {

                    DetalleHorasExtras.splice(i, 1);
                    //var claveInter = DetalleHorasExtras[i].clave;

                    //if (claveInter == detalleHoras[i].clave) {

                    //    detalleHoras.splice(i, 1);

                    //}
                }

            }





            var data2 = $(this).parents('td').next().html();


            for (var i = 0; i < DetalleHorasExtras.length; i++) {

                if (DetalleHorasExtras[i].clave == data2 * 1) {

                    DetalleHorasExtras.splice(i, 1);
                    //////var claveInter = n;

                    //////if (claveInter == DetalleHorasExtras[i].clave) {

                    //////    detalleHoras.splice(i, 1);

                    //////}
                }
            }



            if (typeof _varTablaConfigHECD !== 'undefined') {
                _varTablaConfigHECD.destroy();
            }


            _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                data: DetalleHorasExtras,
                columns: [

                    { data: 'HorarioNorm' },
                    { data: 'HorarioNoct' },
                    { data: 'TipoDia' },
                    { data: 'strTipoDia' },
                    { data: 'strHorarioNorm' },
                    { data: 'strHorarioNoct' },
                    { data: 'TimeConfigHE' },
                    { data: null },
                    { data: 'clave' },


                ],
                order: [],
                sDom: '',
                responsive: true,
                language: {
                    lengthMenu: '',
                    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                    infoEmpty: 'No hay Items para mostrar',
                    search: '',
                    sSearchPlaceholder: '',
                    zeroRecords: '',
                    infoFiltered: '',
                    paginate: {
                        previous: 'Anterior',
                        next: 'Siguiente'
                    }
                },
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [0],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [1],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [2],
                        visible: false,
                        searchable: false
                    },

                    {
                        targets: [7],
                        data: null,
                        defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                    },
                    {
                        targets: [8],
                        visible: false,
                        searchable: false
                    }
                ],

            });



            if (typeof _varTablaConfigHECDD !== 'undefined') {
                _varTablaConfigHECDD.destroy();
            }


            _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                data: DetalleHorasExtras,
                columns: [

                    { data: 'HorarioNorm' },
                    { data: 'HorarioNoct' },
                    { data: 'TipoDia' },
                    { data: 'TimeConfigHE' },
                    { data: 'intIdRegNegHE' },
                    { data: 'TimeConfigHE' },



                ],
                order: [],
                sDom: '',
                responsive: true,
                language: {
                    lengthMenu: '',
                    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                    infoEmpty: 'No hay Items para mostrar',
                    search: '',
                    sSearchPlaceholder: '',
                    zeroRecords: '',
                    infoFiltered: '',
                    paginate: {
                        previous: 'Anterior',
                        next: 'Siguiente'
                    }
                },
                columnDefs: [//ocultar y definir columnas


                    {
                        targets: [5],
                        visible: false,
                        searchable: false
                    }
                ],

            });




        });





    });



    $('#btn-delete-all').on('click', function () {

        if (DetalleHorasExtras.length > 0) {


            swal({
                title: "Eliminar Configuraciones ",
                text: "¿Está seguro de eliminar Todas las Configuraciones'?",
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, eliminar",
                cancelButtonText: "No, cancelar",
            }).then(function (isConfirm) {
                if (isConfirm) {


                    DetalleHorasExtras.length = 0;

                    if (typeof _varTablaConfigHECD !== 'undefined') {
                        _varTablaConfigHECD.destroy();
                    }


                    _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                        data: DetalleHorasExtras,
                        columns: [

                            { data: 'HorarioNorm' },
                            { data: 'HorarioNoct' },
                            { data: 'TipoDia' },
                            { data: 'strHorarioNorm' },
                            { data: 'strHorarioNoct' },
                            { data: 'strTipoDia' },
                            { data: 'TimeConfigHE' },
                            { data: null },
                            { data: 'clave' },


                        ],
                        order: [],
                        sDom: '',
                        responsive: true,
                        language: {
                            lengthMenu: '',
                            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                            infoEmpty: 'No hay Items para mostrar',
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                        columnDefs: [//ocultar y definir columnas
                            {
                                targets: [0],
                                visible: false,
                                searchable: false
                            },
                            {
                                targets: [1],
                                visible: false,
                                searchable: false
                            },
                            {
                                targets: [2],
                                visible: false,
                                searchable: false
                            },

                            {
                                targets: [7],
                                data: null,
                                defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                            },
                            {
                                targets: [8],
                                visible: false,
                                searchable: false
                            }
                        ],

                    });



                    if (typeof _varTablaConfigHECDD !== 'undefined') {
                        _varTablaConfigHECDD.destroy();
                    }


                    _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                        data: DetalleHorasExtras,
                        columns: [

                            { data: 'HorarioNorm' },
                            { data: 'HorarioNoct' },
                            { data: 'TipoDia' },
                            { data: 'TimeConfigHE' },
                            { data: 'intIdRegNegHE' },
                            { data: 'TimeConfigHE' },



                        ],
                        order: [],
                        sDom: '',
                        responsive: true,
                        language: {
                            lengthMenu: '',
                            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                            infoEmpty: 'No hay Items para mostrar',
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                        columnDefs: [//ocultar y definir columnas


                            {
                                targets: [5],
                                visible: false,
                                searchable: false
                            }
                        ],

                    });


                    return;

                } else {
                    swal("Cancelado", "La Operación fue cancelada", "error");
                }
            });


        } else if (DetalleHorasExtras.length == 0) {

        }

    });





}

function CamposAdicionalesReglaNegocio() {

    $.post(
        '/Asistencia/CamposAdicionales',
        { strEntidad: 'TGREGLANEG' },
        (response) => {

            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}

var _varTablaConfigHE;

var _varTablaConfigHES;

$('#btn-new-ReglaNegocio').click('click', function () {
    validarSession()
    $('.form-hide-ReglaNegocio').show();
    $('#btn-update-ReglaNegocio').hide();
    $('#btn-save-change-ReglaNegocio').show();
    var escape_delete = 0;
    $.post(
        '/Asistencia/NuevoReglaNegocio',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-ReglaNegocio .x_content').empty();
                $('.form-hide-ReglaNegocio .x_content').html(response);
                $('.form-hide-ReglaNegocio').show();

                init_checkBox_styles();
                init_SmartWizard();

                var DetalleHorasExtras = new Array();
            }
            var intidRegNeg = 0;

            $.post(
                '/Asistencia/ObtenerRegistroReglaNedocio',
                { intIdReglaNeg: intidRegNeg },
                (response) => {
                    console.log(response);
                    response.forEach(element => {


                        // 1.-Bloque  A.1.1
                        if (element.strCoReglaDet == 'AVPM') {

                            if (element.strPosibValor == "true") {

                                $('#chck_valid_pri_marca').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_valid_pri_marca').iCheck('uncheck');

                            }
                        }


                        if (element.strCoReglaDet == 'PVALIDREF') {

                            if (element.strPosibValor == "true") {

                                $('#chck_valid_marca_refri').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_valid_marca_refri').iCheck('uncheck');

                            }
                        }


                        if (element.strCoReglaDet == 'PASMAREF') {

                            if (element.strPosibValor == "true") {

                                $('#chck_asumir_Marcar_MI').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_asumir_Marcar_MI').iCheck('uncheck');

                            }
                        }

                        //2.-Bloque A.1.1


                        if (element.strCoReglaDet == 'TMINHTREF') {


                            $('#TimeMinHTDsctRefri').val(element.strPosibValor);

                        }


                        if (element.strCoReglaDet == 'TVALIDREF') {


                            $('#TimeMinValidMarCRefri').val(element.strPosibValor);

                        }


                        if (element.strCoReglaDet == 'TREFDIADES') {


                            $('#TimeDsctRefriDiaDesca').val(element.strPosibValor);

                        }

                        //3.-Bloque A.1.1

                        if (element.strCoReglaDet == 'ABO') {

                            if (element.strPosibValor == "true") {

                                $('#chck_Valida_Bon').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_Valida_Bon').iCheck('uncheck');

                            }
                        }


                        if (element.strCoReglaDet == 'DINIPLANHO') {

                            if (element.strPosibValor == "true") {

                                $('#chck_config_dia_ini').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_config_dia_ini').iCheck('uncheck');
                            }
                        }


                        if (element.strCoReglaDet == 'ASIGM') {

                            if (element.strPosibValor == "true") {

                                $('#Vali_Asig_marc').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#Vali_Asig_marc').iCheck('uncheck');

                            }
                        }


                        if (element.strCoReglaDet == 'PEXCEP') {

                            if (element.strPosibValor == "true") {

                                $('#Cons_Exc_SinCargo').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#Cons_Exc_SinCargo').iCheck('uncheck');

                            }
                        }


                        if (element.strCoReglaDet == 'FSH') {

                            if (element.strPosibValor == "true") {

                                $('#chck_cons_fer_hor').iCheck('check');

                            }
                            else if (element.strPosibValor == "false") {

                                $('#chck_cons_fer_hor').iCheck('uncheck');
                            }
                        }


                        $('#chck_cons_fer_hor').on('ifchange', function () {



                            if ($('#chck_cons_fer_hor').is(':checked') == false) {

                                $('#ConsFal').attr('disabled', true);

                                $('#ConsFal').iCheck('uncheck');

                            } if ($('#chck_cons_fer_hor').is(':checked') == true) {

                                $('#ConsFal').attr('disabled', false);


                            }

                        });

                        if ($('#chck_cons_fer_hor').is(':checked') == false) {

                            $('#ConsFal').attr('disabled', true);

                            $('#ConsFal').iCheck('uncheck');

                        } if ($('#chck_cons_fer_hor').is(':checked') == true) {

                            $('#ConsFal').attr('disabled', false);


                        }





                        if (element.strCoReglaDet == 'FEF') {

                            if (element.strPosibValor == "true") {

                                $('#ConsFal').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#ConsFal').iCheck('uncheck');

                            }
                        }


                        //4.-Bloque A.1.2


                        if (element.strCoReglaDet == 'TING') {

                            if (element.strPosibValor == "true") {

                                $('#chck_Tar_Ing_Tole').iCheck('check');
                                $('#chck_Tar_Tole').iCheck('uncheck');


                            } else if (element.strPosibValor == "false") {


                                $('#chck_Tar_Tole').iCheck('check');
                                $('#chck_Tar_Ing_Tole').iCheck('UNcheck');



                            }
                        }


                        if (element.strCoReglaDet == 'TREF') {

                            if (element.strPosibValor == "true") {

                                $('#chck_Tar_Refr_Tole').iCheck('check');
                                $('#chck_Tar_Tole_xd').iCheck('uncheck');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_Tar_Refr_Tole').iCheck('check');
                                $('#chck_Tar_Tole_xd').iCheck('uncheck');

                            }

                        }

                        //5.-Bloque A.1.2

                        if (element.strCoReglaDet == 'TIPOTOL') {

                            if (element.strPosibValor == "true") {

                                $('#chck_PorSemana').iCheck('check');
                                $('#chck_PorPeriodo').iCheck('uncheck');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_PorPeriodo').iCheck('check');
                                $('#chck_PorSemana').iCheck('uncheck');

                            }
                        }

                        if (element.strCoReglaDet == 'FORMTOL') {

                            $('#UsoTole').val(element.strPosibValor);
                            $('#UsoTole').on('change', function () {

                                var VARI = $('#UsoTole').val();

                                if (VARI == 107) {

                                    $('#change_state_TipoTole').html('<input type="time" id="DscTole" class="form-control" min="00:00" max="24:00" accept="hh:mm" value="00:00">');

                                } else if (VARI == 108) {

                                    $('#change_state_TipoTole').html('<input type="number" id="DscTole" class="form-control" min="0" value="0">');


                                }

                            });

                            var VARI = $('#UsoTole').val();

                            if (VARI == 107) {

                                $('#change_state_TipoTole').html('<input type="time" id="DscTole" class="form-control" min="00:00" max="24:00" accept="hh:mm" value="00:00">');

                            } else if (VARI == 108) {

                                $('#change_state_TipoTole').html('<input type="number" id="DscTole" class="form-control" min="0" value="0">');


                            }
                        }

                        if (element.strCoReglaDet == 'TMAXTOL') {
                            //$('#DscTole').val(element.strPosibValor);
                            $('#DscTole').val("00:00");
                        }

                        if (element.strCoReglaDet == 'GENTOLTAR') {

                            if (element.strPosibValor == "on") {

                                $('#chck_GeneTar_MaxTol').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_GeneTar_MaxTol').iCheck('uncheck');

                            }
                        }

                        //6.-Bloque A.1.2

                        if (element.strCoReglaDet == 'CJD') {

                            if (element.strPosibValor == "true") {

                                $('#ConsAusJustDiaria').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#ConsAusJustDiaria').iCheck('uncheck');

                            }
                        }

                        if (element.strCoReglaDet == 'CDF') {

                            if (element.strPosibValor == "true") {

                                $('#ConsFeriSinAsis').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#ConsFeriSinAsis').iCheck('uncheck');

                            }
                        }

                        if (element.strCoReglaDet == 'HTDOM') {

                            if (element.strPosibValor > '00:00') {

                                $('#chk_cons_dom').iCheck('check');

                            } else if (element.strPosibValor == '00:00') {

                                $('#chk_cons_dom').iCheck('uncheck');

                            }


                            $('#time_chk_cons_dom').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TMAXREF') {



                            if (element.strPosibValor > '00:00') {

                                $('#chck_con_refr_max').iCheck('check');

                            } else if (element.strPosibValor == '00:00') {

                                $('#chck_con_refr_max').iCheck('uncheck');

                            }

                            $('#time_chck_con_refr_max').val(element.strPosibValor);


                        }

                        if (element.strCoReglaDet == 'TCASTMIREF') {


                            if (element.strPosibValor > '00:00') {

                                $('#chck_dsct_no_marcar').iCheck('check');

                            } else if (element.strPosibValor == '00:00') {

                                $('#chck_dsct_no_marcar').iCheck('uncheck');

                            }


                            $('#time_chck_dsct_no_marcar').val(element.strPosibValor);

                        }


                        //7.-Bloque A.1.3

                        if (element.strCoReglaDet == 'TMAH') {

                            $('#time_min_antes_hor').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TMDH') {

                            $('#time_min_despues_hor').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TMDNL') {

                            $('#time_min_durante_diaslab').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'PHAJUST') {

                            if (element.strPosibValor == "true") {

                                $('#chck_dias_just').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_dias_just').iCheck('uncheck');

                            }
                        }

                        if (element.strCoReglaDet == 'PREF') {

                            if (element.strPosibValor == "true") {

                                $('#chck_per_refr').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_per_refr').iCheck('uncheck');

                            }
                        }

                        if (element.strCoReglaDet == 'TMREF') {

                            $('#time_chck_per_refr').val(element.strPosibValor);
                        }

                        //8.-Bloque A.1.3

                        if (element.strCoReglaDet == 'DTR') {

                            $('#Time_TE_ConsiDTrab').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TMHADT') {

                            $('#Time_HA_Efect_ConsDT').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'ADTRAB') {

                            $('#chck_Sabado').iCheck('uncheck');
                            $('#chck_Domingo').iCheck('uncheck');
                            $('#chck_DiaFer').iCheck('uncheck');
                            $('#chck_DiaDesc').iCheck('uncheck');

                            if (element.strPosibValor.includes('SAB') == true) {

                                $('#chck_Sabado').iCheck('check');

                            } if (element.strPosibValor.includes('DOM') == true) {

                                $('#chck_Domingo').iCheck('check');

                            } if (element.strPosibValor.includes('FER') == true) {

                                $('#chck_DiaFer').iCheck('check');

                            } if (element.strPosibValor.includes('DESC') == true) {

                                $('#chck_DiaDesc').iCheck('check');

                            }

                        }



                        //9.-Bloque A.1.4

                        if (element.strCoReglaDet == 'CHORARIO') {

                            if (element.strPosibValor == "true") {

                                $('#chck_Con_Hor').iCheck('check');
                                $('#chck_Sin_Hor').iCheck('uncheck');


                            } else if (element.strPosibValor == "false") {

                                $('#chck_Con_Hor').iCheck('uncheck');
                                $('#chck_Sin_Hor').iCheck('check');

                            }
                        }


                        if (element.strCoReglaDet == 'TRABAMA') {

                            if (element.strPosibValor == "true") {

                                $('#chck_trab_amanecida').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_trab_amanecida').iCheck('uncheck');

                            }
                        }


                        if (element.strCoReglaDet == 'PTAREOS') {

                            if (element.strPosibValor == "true") {

                                $('#chck_proc_tareo').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_proc_tareo').iCheck('uncheck');

                            }
                        }

                        //10.-Bloque A.1.4

                        if (element.strCoReglaDet == 'HGESMIREF') {

                            if (element.strPosibValor == "true") {

                                $('#chck_marc_incom_refr').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_marc_incom_refr').iCheck('uncheck');

                            }
                        }


                        if (element.strCoReglaDet == 'THOLINIREF') {

                            $('#time_ini_chck_marc_incom_refr').val(element.strPosibValor);

                        }


                        if (element.strCoReglaDet == 'THOLFINREF') {

                            $('#time_fin_chck_marc_incom_refr').val(element.strPosibValor);

                        }

                        //11.-Bloque A.1.4

                        if (element.strCoReglaDet == 'ACASTXTI') {

                            if (element.strPosibValor == "true") {

                                $('#chck_apli_catigo').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_apli_catigo').iCheck('uncheck');

                            }
                        }

                        /************************************************/
                        $('#chck_apli_catigo').on('ifChanged', function () {

                            if ($('#chck_apli_catigo').is(':checked') == false) {

                                $('#time_ini_cast1').attr('disabled', true);
                                $('#time_ini_cast1').val('00:00');
                                $('#time_ini_cast2').attr('disabled', true);
                                $('#time_ini_cast2').val('00:00');
                                $('#time_ini_cast3').attr('disabled', true);
                                $('#time_ini_cast3').val('00:00');
                                $('#time_fin_cast1').attr('disabled', true);
                                $('#time_fin_cast1').val('00:00');
                                $('#time_fin_cast2').attr('disabled', true);
                                $('#time_fin_cast2').val('00:00');
                                $('#time_apli_cast1').attr('disabled', true);
                                $('#time_apli_cast1').val('00:00');
                                $('#time_apli_cast2').attr('disabled', true);
                                $('#time_apli_cast2').val('00:00');
                                $('#time_apli_cast3').attr('disabled', true);
                                $('#time_apli_cast3').val('00:00');

                            } if ($('#chck_apli_catigo').is(':checked') == true) {

                                $('#time_ini_cast1').attr('disabled', false);
                                $('#time_ini_cast2').attr('disabled', false);
                                $('#time_ini_cast3').attr('disabled', false);
                                $('#time_fin_cast1').attr('disabled', false);
                                $('#time_fin_cast2').attr('disabled', false);
                                $('#time_apli_cast1').attr('disabled', false);
                                $('#time_apli_cast2').attr('disabled', false);
                                $('#time_apli_cast3').attr('disabled', false);


                            }
                        });
                        if ($('#chck_apli_catigo').is(':checked') == false) {

                            $('#time_ini_cast1').attr('disabled', true);
                            $('#time_ini_cast1').val('00:00');
                            $('#time_ini_cast2').attr('disabled', true);
                            $('#time_ini_cast2').val('00:00');
                            $('#time_ini_cast3').attr('disabled', true);
                            $('#time_ini_cast3').val('00:00');
                            $('#time_fin_cast1').attr('disabled', true);
                            $('#time_fin_cast1').val('00:00');
                            $('#time_fin_cast2').attr('disabled', true);
                            $('#time_fin_cast2').val('00:00');
                            $('#time_apli_cast1').attr('disabled', true);
                            $('#time_apli_cast1').val('00:00');
                            $('#time_apli_cast2').attr('disabled', true);
                            $('#time_apli_cast2').val('00:00');
                            $('#time_apli_cast3').attr('disabled', true);
                            $('#time_apli_cast3').val('00:00');

                        }


                        $('#time_apli_cast1').on('change', function () {
                            var _HoraIni = $('#time_ini_cast1').val();
                            var _HoraFin = $('#time_fin_cast1').val();

                            if (_HoraFin == '00:00') {

                            } else if (_HoraFin !== '00:00') {
                                if (_HoraIni <= _HoraFin) {
                                    return;
                                } else if (_HoraIni > _HoraFin) {

                                    new PNotify({
                                        title: 'Configuración de Horas Extras',
                                        text: 'Ingrese un Intervalo Correcto del Castigo #1',
                                        type: 'info',
                                        delay: 3000,
                                        styling: 'bootstrap3',
                                    });
                                    $('#time_ini_cast1').val('00:00');
                                    $('#time_fin_cast1').val('00:00');

                                    return;
                                }
                            }
                        });


                        $('#time_apli_cast2').on('change', function () {
                            var _HoraIni = $('#time_ini_cast2').val();
                            var _HoraFin = $('#time_fin_cast2').val();
                            var _HoraFinAnt = $('#time_fin_cast1').val();

                            if (_HoraFin == '00:00') {

                            } else if (_HoraFin !== '00:00') {
                                if (_HoraIni <= _HoraFin) {
                                    return;
                                } else if (_HoraIni > _HoraFin) {

                                    new PNotify({
                                        title: 'Configuración de Horas Extras',
                                        text: 'Ingrese un Intervalo Correcto del Castigo #2',
                                        type: 'info',
                                        delay: 3000,
                                        styling: 'bootstrap3',
                                    });
                                    $('#time_ini_cast2').val('00:00');
                                    $('#time_fin_cast2').val('00:00');
                                    return;
                                } else if (_HoraIni < _HoraFinAnt) {

                                    new PNotify({
                                        title: 'Configuración de Horas Extras',
                                        text: 'Ingrese un Intervalo Correcto del Castigo #2',
                                        type: 'info',
                                        delay: 3000,
                                        styling: 'bootstrap3',
                                    });
                                    $('#time_ini_cast2').val('00:00');
                                    $('#time_fin_cast2').val('00:00');
                                    return;
                                }
                            }
                        });

                        $('#time_apli_cast3').on('change', function () {
                            var _HoraIni = $('#time_ini_cast3').val();
                            var _HoraFinAnt = $('#time_fin_cast2').val();

                            if (_HoraIni == '00:00') {

                            } else if (_HoraIni < _HoraFinAnt) {

                                new PNotify({
                                    title: 'Configuración de Horas Extras',
                                    text: 'Ingrese un Intervalo Correcto del Castigo #3',
                                    type: 'info',
                                    delay: 3000,
                                    styling: 'bootstrap3',
                                });
                                $('#time_ini_cast2').val('00:00');
                                $('#time_ini_cast3').val('00:00');
                                return;

                            }
                        });


                        /************************************************/



                        if (element.strCoReglaDet == 'TINICAST1') {

                            $('#time_ini_cast1').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TINICAST2') {

                            $('#time_ini_cast2').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TFINCAST1') {

                            $('#time_fin_cast1').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TFINCAST2') {

                            $('#time_fin_cast2').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TCASTMAS') {

                            $('#time_ini_cast3').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TCASTAPL1') {

                            $('#time_apli_cast1').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TCASTAPL2') {

                            $('#time_apli_cast2').val(element.strPosibValor);

                        }

                        if (element.strCoReglaDet == 'TCASTAPL3') {

                            $('#time_apli_cast3').val(element.strPosibValor);

                        }

                        //12.-Bloque A.2.1

                        ///FUNCION CRREADA PARA LLENAR LA TABLA DE CONFIG H.E  => LlenarTablaHE() ,FUERA DEL CARGAR DATOS

                        //13.-Bloque  A.2.2

                        if (element.strCoReglaDet == "FCCD") {

                            if (element.strValorRegla == "1") {

                                $('#chck_FechaProc').iCheck('check');
                                $('#chck_FechaReal').iCheck('uncheck');


                            } else if (element.strValorRegla == "0") {



                                $('#chck_FechaProc').iCheck('uncheck');
                                $('#chck_FechaReal').iCheck('check');


                            }
                        }

                        if (element.strCoReglaDet == "MCHE") {

                            $('#MetCal').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == "MCHE") {

                            $('#MetCal').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == "TMEAH") {

                            $('#time_HE_antes_hor').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == "TMEDH") {

                            $('#time_HE_despues_hor').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == "TMEDNL") {

                            $('#time_HE_durante_diasnolab').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == "TMAXHE") {

                            $('#time_Max_HE_Diario').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == 'ASUMHDES') {

                            if (element.strPosibValor == "true") {

                                $('#chck_asu_hora_ultdialab').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_asu_hora_ultdialab').iCheck('uncheck');

                            }
                        }

                        if (element.strCoReglaDet == 'QTREFHE') {

                            if (element.strPosibValor == "true") {

                                $('#chck_qui_time_refri').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_qui_time_refri').iCheck('uncheck');

                            }
                        }

                        if (element.strCoReglaDet == 'HEAUTOFERI') {

                            if (element.strPosibValor == "true") {

                                $('#Hab_HE_AutoFer').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#Hab_HE_AutoFer').iCheck('uncheck');

                            }
                        }

                        if (element.strCoReglaDet == 'GENHEDN') {

                            if (element.strPosibValor == "true") {

                                $('#chck_HE_Diu_Noct').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#chck_HE_Diu_Noct').iCheck('uncheck');

                            }
                        }

                        //14.-Bloque  A.2.2
                        if (element.strCoReglaDet == "HNHI") {

                            $('#time_HN_HI').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == "HNHF") {

                            $('#time_HN_HF').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == 'HNHTRAB') {

                            if (element.strPosibValor == "true") {

                                $('#time_HN_HT').iCheck('check');

                            } else if (element.strPosibValor == "false") {

                                $('#time_HN_HT').iCheck('uncheck');

                            }
                        }

                        //15.-Bloque  A.3.1
                        if (element.strCoReglaDet == "AHE") {

                            $('#MetCalc').val(element.strPosibValor);
                        }
                        if (element.strCoReglaDet == 'PAHECOMP') {


                            if (element.strPosibValor == "true") {

                                $('#chk_priori_change').iCheck('check');

                                $('#chk_priori_change_A').iCheck('UNcheck');


                            } else if (element.strPosibValor == "false") {

                                $('#chk_priori_change_A').iCheck('check');
                                $('#chk_priori_change').iCheck('UNcheck');


                            }



                        }
                        $('#CHCK_BLOQUEO_CONFIG_HOR').iCheck('uncheck');

                        if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == false) {

                            $('#time_HN_HI').attr('disabled', true);
                            $('#time_HN_HI_DIA_SIG').attr('disabled', true);
                            $('#time_HN_HF').attr('disabled', true);
                            $('#time_HN_HF_DIA_SIG').attr('disabled', true);
                            $('#time_HN_HT').attr('disabled', true);


                        } else if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == true) {

                            $('#time_HN_HI').attr('disabled', false);
                            $('#time_HN_HI_DIA_SIG').attr('disabled', false);
                            $('#time_HN_HF').attr('disabled', false);
                            $('#time_HN_HF_DIA_SIG').attr('disabled', false);
                            $('#time_HN_HT').attr('disabled', false);
                        }

                        $('#CHCK_BLOQUEO_CONFIG_HOR').on('ifChanged', function () {



                            if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == false) {

                                $('#time_HN_HI').attr('disabled', true);
                                $('#time_HN_HI_DIA_SIG').attr('disabled', true);
                                $('#time_HN_HF').attr('disabled', true);
                                $('#time_HN_HF_DIA_SIG').attr('disabled', true);
                                $('#time_HN_HT').attr('disabled', true);


                                $('#time_HN_HI').val('00:00');
                                $('#time_HN_HI_DIA_SIG').iCheck('uncheck');
                                $('#time_HN_HF').val('00:00');
                                $('#time_HN_HF_DIA_SIG').iCheck('uncheck');
                                $('#time_HN_HT').iCheck('uncheck');


                            } else if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == true) {

                                $('#time_HN_HI').attr('disabled', false);
                                $('#time_HN_HI_DIA_SIG').attr('disabled', false);
                                $('#time_HN_HF').attr('disabled', false);
                                $('#time_HN_HF_DIA_SIG').attr('disabled', false);
                                $('#time_HN_HT').attr('disabled', false);

                            }

                        });


                    });
                    switcheryLoad();




                });

            $('#UsoTolera').on('change', function () {
                var TipoDiaV = $('#UsoTolera option:selected').val();

                $.post(
                    '/Asistencia/LlenarTipoUM',
                    { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'REGNEG', strSubGrupo: 'HE' },
                    (response) => {
                        $('#strTipoDiaV').empty();
                        response.forEach(element => {


                            if (element.intidTipo == TipoDiaV) {

                                $('#strTipoDiaV').val(element.strDeTipo);


                            }


                        });

                    });
            });

            $('#chck_cons_fer_hor').on('ifChanged', function () {


                if ($('#chck_cons_fer_hor').is(':checked') == true) {

                    $('#ConsFal').attr('disabled', false);

                }


                if ($('#chck_cons_fer_hor').is(':checked') == false) {


                    $('#ConsFal').iCheck('uncheck');
                    $('#ConsFal').attr('disabled', true);


                }



            });

            $('#chck_no_time').on('ifChanged', function () {

                if ($('#chck_no_time').is(':checked') == true) {

                    $('#time_config_he').attr('disabled', true);
                    $('#time_config_he').val('00:00');

                } else if ($('#chck_no_time').is(':checked') == false) {

                    $('#time_config_he').attr('disabled', false);


                }
            });

            $('#btn_save_congig_he').click('click', function () {
                var escape_delete = 0;

                var HorarioNormV = $('#HorasExtras option:selected').val();
                var HorarioNoctV = $('#HorasExtrase option:selected').val();
                var TipoDiaV = $('#UsoTolera option:selected').val();
                var TimeConfigHEV = $('#time_config_he').val();


                if (!$('#chck_no_time').is(':checked') && TimeConfigHEV == '00:00') {
                    new PNotify({
                        title: 'Regla de Negocio',
                        text: 'Ingrese un tiempo',
                        type: 'info',
                        delay: 1000,
                        styling: 'bootstrap3',
                        addclass: 'dark'

                    });
                    return;
                }

                if (TipoDiaV == 'Seleccione') {
                    new PNotify({
                        title: 'Regla de Negocio',
                        text: 'Seleccione un Tipo de día',
                        type: 'info',
                        delay: 1000,
                        styling: 'bootstrap3',
                        addclass: 'dark'

                    });
                    return;
                }

                var d = new Date();
                var n = d.getTime()

                if (HorarioNormV == 'Seleccione' || TipoDiaV == 'Seleccione' || TimeConfigHEV == '00:00') {

                    if ($('#chck_no_time').is(':checked') == true) {

                    } else if ($('#chck_no_time').is(':checked') == false) {

                        new PNotify({
                            title: 'Regla de Negocio',
                            text: 'Llene los campos Obligatorios',
                            type: 'info',
                            delay: 1000,
                            styling: 'bootstrap3',
                            addclass: 'dark'

                        });


                        return;
                    }
                }

                if (HorarioNormV == 'Seleccione') {

                    new PNotify({
                        title: 'Regla de Negocio',
                        text: 'Seleccione un Horario Normal',
                        type: 'info',
                        delay: 1000,
                        styling: 'bootstrap3',
                        addclass: 'dark'
                    });
                    return;

                }

                class DetalleConfigHoras {
                    constructor(intIdRegNegHE, HorarioNorm, HorarioNoct, TipoDia, strHorarioNorm, strHorarioNoct, strTipoDia, TimeConfigHE, clave) {

                        this.intIdRegNegHE = intIdRegNegHE
                        this.HorarioNorm = HorarioNorm
                        this.HorarioNoct = HorarioNoct
                        this.TipoDia = TipoDia
                        this.strHorarioNorm = strHorarioNorm
                        this.strHorarioNoct = strHorarioNoct
                        this.strTipoDia = strTipoDia
                        this.TimeConfigHE = TimeConfigHE
                        this.clave = clave


                    }

                }

                $('#strsalir').empty();


                for (var i = 0; i < DetalleHorasExtras.length; i++) {
                    if (DetalleHorasExtras[i].TipoDia == TipoDiaV) {
                        if (DetalleHorasExtras[i].TimeConfigHE !== '00:00') {
                        } else if (DetalleHorasExtras[i].TimeConfigHE == '00:00') {

                            new PNotify({
                                title: 'Regla de Negocio',
                                text: 'Intervalo anterior Indefinido',
                                type: 'info',
                                delay: 1000,
                                styling: 'bootstrap3'
                            });
                            return;
                        }
                    }
                }


                var exit = false
                DetalleHorasExtras.forEach(x => {
                    if (x.TipoDia == TipoDiaV && x.HorarioNorm == HorarioNormV) {
                        new PNotify({
                            title: 'Regla de Negocio',
                            text: 'El horario ya fue asignado al tipo de día',
                            type: 'info',
                            delay: 1000,
                            styling: 'bootstrap3'
                        });
                        exit = true;
                    }
                })
                if (exit) {
                    return;
                }


                $.post('/Asistencia/LlenarTipoUM',
                    { strEntidad: 'TGHEXTRAS', intIdFiltroGrupo: 0, strGrupo: '', strSubGrupo: '' },
                    (response) => {
                        response.forEach(element => {

                            if (element.intidTipo == HorarioNormV) {

                                $('#strHorarioNormV').val(element.strDeTipo);

                            } if (element.intidTipo == HorarioNoctV) {

                                $('#strHorarioNoctV').val(element.strDeTipo);

                            }

                        });


                        //$.post(
                        //    '/Asistencia/LlenarTipoUM',
                        //    { strEntidad: 'TGHEXTRAS', intIdFiltroGrupo: 0, strGrupo: '', strSubGrupo: '' },
                        //    (response) => {
                        //        response.forEach(element => {{}}

                        var strHorarioNormV = $('#strHorarioNormV').val();
                        var strHorarioNoctV = $('#strHorarioNoctV').val();
                        if ($("#HorasExtrase").val() == "Seleccione") {
                            strHorarioNoctV = ""
                        }
                        var strTipoDiaV = $('#strTipoDiaV').val();

                        DetalleHorasExtras.push(new DetalleConfigHoras(null, HorarioNormV, HorarioNoctV, TipoDiaV, strHorarioNormV, strHorarioNoctV, strTipoDiaV, TimeConfigHEV, n));




                        if (typeof _varTablaConfigHE !== 'undefined') {
                            _varTablaConfigHE.destroy();
                        }


                        _varTablaConfigHE = $('#Config_Detalle_HE').DataTable({
                            data: DetalleHorasExtras,
                            columns: [

                                { data: 'HorarioNorm' },
                                { data: 'HorarioNoct' },
                                { data: 'TipoDia' },
                                { data: 'strTipoDia' },
                                { data: 'strHorarioNorm' },
                                { data: 'strHorarioNoct' },
                                { data: 'TimeConfigHE' },
                                { data: null },
                                { data: 'clave' },


                            ],
                            order: [],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas
                                {
                                    targets: [0],
                                    visible: false,
                                    searchable: false
                                },
                                {
                                    targets: [1],
                                    visible: false,
                                    searchable: false
                                },
                                {
                                    targets: [2],
                                    visible: false,
                                    searchable: false
                                },

                                {
                                    targets: [7],
                                    data: null,
                                    defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                                },
                                {
                                    targets: [8],
                                    visible: false,
                                    searchable: false
                                }
                            ],

                        });



                        if (typeof _varTablaConfigHES !== 'undefined') {
                            _varTablaConfigHES.destroy();
                        }


                        _varTablaConfigHES = $('#Config_Detalle_HES').DataTable({
                            data: DetalleHorasExtras,
                            columns: [

                                { data: 'HorarioNorm' },
                                { data: 'HorarioNoct' },
                                { data: 'TipoDia' },
                                { data: 'TimeConfigHE' },
                                { data: 'TimeConfigHE' },
                                { data: 'TimeConfigHE' },



                            ],
                            order: [],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas


                                {
                                    targets: [5],
                                    visible: false,
                                    searchable: false
                                }
                            ],

                        });



                    });







                $('#Config_Detalle_HE  tbody').on('click', 'tr .btn-delete', function () {



                    var data = $(this).parents('li').next().html();


                    for (var i = 0; i < DetalleHorasExtras.length; i++) {

                        if (DetalleHorasExtras[i].clave == data * 1) {

                            DetalleHorasExtras.splice(i, 1);
                            //var claveInter = DetalleHorasExtras[i].clave;

                            //if (claveInter == detalleHoras[i].clave) {

                            //    detalleHoras.splice(i, 1);

                            //}
                        }

                    }





                    var data2 = $(this).parents('td').next().html();


                    for (var i = 0; i < DetalleHorasExtras.length; i++) {

                        if (DetalleHorasExtras[i].clave == data2 * 1) {

                            DetalleHorasExtras.splice(i, 1);
                            //////var claveInter = n;

                            //////if (claveInter == DetalleHorasExtras[i].clave) {

                            //////    detalleHoras.splice(i, 1);

                            //////}
                        }
                    }



                    //////var data1 = _varTablaConfigHES.row($(this).parents('tr')).data();



                    ////////if (escape_delete == '0') {
                    //////    for (var i = 0; i < DetalleHorasExtras.length; i++) {

                    //////        if (DetalleHorasExtras[i].clave == data1.clave) {

                    //////            DetalleHorasExtras.splice(i, 1);

                    //////            //escape_delete = 4;

                    //////            return;
                    //////        }
                    //////    }
                    ////////}



                    if (typeof _varTablaConfigHE !== 'undefined') {
                        _varTablaConfigHE.destroy();
                    }


                    _varTablaConfigHE = $('#Config_Detalle_HE').DataTable({
                        data: DetalleHorasExtras,
                        columns: [

                            { data: 'HorarioNorm' },
                            { data: 'HorarioNoct' },
                            { data: 'TipoDia' },
                            { data: 'strTipoDia' },
                            { data: 'strHorarioNorm' },
                            { data: 'strHorarioNoct' },
                            { data: 'TimeConfigHE' },
                            { data: null },
                            { data: 'clave' },


                        ],
                        order: [],
                        sDom: '',
                        responsive: true,
                        language: {
                            lengthMenu: '',
                            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                            infoEmpty: 'No hay Items para mostrar',
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                        columnDefs: [//ocultar y definir columnas
                            {
                                targets: [0],
                                visible: false,
                                searchable: false
                            },
                            {
                                targets: [1],
                                visible: false,
                                searchable: false
                            },
                            {
                                targets: [2],
                                visible: false,
                                searchable: false
                            },

                            {
                                targets: [7],
                                data: null,
                                defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                            },
                            {
                                targets: [8],
                                visible: false,
                                searchable: false
                            }
                        ],

                    });



                    if (typeof _varTablaConfigHES !== 'undefined') {
                        _varTablaConfigHES.destroy();
                    }


                    _varTablaConfigHES = $('#Config_Detalle_HES').DataTable({
                        data: DetalleHorasExtras,
                        columns: [

                            { data: 'HorarioNorm' },
                            { data: 'HorarioNoct' },
                            { data: 'TipoDia' },
                            { data: 'TimeConfigHE' },
                            { data: 'TimeConfigHE' },
                            { data: 'TimeConfigHE' },



                        ],
                        order: [],
                        sDom: '',
                        responsive: true,
                        language: {
                            lengthMenu: '',
                            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                            infoEmpty: 'No hay Items para mostrar',
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                        columnDefs: [//ocultar y definir columnas


                            {
                                targets: [5],
                                visible: false,
                                searchable: false
                            }
                        ],

                    });










                });



            });

            $('#btn-delete-all').on('click', function () {

                if (DetalleHorasExtras.length > 0) {

                    swal({
                        title: "Eliminar Configuraciones ",
                        text: "¿Está seguro de eliminar Todas las Configuraciones'?",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Sí, eliminar",
                        cancelButtonText: "No, cancelar",
                    }).then(function (isConfirm) {
                        if (isConfirm) {


                            DetalleHorasExtras.length = 0;


                            if (typeof _varTablaConfigHE !== 'undefined') {
                                _varTablaConfigHE.destroy();
                            }


                            _varTablaConfigHE = $('#Config_Detalle_HE').DataTable({
                                data: DetalleHorasExtras,
                                columns: [

                                    { data: 'HorarioNorm' },
                                    { data: 'HorarioNoct' },
                                    { data: 'TipoDia' },
                                    { data: 'strTipoDia' },
                                    { data: 'strHorarioNorm' },
                                    { data: 'strHorarioNoct' },
                                    { data: 'TimeConfigHE' },
                                    { data: null },
                                    { data: 'clave' },


                                ],
                                order: [],
                                sDom: '',
                                responsive: true,
                                language: {
                                    lengthMenu: '',
                                    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                    infoEmpty: 'No hay Items para mostrar',
                                    search: '',
                                    sSearchPlaceholder: '',
                                    zeroRecords: '',
                                    infoFiltered: '',
                                    paginate: {
                                        previous: 'Anterior',
                                        next: 'Siguiente'
                                    }
                                },
                                columnDefs: [//ocultar y definir columnas
                                    {
                                        targets: [0],
                                        visible: false,
                                        searchable: false
                                    },
                                    {
                                        targets: [1],
                                        visible: false,
                                        searchable: false
                                    },
                                    {
                                        targets: [2],
                                        visible: false,
                                        searchable: false
                                    },

                                    {
                                        targets: [7],
                                        data: null,
                                        defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                                    },
                                    {
                                        targets: [8],
                                        visible: false,
                                        searchable: false
                                    }
                                ],

                            });



                            if (typeof _varTablaConfigHES !== 'undefined') {
                                _varTablaConfigHES.destroy();
                            }


                            _varTablaConfigHES = $('#Config_Detalle_HES').DataTable({
                                data: DetalleHorasExtras,
                                columns: [

                                    { data: 'HorarioNorm' },
                                    { data: 'HorarioNoct' },
                                    { data: 'TipoDia' },
                                    { data: 'TimeConfigHE' },
                                    { data: 'TimeConfigHE' },
                                    { data: 'TimeConfigHE' },



                                ],
                                order: [],
                                sDom: '',
                                responsive: true,
                                language: {
                                    lengthMenu: '',
                                    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                    infoEmpty: 'No hay Items para mostrar',
                                    search: '',
                                    sSearchPlaceholder: '',
                                    zeroRecords: '',
                                    infoFiltered: '',
                                    paginate: {
                                        previous: 'Anterior',
                                        next: 'Siguiente'
                                    }
                                },
                                columnDefs: [//ocultar y definir columnas


                                    {
                                        targets: [5],
                                        visible: false,
                                        searchable: false
                                    }
                                ],

                            });


                            return;

                        } else {
                            swal("Cancelado", "La Operación fue cancelada", "error");
                        }
                    });


                } else if (DetalleHorasExtras.length == 0) {

                }

            });

            $('#chk_priori_change').on('ifChanged', function () {

                if ($('#chk_priori_change').is(':checked') == true) {

                    $('#Change_state').html('<br /><br />  Prioridad Hora Extra');

                }


                if ($('#chk_priori_change').is(':checked') == false) {

                    $('#Change_state').html('<br /><br />Prioridad Conpensación');

                }
            });


            //MaxCaracteres
            var txtCod = 'strCoRegNeg';
            var txtdes = 'strDesRegNeg';

            $.post(
                '/Organizacion/ListarCaracteresMax',
                { strMaestro: 'TGREGLANEG' },
                (response) => {
                    response.forEach(element => {
                        if (element.strColumnName == txtCod) {
                            $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                        } if (element.strColumnName == txtdes) {
                            $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                        }
                    });
                });

        });


});

$('#btn-save-change-ReglaNegocio').on('click', function () {
    validarSession()
    //Datos Cabecera

    var chckactivo = null;
    if ($('#chk-activo-JO').is(':checked') == false) {
        chckactivo = false;
    } if ($('#chk-activo-JO').is(':checked') == true) {
        chckactivo = true;
    }

    var _UnidadOrg = $('#cboUndOrg option:selected').val();
    var _Codigo = $('#txt_codigo_RN').val();
    var _Descripcion = $('#txt_descripcion_RN').val();
    var _strRegNegCampo1 = $('#strRegNegCampo1').val();
    var _strRegNegCampo2 = $('#strRegNegCampo2').val();
    var _strRegNegCampo3 = $('#strRegNegCampo3').val();
    var _strRegNegCampo4 = $('#strRegNegCampo4').val();
    var _strRegNegCampo5 = $('#strRegNegCampo5').val();


    if (_UnidadOrg === '' || _Codigo === '' || _Descripcion === '') {
        new PNotify({
            title: 'Nuevo Regla de Negocio',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt_codigo_RN')[0].validity.valid) {
        new PNotify({
            title: 'Codigo(*)',
            text: 'Ingrese solo números y letras sin espacios en blanco',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    //Clases

    class TGREGNEG_DET {

        constructor(intIdRegNegDet, intIdReglaNeg, strCoReglaDet, strDesReglaDet, strValorRegla, strPosibValor, bitFlActivo) {

            this.intIdRegNegDet = intIdRegNegDet
            this.intIdReglaNeg = intIdReglaNeg
            this.strCoReglaDet = strCoReglaDet
            this.strDesReglaDet = strDesReglaDet
            this.strValorRegla = strValorRegla
            this.strPosibValor = strPosibValor
            this.bitFlActivo = bitFlActivo


        }
    }

    class TGREGLANEG_HE_DET {

        constructor(intIdRegNegHE, intIdReglaNeg, intIdConceptoDiurno, intIdConceptoNocturno, intTiempo, timeTiempo, intSecuencia, intTipoDia, intTipoHorario, bitFlEliminado, intIdUsuarReg) {

            this.intIdRegNegHE = intIdRegNegHE
            this.intIdReglaNeg = intIdReglaNeg
            this.intIdConceptoDiurno = intIdConceptoDiurno
            this.intIdConceptoNocturno = intIdConceptoNocturno
            this.intTiempo = intTiempo
            this.timeTiempo = timeTiempo
            this.intSecuencia = intSecuencia
            this.intTipoDia = intTipoDia
            this.intTipoHorario = intTipoHorario
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg


        }
    }

    var ListasDeReglas = new Array();
    var ListasConfigHE = new Array();


    var _HoraIni = $('#time_HN_HI').val();
    var _HoraFin = $('#time_HN_HF').val();
    var error = 0;
    var HoraIni = parseInt(_HoraIni.substring(0, 2));
    var MiniIni = parseInt(_HoraIni.substring(5, 3));
    var HoraFin = parseInt(_HoraFin.substring(0, 2));
    var MiniFin = parseInt(_HoraFin.substring(5, 3));

    if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == true) {



        if ($('#time_HN_HI_DIA_SIG').is(':checked') == true && $('#time_HN_HF_DIA_SIG').is(':checked') == false) {

            error = 3;

        }


        if ($('#time_HN_HI_DIA_SIG').is(':checked') == false && $('#time_HN_HF_DIA_SIG').is(':checked') == true) {

            if (HoraIni == HoraFin) {

                if (MiniIni > MiniFin) {
                    error = 2;
                }

                if (MiniIni == MiniFin) {
                    error = 2;
                }


            }

        }


        if ($('#time_HN_HI_DIA_SIG').is(':checked') == true && $('#time_HN_HF_DIA_SIG').is(':checked') == true) {


            if (HoraIni > HoraFin) {

                error = 1;
            }

            if (HoraIni == HoraFin) {

                if (MiniIni > MiniFin) {
                    error = 1;
                }

                if (MiniIni == MiniFin) {
                    error = 1;
                }


            }
        }


        if ($('#time_HN_HI_DIA_SIG').is(':checked') == false && $('#time_HN_HF_DIA_SIG').is(':checked') == false) {


            if (HoraIni > HoraFin) {

                error = 1;
            }

            if (HoraIni == HoraFin) {

                if (MiniIni > MiniFin) {
                    error = 1;
                }

                if (MiniIni == MiniFin) {
                    error = 1;
                }


            }
        }



        if (error == 1) {
            new PNotify({
                title: 'Configuración de Horario Nocturno',
                text: 'Hora Fin debe ser mayor al inicio',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3'
            });
            error = 0;
            return;
        } else if (error == 2) {
            new PNotify({
                title: 'Configuración de Horario Nocturno',
                text: 'Hora Fin debe ser menor al inicio',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3'
            });
            error = 0;
            return;
        } else if (error == 3) {
            new PNotify({
                title: 'Configuración de Horario Nocturno',
                text: 'Configuración del dia Siguiente invalida',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3'
            });
            error = 0;
            return;
        }

    }
    else if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == false) {

    }

    //Datos Asitencia 1.1
    var ValidarPrimerMarca = 0;

    if ($('#chck_valid_pri_marca').is(':checked') == true) {

        ValidarPrimerMarca = 1;

    }
    else if ($('#chck_valid_pri_marca').is(':checked') == false) {
        ValidarPrimerMarca = 0;
    }


    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'AVPM', null, ValidarPrimerMarca, ValidarPrimerMarca, true));


    var AsumirMarcasPorMI = 0;

    if ($('#chck_valid_marca_refri').is(':checked') == true) {

        AsumirMarcasPorMI = 1;

    }
    else if ($('#chck_valid_marca_refri').is(':checked') == false) {
        AsumirMarcasPorMI = 0;
    }


    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PVALIDREF', null, AsumirMarcasPorMI, AsumirMarcasPorMI, true));


    var ValidarMarcasRefri = 0;

    if ($('#chck_asumir_Marcar_MI').is(':checked') == true) {

        ValidarMarcasRefri = 1;

    }
    else if ($('#chck_asumir_Marcar_MI').is(':checked') == false) {
        ValidarMarcasRefri = 0;
    }



    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PASMAREF', null, ValidarMarcasRefri, ValidarMarcasRefri, true));


    var TimeMinHTDsctRefri = $('#TimeMinHTDsctRefri').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMINHTREF', null, null, TimeMinHTDsctRefri, true));


    var TimeMinValidMarCRefri = $('#TimeMinValidMarCRefri').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TVALIDREF', null, null, TimeMinValidMarCRefri, true));

    var TimeDsctRefriDiaDesca = $('#TimeDsctRefriDiaDesca').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TREFDIADES', null, null, TimeDsctRefriDiaDesca, true));

    var ValidaBoniAuto = 0;

    if ($('#chck_Valida_Bon').is(':checked') == true) {

        ValidaBoniAuto = 1;

    }
    else if ($('#chck_Valida_Bon').is(':checked') == false) {
        ValidaBoniAuto = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ABO', null, ValidaBoniAuto, ValidaBoniAuto, true));


    var HorApliDiaIni = 0;

    if ($('#chck_config_dia_ini').is(':checked') == true) {

        HorApliDiaIni = 1;

    }
    else if ($('#chck_config_dia_ini').is(':checked') == false) {
        HorApliDiaIni = 0;
    }


    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'DINIPLANHO', null, HorApliDiaIni, HorApliDiaIni, true));




    var ValidarAsigMarc = 0;

    if ($('#Vali_Asig_marc').is(':checked') == true) {


        ValidarAsigMarc = 1;

    }

    else if ($('#Vali_Asig_marc').is(':checked') == false) {

        ValidarAsigMarc = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ASIGM', null, ValidarAsigMarc, ValidarAsigMarc, true));


    var ConsExcePersoNoEje = 0;

    if ($('#chck_cons_fer_hor').is(':checked') == true) {

        ConsExcePersoNoEje = 1;

    }
    else if ($('#chck_cons_fer_hor').is(':checked') == false) {
        ConsExcePersoNoEje = 0;
    }


    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'FSH', null, ConsExcePersoNoEje, ConsExcePersoNoEje, true));



    var ConsFerSobreHor = 0;

    if ($('#Cons_Exc_SinCargo').is(':checked') == true) {

        ConsFerSobreHor = 1;

    }
    else if ($('#Cons_Exc_SinCargo').is(':checked') == false) {

        ConsFerSobreHor = 0;
    }



    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PEXCEP', null, ConsFerSobreHor, ConsFerSobreHor, true));


    var ConsFalNoAsisFeri = 0;

    if ($('#ConsFal').is(':checked') == true) {

        ConsFalNoAsisFeri = 1;

    }
    else if ($('#ConsFal').is(':checked') == false) {
        ConsFalNoAsisFeri = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'FEF', null, ConsFalNoAsisFeri, ConsFalNoAsisFeri, true));




    //Datos Asitencia 1.2

    var TardIngTol;

    if ($('#chck_Tar_Ing_Tole').is(':checked') == true) {

        TardIngTol = 1;

    }
    else if ($('#chck_Tar_Ing_Tole').is(':checked') == false) {
        TardIngTol = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TING', null, TardIngTol, TardIngTol, true));


    var TardRefTol;

    if ($('#chck_Tar_Refr_Tole').is(':checked') == true) {

        TardRefTol = 1;

    } else if ($('#chck_Tar_Refr_Tole').is(':checked') == false) {

        TardRefTol = 0;

    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TREF', null, TardRefTol, TardRefTol, true));



    var TipoTole;

    if ($('#chck_PorSemana').is(':checked') == true) {
        TipoTole = 1;
    } else if ($('#chck_PorPeriodo').is(':checked') == true) {
        TipoTole = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPOTOL', null, TipoTole, TipoTole, true));



    var UsoTole = $('#UsoTole option:selected').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'FORMTOL', null, null, UsoTole, true));


    var DscTole = $('#DscTole').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMAXTOL', null, null, DscTole, true));




    var GeneTMaxTol = 0;

    if ($('#chck_GeneTar_MaxTol').is(':checked') == true) {

        GeneTMaxTol = 1;

    } else if ($('#chck_GeneTar_MaxTol').is(':checked') == false) {
        GeneTMaxTol = 0;
    }


    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'GENTOLTAR', null, GeneTMaxTol, GeneTMaxTol, true));


    var ConsAusJustDiaria = 0;

    if ($('#ConsAusJustDiaria').is(':checked') == true) {

        ConsAusJustDiaria = 1;

    } else if ($('#ConsAusJustDiaria').is(':checked') == false) {
        ConsAusJustDiaria = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'CJD', null, ConsAusJustDiaria, ConsAusJustDiaria, true));




    var ConsFeriSinAsis = 0;

    if ($('#ConsFeriSinAsis').is(':checked') == true) {

        ConsFeriSinAsis = 1;

    } else if ($('#ConsFeriSinAsis').is(':checked') == false) {
        ConsFeriSinAsis = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'CDF', null, ConsFeriSinAsis, ConsFeriSinAsis, true));







    var ConsDomiTieDefec = $('#chk_cons_dom').is(':checked');
    var TimeConsDomiTieDefec = $('#time_chk_cons_dom').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HTDOM', null, null, TimeConsDomiTieDefec, true));


    var ConsTiempoRef = $('#chck_con_refr_max').is(':checked');
    var TimeConsTiempoRef = $('#time_chck_con_refr_max').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMAXREF', null, null, TimeConsTiempoRef, true));


    var DsctNoMarcSalRef = $('#chck_dsct_no_marcar').is(':checked');
    var TimeDsctNoMarcSalRef = $('#time_chck_dsct_no_marcar').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTMIREF', null, null, TimeDsctNoMarcSalRef, true));



    //Datos Asitencia 1.3

    var PermiteAntesHor = $('#time_min_antes_hor').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMAH', null, null, PermiteAntesHor, true));



    var PermiteDespHor = $('#time_min_despues_hor').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMDH', null, null, PermiteDespHor, true));



    var DuranteDiasNoLab = $('#time_min_durante_diaslab').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMDNL', null, null, DuranteDiasNoLab, true));


    var PerDiasJusti = 0;

    if ($('#chck_dias_just').is(':checked') == true) {

        PerDiasJusti = 1;

    } else if ($('#chck_dias_just').is(':checked') == false) {
        PerDiasJusti = 0;
    }


    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PHAJUST', null, PerDiasJusti, PerDiasJusti, true));



    var PerRefri = 0;

    if ($('#chck_per_refr').is(':checked') == true) {

        PerRefri = 1;

    } else if ($('#chck_per_refr').is(':checked') == false) {
        PerRefri = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PREF', null, PerRefri, PerRefri, true));


    var timePerRefri = $('#time_chck_per_refr').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMREF', null, null, timePerRefri, true));




    var timeEfecConsDTrab = $('#Time_TE_ConsiDTrab').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'DTR', null, null, timeEfecConsDTrab, true));


    var timeHAEfecConsDTrab = $('#Time_HA_Efect_ConsDT').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMHADT', null, null, timeHAEfecConsDTrab, true));




    var valor1 = 0;
    var valor2 = 0;
    var valor3 = 0;
    var valor4 = 0;
    var TrabajoCons = 0;
    var strDescValor1 = null;
    var strDescValor2 = null;
    var strDescValor3 = null;
    var strDescValor4 = null;
    var strDescValortOTAL = null;

    if ($('#chck_Sabado').is(':checked') == true) {

        valor1 = 32;
        strDescValor1 = 'SAB';
    }
    if ($('#chck_Domingo').is(':checked') == true) {

        valor2 = 64;
        strDescValor2 = 'DOM';

    }
    if ($('#chck_DiaDesc').is(':checked') == true) {

        valor3 = 128;
        strDescValor3 = 'DESC';

    }
    if ($('#chck_DiaFer').is(':checked') == true) {

        valor4 = 512;
        strDescValor4 = 'FER';

    }

    TrabajoCons = valor1 + valor2 + valor3 + valor4;
    strDescValortOTAL = strDescValor1 + ' ' + strDescValor2 + ' ' + strDescValor3 + ' ' + strDescValor4;

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ADTRAB', null, TrabajoCons, strDescValortOTAL, true));





    //Datos Asitencia 1.4

    var SinHorario = 0;

    if ($('#chck_Con_Hor').is(':checked') == true) {

        SinHorario = 1;

    } else if ($('#chck_Sin_Hor').is(':checked') == true) {
        SinHorario = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'CHORARIO', null, SinHorario, SinHorario, true));


    var PersTrabAman = 0;

    if ($('#chck_trab_amanecida').is(':checked') == true) {

        PersTrabAman = 1;

    } else if ($('#chck_trab_amanecida').is(':checked') == false) {
        PersTrabAman = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TRABAMA', null, PersTrabAman, PersTrabAman, true));


    var ProcesAsistTar = 0;

    if ($('#chck_proc_tareo').is(':checked') == true) {

        ProcesAsistTar = 1;

    } else if ($('#chck_proc_tareo').is(':checked') == false) {
        ProcesAsistTar = 0;
    }


    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PTAREOS', null, ProcesAsistTar, PersTrabAman, true));






    var HabiliGestMIRefri = 0;

    if ($('#chck_marc_incom_refr').is(':checked') == true) {

        HabiliGestMIRefri = 1;

    } else if ($('#chck_marc_incom_refr').is(':checked') == false) {
        HabiliGestMIRefri = 0;
    }

    var TimeHolguraIR = $('#time_ini_chck_marc_incom_refr').val();
    var TimeHolguraFR = $('#time_fin_chck_marc_incom_refr').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HGESMIREF', null, HabiliGestMIRefri, HabiliGestMIRefri, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'THOLINIREF', null, null, TimeHolguraIR, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'THOLFINREF', null, null, TimeHolguraFR, true));



    var CastTardaIngr = 0;

    if ($('#chck_apli_catigo').is(':checked') == true) {

        CastTardaIngr = 1;

    } else if ($('#chck_apli_catigo').is(':checked') == false) {
        CastTardaIngr = 0;
    }


    var TimeIniCast1 = $('#time_ini_cast1').val();
    var TimeIniCast2 = $('#time_ini_cast2').val();
    var TimeIniCast3 = $('#time_ini_cast3').val();
    var TimeFinCast1 = $('#time_fin_cast1').val();
    var TimeFinCast2 = $('#time_fin_cast2').val();
    var Cast1 = $('#time_apli_cast1').val();
    var Cast2 = $('#time_apli_cast2').val();
    var Cast3 = $('#time_apli_cast3').val();



    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ACASTXTI', null, CastTardaIngr, CastTardaIngr, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TINICAST1', null, null, TimeIniCast1, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TINICAST2', null, null, TimeIniCast2, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTMAS', null, null, TimeIniCast3, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TFINCAST1', null, null, TimeFinCast1, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TFINCAST2', null, null, TimeFinCast2, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTAPL1', null, null, Cast1, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTAPL2', null, null, Cast2, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTAPL3', null, null, Cast3, true));



    //Datos Horas Extras 2.1

    var CNN = 1;

    $('#Config_Detalle_HES tr').each((index, item) => {



        //for (var y = 0; y <= index; y++) {

        var HEHNorm = $(item).find('td').first().html();
        var HEHNoct = $(item).find('td').next().html();
        var intTipoDia = $(item).find('td').next().next().html();
        var Tiempo = $(item).find('td').next().next().next().html();

        if (Tiempo == null || Tiempo == 'undefined') {


        } else if (Tiempo !== null) {


            ListasConfigHE.push(new TGREGLANEG_HE_DET(0, 0, HEHNorm, HEHNoct, 0, Tiempo, CNN, intTipoDia, 1, false, 1));

            CNN = CNN + 1;
        }

        //}

    });




    //Datos Horas Extras 2.2

    var MetodoCalc = $('#MetCal').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'MCHE', null, null, MetodoCalc, true));


    var SegunFechaProceso;

    if ($('#chck_FechaProc').is(':checked') == true) {

        SegunFechaProceso = 1;

    } else if ($('#chck_FechaProc').is(':checked') == false) {

        SegunFechaProceso = 0;

    }
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'FCCD', null, SegunFechaProceso, SegunFechaProceso, true));


    var PermAntesHor = $('#time_HE_antes_hor').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMEAH', null, null, PermAntesHor, true));


    var PermDespHor = $('#time_HE_despues_hor').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMEDH', null, null, PermDespHor, true));


    var DurDiasNoLab = $('#time_HE_durante_diasnolab').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMEDNL', null, null, DurDiasNoLab, true));


    var MaximoHEDiario = $('#time_Max_HE_Diario').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMAXHE', null, null, MaximoHEDiario, true));



    var AsuHorUltDiaLab = 0;

    if ($('#chck_asu_hora_ultdialab').is(':checked') == true) {

        AsuHorUltDiaLab = 1;

    } else if ($('#chck_asu_hora_ultdialab').is(':checked') == false) {

        AsuHorUltDiaLab = 0;

    }
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ASUMHDES', null, AsuHorUltDiaLab, AsuHorUltDiaLab, true));



    var QuitarTiempRefr = 0;

    if ($('#chck_qui_time_refri').is(':checked') == true) {

        QuitarTiempRefr = 1;

    } else if ($('#chck_qui_time_refri').is(':checked') == false) {

        QuitarTiempRefr = 0;

    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'QTREFHE', null, QuitarTiempRefr, QuitarTiempRefr, true));


    var HabHEAutoFeri = 0;

    if ($('#Hab_HE_AutoFer').is(':checked') == true) {

        HabHEAutoFeri = 1;

    } else if ($('#Hab_HE_AutoFer').is(':checked') == false) {

        HabHEAutoFeri = 0;

    }
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HEAUTOFERI', null, HabHEAutoFeri, HabHEAutoFeri, true));

    var GeneHEDiuNoct = 0;

    if ($('#chck_HE_Diu_Noct').is(':checked') == true) {

        GeneHEDiuNoct = 1;

    } else if ($('#chck_HE_Diu_Noct').is(':checked') == false) {

        GeneHEDiuNoct = 0;

    }
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'GENHEDN', null, GeneHEDiuNoct, GeneHEDiuNoct, true));





    var ConfHorNoctHF;

    if ($('#time_HN_HI_DIA_SIG').is(':checked') == true) {

        ConfHorNoctHI = '+' + $('#time_HN_HI').val();

    } else if ($('#time_HN_HI_DIA_SIG').is(':checked') == false) {

        ConfHorNoctHI = $('#time_HN_HI').val();

    }

    var ConfHorNoctHF;

    if ($('#time_HN_HF_DIA_SIG').is(':checked') == true) {

        ConfHorNoctHF = '+' + $('#time_HN_HF').val();

    } else if ($('#time_HN_HF_DIA_SIG').is(':checked') == false) {

        ConfHorNoctHF = $('#time_HN_HF').val();

    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HNHI', null, null, ConfHorNoctHI, true));
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HNHF', null, null, ConfHorNoctHF, true));



    var ConsHNdentroHT = 0;

    if ($('#time_HN_HT').is(':checked') == true) {

        ConsHNdentroHT = 1;

    } else if ($('#time_HN_HT').is(':checked') == false) {

        ConsHNdentroHT = 0;

    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HNHTRAB', null, ConsHNdentroHT, ConsHNdentroHT, true));




    //Datos Horas Extras 2.3


    var TipoCalulo = $('#MetCalc').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'AHE', null, null, TipoCalulo, true));





    var Prioridad = 0;

    if ($('#chk_priori_change').is(':checked') == true) {

        Prioridad = 1;

    } else if ($('#chk_priori_change_A').is(':checked') == true) {

        Prioridad = 0;

    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PAHECOMP', null, Prioridad, Prioridad, true));



    console.log(ListasDeReglas);

    console.log(ListasConfigHE);




    ///Validar CAMPOS EN Blanco

    if (_Codigo === '' || _Descripcion === '' || _UnidadOrg == '0') {

        new PNotify({
            title: 'Nueva Regla de Negocio',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');


        return;
    }

    var _principal = $('#checkPrincipal').is(':checked');

    //OBJETO REGLA NUEVO

    var ReglaNegocio = {

        strCoRegNeg: _Codigo,
        strDesRegNeg: _Descripcion,
        IntIdUniOrg: _UnidadOrg,
        bitFlInterna: 0,
        strRegNegCampo1: _strRegNegCampo1,
        strRegNegCampo2: _strRegNegCampo2,
        strRegNegCampo3: _strRegNegCampo3,
        strRegNegCampo4: _strRegNegCampo4,
        strRegNegCampo5: _strRegNegCampo5,
        bitFlActivo: chckactivo,
        bitFlPrincipal: _principal
    }

    $.post(
        '/Asistencia/RegistrarNuevaRegla',
        { ObjReglaNeg: ReglaNegocio, listaReglaNegDet: ListasDeReglas, listaReglaNegHEDet: ListasConfigHE },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Reistro de Nueva Regla de Negocio',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablarReglaNeg();
                    $('.form-hide-ReglaNegocio').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Regla de Negocio';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        new PNotify({
                            title: 'Regla de Negocio',
                            text: response.message,
                            type: response.type,
                            delay: 3000,
                            styling: 'bootstrap3'
                        });
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-cancel-ReglaNegocio').on('click', function () {
    validarSession()
    $('.form-hide-ReglaNegocio').hide();
});

$('#btn-update-ReglaNegocio').on('click', function () {
    validarSession()
    var _HoraIni = $('#time_HN_HI').val();
    var _HoraFin = $('#time_HN_HF').val();
    var error = 0;
    var HoraIni = parseInt(_HoraIni.substring(0, 2));
    var MiniIni = parseInt(_HoraIni.substring(5, 3));
    var HoraFin = parseInt(_HoraFin.substring(0, 2));
    var MiniFin = parseInt(_HoraFin.substring(5, 3));



    if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == true) {



        if ($('#time_HN_HI_DIA_SIG').is(':checked') == true && $('#time_HN_HF_DIA_SIG').is(':checked') == false) {

            error = 3;

        }


        if ($('#time_HN_HI_DIA_SIG').is(':checked') == false && $('#time_HN_HF_DIA_SIG').is(':checked') == true) {

            if (HoraIni == HoraFin) {

                if (MiniIni > MiniFin) {
                    error = 2;
                }

                if (MiniIni == MiniFin) {
                    error = 2;
                }


            }

        }


        if ($('#time_HN_HI_DIA_SIG').is(':checked') == true && $('#time_HN_HF_DIA_SIG').is(':checked') == true) {


            if (HoraIni > HoraFin) {

                error = 1;
            }

            if (HoraIni == HoraFin) {

                if (MiniIni > MiniFin) {
                    error = 1;
                }

                if (MiniIni == MiniFin) {
                    error = 1;
                }


            }
        }


        if ($('#time_HN_HI_DIA_SIG').is(':checked') == false && $('#time_HN_HF_DIA_SIG').is(':checked') == false) {


            if (HoraIni > HoraFin) {

                error = 1;
            }

            if (HoraIni == HoraFin) {

                if (MiniIni > MiniFin) {
                    error = 1;
                }

                if (MiniIni == MiniFin) {
                    error = 1;
                }


            }
        }



        if (error == 1) {
            new PNotify({
                title: 'Configuración de Horario Nocturno',
                text: 'Hora Fin debe ser mayor al inicio',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3'
            });
            error = 0;
            return;
        } else if (error == 2) {
            new PNotify({
                title: 'Configuración de Horario Nocturno',
                text: 'Hora Fin debe ser menor al inicio',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3'
            });
            error = 0;
            return;
        } else if (error == 3) {
            new PNotify({
                title: 'Configuración de Horario Nocturno',
                text: 'Configuración del día siguiente inválida',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3'
            });
            error = 0;
            return;
        }

    }
    else if ($('#CHCK_BLOQUEO_CONFIG_HOR').is(':checked') == false) {

    }

    //Datos Cabecera
    swal({
        title: "Actualizar Regla de Negocio",
        text: "¿Está seguro de actualizar la regla de Negocio ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, Actualizar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            var chckactivo = null;
            if ($('#chk-activo-JO').is(':checked') == false) {
                chckactivo = false;
            } if ($('#chk-activo-JO').is(':checked') == true) {
                chckactivo = true;
            }

            var _UnidadOrg = $('#cboUndOrg option:selected').val();
            var _Codigo = $('#txt_codigo_RN').val();
            var _Descripcion = $('#txt_descripcion_RN').val();
            var _strRegNegCampo1 = $('#strRegNegCampo1').val();
            var _strRegNegCampo2 = $('#strRegNegCampo2').val();
            var _strRegNegCampo3 = $('#strRegNegCampo3').val();
            var _strRegNegCampo4 = $('#strRegNegCampo4').val();
            var _strRegNegCampo5 = $('#strRegNegCampo5').val();
            var _idRegNeg = $('#IdRegNeg').val();

            if (_UnidadOrg === '' || _Codigo === '' || _Descripcion === '') {
                new PNotify({
                    title: 'Actualizar Regla de Negocio',
                    text: 'Complete los campos obligatorios',
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });

                $('#notifry_error').html('');
                $('#notifry_errordes').html('');
                return;
            }

            if (!$('#txt_codigo_RN')[0].validity.valid) {
                new PNotify({
                    title: 'Codigo(*)',
                    text: 'Ingrese solo números y letras sin espacios en blanco.',
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });
                return;
            }

            //Clases

            class TGREGNEG_DET {

                constructor(intIdRegNegDet, intIdReglaNeg, strCoReglaDet, strDesReglaDet, strValorRegla, strPosibValor, bitFlActivo) {

                    this.intIdRegNegDet = intIdRegNegDet
                    this.intIdReglaNeg = intIdReglaNeg
                    this.strCoReglaDet = strCoReglaDet
                    this.strDesReglaDet = strDesReglaDet
                    this.strValorRegla = strValorRegla
                    this.strPosibValor = strPosibValor
                    this.bitFlActivo = bitFlActivo


                }
            }


            var ListasDeReglas = new Array();
            var ListasConfigHE = new Array();


            //Datos Asitencia 1.1
            var ValidarPrimerMarca = 0;

            if ($('#chck_valid_pri_marca').is(':checked') == true) {

                ValidarPrimerMarca = 1;

            } else if ($('#chck_valid_pri_marca').is(':checked') == false) {
                ValidarPrimerMarca = 0;
            }


            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'AVPM', null, ValidarPrimerMarca, ValidarPrimerMarca, true));


            var AsumirMarcasPorMI = 0;

            if ($('#chck_valid_marca_refri').is(':checked') == true) {

                AsumirMarcasPorMI = 1;

            } else if ($('#chck_valid_marca_refri').is(':checked') == false) {
                AsumirMarcasPorMI = 0;
            }


            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PVALIDREF', null, AsumirMarcasPorMI, AsumirMarcasPorMI, true));


            var ValidarMarcasRefri = 0;

            if ($('#chck_asumir_Marcar_MI').is(':checked') == true) {

                ValidarMarcasRefri = 1;

            } else if ($('#chck_asumir_Marcar_MI').is(':checked') == false) {
                ValidarMarcasRefri = 0;
            }



            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PASMAREF', null, ValidarMarcasRefri, ValidarMarcasRefri, true));



            var TimeMinHTDsctRefri = $('#TimeMinHTDsctRefri').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMINHTREF', null, null, TimeMinHTDsctRefri, true));


            var TimeMinValidMarCRefri = $('#TimeMinValidMarCRefri').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TVALIDREF', null, null, TimeMinValidMarCRefri, true));

            var TimeDsctRefriDiaDesca = $('#TimeDsctRefriDiaDesca').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TREFDIADES', null, null, TimeDsctRefriDiaDesca, true));

            var ValidaBoniAuto = 0;

            if ($('#chck_Valida_Bon').is(':checked') == true) {

                ValidaBoniAuto = 1;

            } else if ($('#chck_Valida_Bon').is(':checked') == false) {
                ValidaBoniAuto = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ABO', null, ValidaBoniAuto, ValidaBoniAuto, true));


            var HorApliDiaIni = 0;

            if ($('#chck_config_dia_ini').is(':checked') == true) {

                HorApliDiaIni = 1;

            } else if ($('#chck_config_dia_ini').is(':checked') == false) {
                HorApliDiaIni = 0;
            }


            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'DINIPLANHO', null, HorApliDiaIni, HorApliDiaIni, true));




            var ValidarAsigMarc = 0;

            if ($('#Vali_Asig_marc').is(':checked') == true) {

                ValidarAsigMarc = 1;

            } else if ($('#Vali_Asig_marc').is(':checked') == false) {
                ValidarAsigMarc = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ASIGM', null, ValidarAsigMarc, ValidarAsigMarc, true));


            var ConsExcePersoNoEje = 0;

            if ($('#chck_cons_fer_hor').is(':checked') == true) {

                ConsExcePersoNoEje = 1;

            } else if ($('#chck_cons_fer_hor').is(':checked') == false) {
                ConsExcePersoNoEje = 0;
            }


            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'FSH', null, ConsExcePersoNoEje, ConsExcePersoNoEje, true));



            var ConsFerSobreHor = 0;

            if ($('#Cons_Exc_SinCargo').is(':checked') == true) {

                ConsFerSobreHor = 1;

            } else if ($('#Cons_Exc_SinCargo').is(':checked') == false) {
                ConsFerSobreHor = 0;
            }



            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PEXCEP', null, ConsFerSobreHor, ConsFerSobreHor, true));


            var ConsFalNoAsisFeri = 0;

            if ($('#ConsFal').is(':checked') == true) {

                ConsFalNoAsisFeri = 1;

            } else if ($('#ConsFal').is(':checked') == false) {
                ConsFalNoAsisFeri = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'FEF', null, ConsFalNoAsisFeri, ConsFalNoAsisFeri, true));




            //Datos Asitencia 1.2

            var TardIngTol;

            if ($('#chck_Tar_Ing_Tole').is(':checked') == true) {

                TardIngTol = 1;

            }
            else if ($('#chck_Tar_Tole').is(':checked') == true) {
                TardIngTol = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TING', null, TardIngTol, TardIngTol, true));


            var TardRefTol;

            if ($('#chck_Tar_Refr_Tole').is(':checked') == true) {

                TardRefTol = 1;

            } else if ($('#chck_Tar_Tole_xd').is(':checked') == true) {

                TardRefTol = 0;

            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TREF', null, TardRefTol, TardRefTol, true));



            var TipoTole;
            if ($('#chck_PorSemana').is(':checked') == true) {
                TipoTole = 1;
            } else if ($('#chck_PorPeriodo').is(':checked') == true) {
                TipoTole = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPOTOL', null, TipoTole, TipoTole, true));



            var UsoTole = $('#UsoTole option:selected').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'FORMTOL', null, null, UsoTole, true));


            var DscTole = $('#DscTole').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMAXTOL', null, null, DscTole, true));




            var GeneTMaxTol = 0;

            if ($('#chck_GeneTar_MaxTol').is(':checked') == true) {

                GeneTMaxTol = 1;

            } else if ($('#chck_GeneTar_MaxTol').is(':checked') == false) {
                GeneTMaxTol = 0;
            }


            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'GENTOLTAR', null, GeneTMaxTol, GeneTMaxTol, true));


            var ConsAusJustDiaria = 0;

            if ($('#ConsAusJustDiaria').is(':checked') == true) {

                ConsAusJustDiaria = 1;

            } else if ($('#ConsAusJustDiaria').is(':checked') == false) {
                ConsAusJustDiaria = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'CJD', null, ConsAusJustDiaria, ConsAusJustDiaria, true));




            var ConsFeriSinAsis = 0;

            if ($('#ConsFeriSinAsis').is(':checked') == true) {

                ConsFeriSinAsis = 1;

            } else if ($('#ConsFeriSinAsis').is(':checked') == false) {
                ConsFeriSinAsis = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'CDF', null, ConsFeriSinAsis, ConsFeriSinAsis, true));



            var ConsDomiTieDefec = $('#chk_cons_dom').val();
            var TimeConsDomiTieDefec = $('#time_chk_cons_dom').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HTDOM', null, null, TimeConsDomiTieDefec, true));


            var ConsTiempoRef = $('#chck_con_refr_max').is(':checked');
            var TimeConsTiempoRef = $('#time_chck_con_refr_max').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMAXREF', null, null, TimeConsTiempoRef, true));


            var DsctNoMarcSalRef = $('#chck_dsct_no_marcar').is(':checked');
            var TimeDsctNoMarcSalRef = $('#time_chck_dsct_no_marcar').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTMIREF', null, null, TimeDsctNoMarcSalRef, true));



            //Datos Asitencia 1.3

            var PermiteAntesHor = $('#time_min_antes_hor').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMAH', null, null, PermiteAntesHor, true));



            var PermiteDespHor = $('#time_min_despues_hor').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMDH', null, null, PermiteDespHor, true));



            var DuranteDiasNoLab = $('#time_min_durante_diaslab').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMDNL', null, null, DuranteDiasNoLab, true));


            var PerDiasJusti = 0;

            if ($('#chck_dias_just').is(':checked') == true) {

                PerDiasJusti = 1;

            } else if ($('#chck_dias_just').is(':checked') == false) {
                PerDiasJusti = 0;
            }


            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PHAJUST', null, PerDiasJusti, PerDiasJusti, true));



            var PerRefri = 0;

            if ($('#chck_per_refr').is(':checked') == true) {

                PerRefri = 1;

            } else if ($('#chck_per_refr').is(':checked') == false) {
                PerRefri = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PREF', null, PerRefri, PerRefri, true));


            var timePerRefri = $('#time_chck_per_refr').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMREF', null, null, timePerRefri, true));




            var timeEfecConsDTrab = $('#Time_TE_ConsiDTrab').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'DTR', null, null, timeEfecConsDTrab, true));


            var timeHAEfecConsDTrab = $('#Time_HA_Efect_ConsDT').val();

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMHADT', null, null, timeHAEfecConsDTrab, true));




            var valor1 = 0;
            var valor2 = 0;
            var valor3 = 0;
            var valor4 = 0;
            var TrabajoCons = 0;
            var strDescValor1 = null;
            var strDescValor2 = null;
            var strDescValor3 = null;
            var strDescValor4 = null;
            var strDescValortOTAL = null;

            if ($('#chck_Sabado').is(':checked') == true) {

                valor1 = 32;
                strDescValor1 = 'SAB';
            }
            if ($('#chck_Domingo').is(':checked') == true) {

                valor2 = 64;
                strDescValor2 = 'DOM';

            }
            if ($('#chck_DiaDesc').is(':checked') == true) {

                valor3 = 128;
                strDescValor3 = 'DESC';

            }
            if ($('#chck_DiaFer').is(':checked') == true) {

                valor4 = 512;
                strDescValor4 = 'FER';

            }

            TrabajoCons = valor1 + valor2 + valor3 + valor4;
            strDescValortOTAL = strDescValor1 + ' ' + strDescValor2 + ' ' + strDescValor3 + ' ' + strDescValor4;

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ADTRAB', null, TrabajoCons, strDescValortOTAL, true));





            //Datos Asitencia 1.4
            var SinHorario = 0;

            if ($('#chck_Con_Hor').is(':checked') == true) {

                SinHorario = 1;

            } else if ($('#chck_Sin_Hor').is(':checked') == true) {
                SinHorario = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'CHORARIO', null, SinHorario, SinHorario, true));

            var PersTrabAman = 0;

            if ($('#chck_trab_amanecida').is(':checked') == true) {

                PersTrabAman = 1;

            } else if ($('#chck_trab_amanecida').is(':checked') == false) {
                PersTrabAman = 0;
            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TRABAMA', null, PersTrabAman, PersTrabAman, true));


            var ProcesAsistTar = 0;

            if ($('#chck_proc_tareo').is(':checked') == true) {

                ProcesAsistTar = 1;

            } else if ($('#chck_proc_tareo').is(':checked') == false) {
                ProcesAsistTar = 0;
            }


            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PTAREOS', null, ProcesAsistTar, PersTrabAman, true));





            var HabiliGestMIRefri = 0;

            if ($('#chck_marc_incom_refr').is(':checked') == true) {

                HabiliGestMIRefri = 1;

            } else if ($('#chck_marc_incom_refr').is(':checked') == false) {
                HabiliGestMIRefri = 0;
            }

            var TimeHolguraIR = $('#time_ini_chck_marc_incom_refr').val();
            var TimeHolguraFR = $('#time_fin_chck_marc_incom_refr').val();
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HGESMIREF', null, HabiliGestMIRefri, HabiliGestMIRefri, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'THOLINIREF', null, null, TimeHolguraIR, 1));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'THOLFINREF', null, null, TimeHolguraFR, 1));



            var CastTardaIngr = 0;

            if ($('#chck_apli_catigo').is(':checked') == true) {

                CastTardaIngr = 1;

            } else if ($('#chck_apli_catigo').is(':checked') == false) {
                CastTardaIngr = 0;
            }


            var TimeIniCast1 = $('#time_ini_cast1').val();
            var TimeIniCast2 = $('#time_ini_cast2').val();
            var TimeIniCast3 = $('#time_ini_cast3').val();
            var TimeFinCast1 = $('#time_fin_cast1').val();
            var TimeFinCast2 = $('#time_fin_cast2').val();
            var Cast1 = $('#time_apli_cast1').val();
            var Cast2 = $('#time_apli_cast2').val();
            var Cast3 = $('#time_apli_cast3').val();



            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ACASTXTI', null, CastTardaIngr, CastTardaIngr, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TINICAST1', null, null, TimeIniCast1, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TINICAST2', null, null, TimeIniCast2, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTMAS', null, null, TimeIniCast3, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TFINCAST1', null, null, TimeFinCast1, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TFINCAST2', null, null, TimeFinCast2, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTAPL1', null, null, Cast1, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTAPL2', null, null, Cast2, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TCASTAPL3', null, null, Cast3, true));



            //Datos Horas Extras 2.1

            var CNN = 1;






            $('#Config_Detalle_HES tr').each((index, item) => {


                class TGREGLANEG_HE_DET_XD {

                    constructor(intIdRegNegHE, intIdReglaNeg, intIdConceptoDiurno, intIdConceptoNocturno, intTiempo, timeTiempo, intSecuencia, intTipoDia, intTipoHorario, bitFlEliminado, intIdUsuarReg) {

                        this.intIdRegNegHE = intIdRegNegHE
                        this.intIdReglaNeg = intIdReglaNeg
                        this.intIdConceptoDiurno = intIdConceptoDiurno
                        this.intIdConceptoNocturno = intIdConceptoNocturno
                        this.intTiempo = intTiempo
                        this.timeTiempo = timeTiempo
                        this.intSecuencia = intSecuencia
                        this.intTipoDia = intTipoDia
                        this.intTipoHorario = intTipoHorario
                        this.bitFlEliminado = bitFlEliminado
                        this.intIdUsuarReg = intIdUsuarReg


                    }
                }


                //for (var y = 0; y <= index; y++) {

                var HEHNorm = $(item).find('td').first().html();
                var HEHNoct = $(item).find('td').next().html();
                var intTipoDia = $(item).find('td').next().next().html();
                var Tiempo = $(item).find('td').next().next().next().html();
                var idRegNeg = $(item).find('td').next().next().next().next().html();

                if (Tiempo == null || Tiempo == 'undefined') {


                } else if (Tiempo !== null) {


                    ListasConfigHE.push(new TGREGLANEG_HE_DET_XD(idRegNeg, 0, HEHNorm, HEHNoct, 0, Tiempo, CNN, intTipoDia, 1, false, 1));

                    CNN = CNN + 1;
                }

                //}

            });




            //Datos Horas Extras 2.2

            var MetodoCalc = $('#MetCal').val();
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'MCHE', null, null, MetodoCalc, true));


            var SegunFechaProceso;

            if ($('#chck_FechaProc').is(':checked') == true) {

                SegunFechaProceso = 1;

            } else if ($('#chck_FechaProc').is(':checked') == false) {

                SegunFechaProceso = 0;

            }
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'FCCD', null, SegunFechaProceso, SegunFechaProceso, true));


            var PermAntesHor = $('#time_HE_antes_hor').val();
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMEAH', null, null, PermAntesHor, true));


            var PermDespHor = $('#time_HE_despues_hor').val();
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMEDH', null, null, PermDespHor, true));


            var DurDiasNoLab = $('#time_HE_durante_diasnolab').val();
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMEDNL', null, null, DurDiasNoLab, true));


            var MaximoHEDiario = $('#time_Max_HE_Diario').val();
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TMAXHE', null, null, MaximoHEDiario, true));



            var AsuHorUltDiaLab = 0;

            if ($('#chck_asu_hora_ultdialab').is(':checked') == true) {

                AsuHorUltDiaLab = 1;

            } else if ($('#chck_asu_hora_ultdialab').is(':checked') == false) {

                AsuHorUltDiaLab = 0;

            }
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'ASUMHDES', null, AsuHorUltDiaLab, AsuHorUltDiaLab, true));



            var QuitarTiempRefr = 0;

            if ($('#chck_qui_time_refri').is(':checked') == true) {

                QuitarTiempRefr = 1;

            } else if ($('#chck_qui_time_refri').is(':checked') == false) {

                QuitarTiempRefr = 0;

            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'QTREFHE', null, QuitarTiempRefr, QuitarTiempRefr, true));


            var HabHEAutoFeri = 0;

            if ($('#Hab_HE_AutoFer').is(':checked') == true) {

                HabHEAutoFeri = 1;

            } else if ($('#Hab_HE_AutoFer').is(':checked') == false) {

                HabHEAutoFeri = 0;

            }
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HEAUTOFERI', null, HabHEAutoFeri, HabHEAutoFeri, true));

            var GeneHEDiuNoct = 0;

            if ($('#chck_HE_Diu_Noct').is(':checked') == true) {

                GeneHEDiuNoct = 1;

            } else if ($('#chck_HE_Diu_Noct').is(':checked') == false) {

                GeneHEDiuNoct = 0;

            }
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'GENHEDN', null, GeneHEDiuNoct, GeneHEDiuNoct, true));





            var ConfHorNoctHF;

            if ($('#time_HN_HI_DIA_SIG').is(':checked') == true) {

                ConfHorNoctHI = '+' + $('#time_HN_HI').val();

            } else if ($('#time_HN_HI_DIA_SIG').is(':checked') == false) {

                ConfHorNoctHI = $('#time_HN_HI').val();

            }

            var ConfHorNoctHF;

            if ($('#time_HN_HF_DIA_SIG').is(':checked') == true) {

                ConfHorNoctHF = '+' + $('#time_HN_HF').val();

            } else if ($('#time_HN_HF_DIA_SIG').is(':checked') == false) {

                ConfHorNoctHF = $('#time_HN_HF').val();

            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HNHI', null, null, ConfHorNoctHI, true));
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HNHF', null, null, ConfHorNoctHF, true));




            var ConsHNdentroHT = 0;

            if ($('#time_HN_HT').is(':checked') == true) {

                ConsHNdentroHT = 1;

            } else if ($('#time_HN_HT').is(':checked') == false) {

                ConsHNdentroHT = 0;

            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'HNHTRAB', null, ConsHNdentroHT, ConsHNdentroHT, true));




            //Datos Horas Extras 2.3


            var TipoCalulo = $('#MetCalc').val();
            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'AHE', null, null, TipoCalulo, true));





            var Prioridad = 0;

            if ($('#chk_priori_change').is(':checked') == true) {

                Prioridad = 1;

            } else if ($('#chk_priori_change_A').is(':checked') == true) {

                Prioridad = 0;

            }

            ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PAHECOMP', null, Prioridad, Prioridad, true));



            console.log(ListasDeReglas);

            console.log(ListasConfigHE);





            ///Validar CAMPOS EN Blanco

            if (_Codigo === '' || _Descripcion === '' || _UnidadOrg == '0') {

                new PNotify({
                    title: 'Nueva Regla de Negocio',
                    text: 'Complete los campos obligatorios',
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });
                $('#notifry_error').html('');
                $('#notifry_errordes').html('');


                return;
            }


            var _principal = $('#checkPrincipal').is(':checked');


            //OBJETO REGLA NUEVO

            var ReglaNegocio = {

                strCoRegNeg: _Codigo,
                strDesRegNeg: _Descripcion,
                IntIdUniOrg: _UnidadOrg,
                bitFlInterna: 0,
                strRegNegCampo1: _strRegNegCampo1,
                strRegNegCampo2: _strRegNegCampo2,
                strRegNegCampo3: _strRegNegCampo3,
                strRegNegCampo4: _strRegNegCampo4,
                strRegNegCampo5: _strRegNegCampo5,
                bitFlActivo: chckactivo,
                bitFlPrincipal: _principal,
                intIdReglaNeg: _idRegNeg
            }

            $.post(
                '/Asistencia/ActualizarNuevaRegla',
                { ObjReglaNeg: ReglaNegocio, listaReglaNegDet: ListasDeReglas, listaReglaNegHEDet: ListasConfigHE },
                (response) => {
                    console.log(response);
                    if (response.type !== '') {

                        if (response.type === 'success') {
                            new PNotify({
                                title: 'Actualización de Nueva Regla de Negocio',
                                text: response.message,
                                type: response.type,
                                delay: 3000,
                                styling: 'bootstrap3'
                            });
                            TablarReglaNeg();
                            $('.form-hide-ReglaNegocio').hide();
                            return;
                        } else {
                            var list = response.message.split("|")
                            if (list.length == 2) {
                                var nomMantemiento = 'Regla de Negocio';
                                var campo = list[1];
                                var msj = list[0];
                                var response = 'info';
                                var deta = 'notifry_error';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            } else {
                                new PNotify({
                                    title: 'Regla de Negocio',
                                    text: response.message,
                                    type: response.type,
                                    delay: 3000,
                                    styling: 'bootstrap3'
                                });
                            }
                            return;
                        }

                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });


        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });



});


/**------------------------------------------------------*//*ln_25835_all*/
/**24. Cálculo Manual*/
/**------------------------------------------------------*//*ln_26330_all*/

function SinDetalle() {
    $('#DetalleTex1').attr('hidden', false);
    $('#DetalleTex2').attr('hidden', false);
    $('#DetalleTex3').attr('hidden', false);
    $('#DetalleTex4').attr('hidden', false);
    $('#DetalleTex5').attr('hidden', false);
    $('#DetalleTex6').attr('hidden', false);
}

function calcu_two() {
    $('.chekeamePeriodos').on('click', function () {
        var n = $('.checky:checked').length;
        if (n > 0) {
            $('#GrupoLiqui').attr('disabled', false);


        }
        if (n == 0) {
            //$('#precheck').prop('hidden', false);
            $('#GrupoLiqui').attr('disabled', true);
        }
    });
}
function calcu_third() {
    $('#checkliqui').on('click', function () {
        var m = $('#checkliqui:checked').length;
        if (m == 1) {
            $('#GrupoLiqui').attr('disabled', false);
        }
        if (m == 0) {
            $('#GrupoLiqui').attr('disabled', true);
        }
    });
};

function init_compose() {

    if (typeof ($.fn.slideToggle) === 'undefined') { return; }

    init_EasyPieChart();
    $('#compose, .compose-close').click(function () {
        $('.compose').slideToggle();
    });
};
function init_EasyPieChart() {

    if (typeof ($.fn.easyPieChart) === 'undefined') { return; }

    $('.chart').easyPieChart({
        easing: 'easeOutElastic',
        delay: 3000,
        barColor: '#26B99A',
        trackColor: '#fff',
        scaleColor: false,
        lineWidth: 20,
        trackWidth: 16,
        lineCap: 'butt',
        onStep: function (from, to, percent) {
            $(this.el).find('.percent').text(Math.round(percent));
        }
    });
    var chart = window.chart = $('.chart').data('easyPieChart');
    $('.js_update').on('click', function () {
        chart.update(Math.random() * 200 - 100);
    });

    //hover and retain popover when on popover content
    var originalLeave = $.fn.popover.Constructor.prototype.leave;
    $.fn.popover.Constructor.prototype.leave = function (obj) {
        var self = obj instanceof this.constructor ?
            obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type);
        var container, timeout;

        originalLeave.call(this, obj);

        if (obj.currentTarget) {
            container = $(obj.currentTarget).siblings('.popover');
            timeout = self.timeout;
            container.one('mouseenter', function () {
                //We entered the actual popover – call off the dogs
                clearTimeout(timeout);
                //Let's monitor popover content instead
                container.one('mouseleave', function () {
                    $.fn.popover.Constructor.prototype.leave.call(self, self);
                });
            });
        }
    };

    $('body').popover({
        selector: '[data-popover]',
        trigger: 'click hover',
        delay: {
            show: 50,
            hide: 400
        }
    });

};
function init_charts() {
    if (typeof (Chart) === 'undefined') { return; }
    Chart.defaults.global.legend = {
        enabled: false
    };

    if ($('#canvas_line').length) {

        var canvas_line_00 = new Chart(document.getElementById("canvas_line"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    if ($('#canvas_line1').length) {

        var canvas_line_01 = new Chart(document.getElementById("canvas_line1"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    if ($('#canvas_line2').length) {

        var canvas_line_02 = new Chart(document.getElementById("canvas_line2"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    if ($('#canvas_line3').length) {

        var canvas_line_03 = new Chart(document.getElementById("canvas_line3"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    if ($('#canvas_line4').length) {

        var canvas_line_04 = new Chart(document.getElementById("canvas_line4"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    // Line chart

    if ($('#lineChart').length) {

        var ctx = document.getElementById("lineChart");
        var lineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }

    // Bar chart

    if ($('#mybarChart').length) {

        var ctx = document.getElementById("mybarChart");
        var mybarChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: '# of Votes 1',
                    backgroundColor: "#26B99A",
                    data: [51, 30, 40, 28, 92, 50, 45]
                }, {
                    label: '# of Votes',
                    backgroundColor: "#03586A",
                    data: [41, 56, 25, 48, 72, 34, 12]
                }]
            },

            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

    }


    // Doughnut chart

    if ($('#canvasDoughnut').length) {

        var ctx = document.getElementById("canvasDoughnut");
        var data = {
            labels: [
                "Dark Grey",
                "Purple Color",
                "Gray Color",
                "Green Color",
                "Blue Color"
            ],
            datasets: [{
                data: [120, 50, 140, 180, 100],
                backgroundColor: [
                    "#455C73",
                    "#9B59B6",
                    "#BDC3C7",
                    "#26B99A",
                    "#3498DB"
                ],
                hoverBackgroundColor: [
                    "#34495E",
                    "#B370CF",
                    "#CFD4D8",
                    "#36CAAB",
                    "#49A9EA"
                ]

            }]
        };

        var canvasDoughnut = new Chart(ctx, {
            type: 'doughnut',
            tooltipFillColor: "rgba(51, 51, 51, 0.55)",
            data: data
        });

    }

    // Radar chart

    if ($('#canvasRadar').length) {

        var ctx = document.getElementById("canvasRadar");
        var data = {
            labels: ["Eating", "Drinking", "Sleeping", "Designing", "Coding", "Cycling", "Running"],
            datasets: [{
                label: "My First dataset",
                backgroundColor: "rgba(3, 88, 106, 0.2)",
                borderColor: "rgba(3, 88, 106, 0.80)",
                pointBorderColor: "rgba(3, 88, 106, 0.80)",
                pointBackgroundColor: "rgba(3, 88, 106, 0.80)",
                pointHoverBackgroundColor: "#fff",
                pointHoverBorderColor: "rgba(220,220,220,1)",
                data: [65, 59, 90, 81, 56, 55, 40]
            }, {
                label: "My Second dataset",
                backgroundColor: "rgba(38, 185, 154, 0.2)",
                borderColor: "rgba(38, 185, 154, 0.85)",
                pointColor: "rgba(38, 185, 154, 0.85)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(151,187,205,1)",
                data: [28, 48, 40, 19, 96, 27, 100]
            }]
        };

        var canvasRadar = new Chart(ctx, {
            type: 'radar',
            data: data,
        });

    }


    // Pie chart
    if ($('#pieChart').length) {

        var ctx = document.getElementById("pieChart");
        var data = {
            datasets: [{
                data: [120, 50, 140, 180, 100],
                backgroundColor: [
                    "#455C73",
                    "#9B59B6",
                    "#BDC3C7",
                    "#26B99A",
                    "#3498DB"
                ],
                label: 'My dataset' // for legend
            }],
            labels: [
                "Dark Gray",
                "Purple",
                "Gray",
                "Green",
                "Blue"
            ]
        };

        var pieChart = new Chart(ctx, {
            data: data,
            type: 'pie',
            otpions: {
                legend: false
            }
        });

    }


    // PolarArea chart

    if ($('#polarArea').length) {

        var ctx = document.getElementById("polarArea");
        var data = {
            datasets: [{
                data: [120, 50, 140, 180, 100],
                backgroundColor: [
                    "#455C73",
                    "#9B59B6",
                    "#BDC3C7",
                    "#26B99A",
                    "#3498DB"
                ],
                label: 'My dataset'
            }],
            labels: [
                "Dark Gray",
                "Purple",
                "Gray",
                "Green",
                "Blue"
            ]
        };

        var polarArea = new Chart(ctx, {
            data: data,
            type: 'polarArea',
            options: {
                scale: {
                    ticks: {
                        beginAtZero: true
                    }
                }
            }
        });

    }
}

/**------------------------------------------------------*//*ln_26332_all*/
/**25. Reportes */
/**------------------------------------------------------*//*ln_26536_all*/

function SinDetalle_reportes() {
    $('#DetalleTex1').attr('hidden', false);
    $('#DetalleTex2').attr('hidden', false);
    $('#DetalleTex3').attr('hidden', false);
    $('#DetalleTex4').attr('hidden', false);
    $('#DetalleTex5').attr('hidden', false);
    $('#DetalleTex6').attr('hidden', false);
}

function calcu_one_reportes() {
    $('#cboJerarquia').on('change', function () {
        var id = $('#cboJerarquia').val();
        if (id) {
            $('#UnidadesOrganizacionales').attr('disabled', false);
            return;
        }
    });
}

function calcu_two_reportes() {
    $('#chekeame').on('click', function () {
        var n = $('.checky:checked').length;
        if (n > 0) {
            $('#Planilla').attr('disabled', false);


        }
        if (n == 0) {

            $('#Planilla').attr('disabled', true);
        }
    });

    alert('TGREPORTESC002');
    LlenarFizcalizacion();
}

function DescargarUnidades() {
    $('#cboJerarquia').on('change', function () {
        var id = $('#cboJerarquia option:selected').val();

        if (id == 0 || !id) {
            $('#cbounidsupe').empty();
            $('#cbounidsupe').attr('disabled', true);

            return;
        }
        $.post(
            '/Organizacion/getUnidxJerarquia',
            { IntIdJerOrg: id },
            (response) => {
                if (true) {
                    console.log(response);
                    response.forEach(element => {

                        $('#chekeame').append('<li role="presentation"><label class= "checkbox-inline" >' +
                            '<input id="' + element.intIdUniOrg + '"type="checkbox" class="checky" name="responsive">' + element.strDescripcion +
                            '</label></li >');
                    });

                }
                $('.checky').click(function () {
                    var lstIntIdUniOrg = new Array();
                    $('.checky:checked').each(function () {
                        lstIntIdUniOrg.push($(this).prop('id') * 1);
                    });
                    console.log('clickeado');
                    console.log(this);
                    console.log($(this).prop('checked'));
                    console.log(lstIntIdUniOrg);


                    $.post(
                        '/Reportes/GetCampPlanilla',
                        { lstIntIdUniOrg: lstIntIdUniOrg },
                        (response) => {
                            if (true) {
                                console.log(response);
                                response.forEach(element => {

                                    $('#chekeamePlanilla').append('<li role="presentation"><label class= "checkbox-inline" >' +
                                        '<input id="' + element.intIdPlanilla + '"type="checkbox" class="checkyPlanilla" name="responsive">' + element.strDesPlani +
                                        '</label></li >');
                                });

                            }
                        }
                    ).fail(function (result) {
                        alert('ERROR ' + result.status + ' ' + result.statusText);
                    });
                    $('#chekeamePlanilla').empty();

                })
            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
        $('#chekeame').empty();
    });

    $('#chekeame').on('click', function () {
        return;
        console.log(this);
        var id = $('.checky ').val();
        //if (id == 0 || !id) {
        //    $('#cbounidsupe').empty();
        //    $('#cbounidsupe').attr('disabled', true);

        //    return;
        //}

        $.post(
            '/Reportes/GetCampPlanilla',
            { intIdUniOrg: id },
            (response) => {
                if (true) {
                    console.log(response);
                    response.forEach(element => {

                        $('#chekeamePlanilla').append('<li role="presentation"><label class= "checkbox-inline" >' +
                            '<input id="' + element.intIdPlanilla + '"type="checkbox" class="icheckbox_flat-blue checkyPlanilla" name="responsive">' + element.strDesPlani +
                            '</label></li >');
                        init_checkBox_styles();
                    });

                }
            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
        $('#chekeamePlanilla').empty();
    });
}

function LlenarFizcalizacion() {

    $.post(
        '/Reportes/GetCampFizcalizacion',
        {},
        (response) => {


            response.forEach(element => {

                $('#Fizcalizacion').append('<li role="presentation"><label class= "checkbox-inline" >' +
                    '<input id="' + element.intIdTipo + '"type="checkbox"  name="responsive">' + element.strDeTipo +
                    '</label></li >');
            });


        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
    $('#Fizcalizacion').empty();

}

function allchecks() {


    var estado = $('#idcheck').is(':checked');

    if (estado == false) {
        $('#checking').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking1').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking2').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking3').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking4').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking5').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking6').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')



    } else {
        $('#checking').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking1').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking2').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking3').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking4').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking5').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking6').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')

    }

}


function GetCampEntidades() {
    $.post(
        '/Configuracion/GetCampEntidades',
        {},
        (response) => {
            response.forEach(element => {
                $('#campEnt').append(
                    ' <option value="' + element.intIdEntid + '">' + element.strNomEntid + '</option>'
                );

            });
        }
    );
}

/**------------------------------------------------------*//*ln_26540_all*/
/**26. Campos Adicionales II */
/**------------------------------------------------------*//*ln_26620_all*/

$('#btn-new-CamposAdicionales').on('click', function () {
    $('#btn-save-change-CamposAdicionales').show();
    $('#btn-update-CamposAdicionales').hide();
    $('.form-hide-CamposAdicionales').show();
    $.post(
        '/Configuracion/NuevoCamposAdicionales',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-CamposAdicionales .x_content').empty();
                $('.form-hide-CamposAdicionales .x_content').html(response);
                $('.form-hide-CamposAdicionales').show();

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});

/**************/
function INFO_MSJ(nomMantemiento, campo, response, msj, deta) {

    if ($('#cboJerarquia op1917tion:selected').val() !== '') {
        $(".notifry_error").html('');
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        //$('#notifry_errorpla').html('');
        //$('#notifry_errorext').html('');
        new PNotify({
            title: 'Información de ' + nomMantemiento + '',
            text: msj,
            type: response,
            delay: 3000,
            styling: 'bootstrap3'
        });

        $('#' + campo + '').focus();
        if (nomMantemiento == "Unidad Organizacional" || nomMantemiento == "Marcador" || nomMantemiento == "Jerarquía Organizacional" ||
            nomMantemiento == "Cargo" || nomMantemiento == "Categoría" || nomMantemiento == "Tipo Personal" || nomMantemiento == "Grupo" ||
            nomMantemiento == "Planilla" || nomMantemiento == "Centro de Costo" || nomMantemiento == "Marcador" || nomMantemiento == "Grupo Liquidación" ||
            nomMantemiento == "Feriado" || nomMantemiento == "Variable" || nomMantemiento == "Horario" || nomMantemiento == "Regla de Negocio" ||
            nomMantemiento == "Jornada" || nomMantemiento == "Periodo Pago") {
            $("#" + campo).next().html('' + msj + '');
        } else {
            $('#' + deta + '').html('' + msj + '');
        }
        $('#' + campo + '').val('');

    }

    else {
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $('#notifry_errorpla').html('');
        $('#notifry_errorext').html('');
        new PNotify({
            title: 'Información de ' + nomMantemiento + '',
            text: msj,
            type: response,
            delay: 3000,
            styling: 'bootstrap3',

        });

        $('#' + deta + '').html('');

    }
}


$(function () {
    $('#datetimepicker3').datetimepicker({
        format: 'LT'
    });
});




/**------------------------------------------------------*//*ln_27470_all*/
/**27. Empleado */
/**------------------------------------------------------*//*ln_31663_all*/

/*
    JavaScript Empleado
    ===================

    1. Listado de datos en DataTable
    2. Registro de empleados
    3. Editar empleados
    3. Eliminar Empleado
*/

function configEmpleadoInicial() {
    const intIdMenu = localStorage.getItem('idsubmenu') && !isNaN(localStorage.getItem('idsubmenu')) ? Number(localStorage.getItem('idsubmenu')) : 1
    const formatoFecha = 'DD/MM/YYYY'
    const dataTableId = 'TablaPersonal'
    const tituloNuevoRegistro = 'Registro Empleado'
    const tituloEliminarRegistro = 'Eliminar Empleado'
    const rangeDateInicial = {
        startDate: moment().subtract(10, 'year'),
        endDate: moment(),
    }

    return {
        intIdMenu,
        formatoFecha,
        dataTableId,
        tituloNuevoRegistro,
        tituloEliminarRegistro,
        rangeDateInicial,
    }
}

/*
   =====INICIO==> Inicializar controles
*/

$(document).ready(function () {
    if ($('#filtroFechaRangeEmpleado').length) {
        const { rangeDateInicial } = configEmpleadoInicial()
        init_daterangepicker_custom('filtroFechaRangeEmpleado', rangeDateInicial)
    }
    $.fn.inputFilter = function (inputFilter) {
        return this.on('input keydown keyup mousedown mouseup select contextmenu drop', function () {
            if (inputFilter(this.value)) {
                this.oldValue = this.value
                this.oldSelectionStart = this.selectionStart
                this.oldSelectionEnd = this.selectionEnd
            } else if (this.hasOwnProperty('oldValue')) {
                this.value = this.oldValue
                this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd)
            } else {
                this.value = ''
            }
        })
    }
})

/*
   =====FIN==> Inicializar controles
*/

function messageResponseMix(data, title) {
    if (data.type === 'success') {
        new PNotify({
            title: title,
            text: data.message,
            type: 'success',
            delay: 3000,
            styling: 'bootstrap3',
        })
    } else if (data.type === 'error') {
        new PNotify({
            title: title,
            text: data.message,
            type: 'error',
            delay: 3000,
            styling: 'bootstrap3',
        })
    } else if (data.type === 'info') {
        new PNotify({
            title: title,
            text: data.message,
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark',
        })
    } else if (data.type === 'infoc') {
        new PNotify({
            title: title,
            text: data.message,
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
        })
    } else {
        new PNotify({
            title: title,
            text: data.message,
            type: 'error',
            delay: 3000,
            styling: 'bootstrap3',
        })
    }
}

function getDateRangePickerEmpleado() {
    const { formatoFecha } = configEmpleadoInicial()
    const idRange = '#filtroFechaRangeEmpleado'
    const fechaInicio = $(idRange)
        .data('daterangepicker')
        .startDate.format(formatoFecha)
    const fechaFin = $(idRange)
        .data('daterangepicker')
        .endDate.format(formatoFecha)
    return { fInicio: fechaInicio, fFin: fechaFin }
}

$('#filActiEmpleado').on('change', function () {
    validarSession()
    const date = getDateRangePickerEmpleado()
    traerDatosEmpleados(date.fInicio, date.fFin)
})

$('#filtroEmpleado').on('change', function () {
    validarSession()
    const date = getDateRangePickerEmpleado()
    traerDatosEmpleados(date.fInicio, date.fFin)
})

$('#filtroFechaRangeEmpleado').on('apply.daterangepicker', function (ev, picker) {
    validarSession()
    const { formatoFecha } = configEmpleadoInicial()
    const filtrojer_ini2 = picker.startDate.format(formatoFecha)
    const filtrojer_fin2 = picker.endDate.format(formatoFecha)
    traerDatosEmpleados(filtrojer_ini2, filtrojer_fin2)
})

async function cboResponsableInmediato(strEntidad, strGrupo) {
    const { intIdMenu } = configEmpleadoInicial()

    const dataResponsable = await $.post('/Personal/ListarComboGlobal', {
        intIdMenu: intIdMenu,
        strEntidad: strEntidad,
        intIdFiltroGrupo: 0,
        strGrupo: strGrupo,
        strSubGrupo: '',
    })
    if (dataResponsable.length) {
        $('#cboResponsableInmediato').empty()
        $('#cboResponsableInmediato').append('<option value="0">Seleccione</option>')
        $('#cboResponsableInmediato').attr('disabled', false)
        dataResponsable.forEach(element => {
            $('#cboResponsableInmediato').append('<option value="' + element.intId + '"   >' + element.strDescripcion + '</option>')
        })
        $('#cboResponsableInmediato').select2({
            language: {

                noResults: function () {

                    return "No hay resultado";
                },
                searching: function () {

                    return "Buscando..";
                }
            },
            placeholder: 'Seleccione',
            allowClear: true,
        })
    }

    //console.log(dataResponsable)
}

function validarEmpleadoControlesEmpleadop() {
    const { intIdMenu } = configEmpleadoInicial()
    const soloLetrasinputFilter = /^[a-zA-Z\sáéíóú]*$/
    const soloLetrasNumerosInputFilter = /^[A-Za-z0-9]*$/
    $('#celularEmpleado').inputFilter(function (value) {
        return /^-?\d*$/.test(value)
    })
    $('#txtNumDoc').inputFilter(function (value) {
        return /^\S*$/.test(value)
    })
    $('#fotocheckPersonal').inputFilter(function (value) {
        return soloLetrasNumerosInputFilter.test(value)
    })
    $('#codigoExterno').inputFilter(function (value) {
        return soloLetrasNumerosInputFilter.test(value)
    })
    $('#txtApePat').inputFilter(function (value) {
        return soloLetrasinputFilter.test(value)
    })
    $('#txtApeMat').inputFilter(function (value) {
        return soloLetrasinputFilter.test(value)
    })
    $('#txtNombres').inputFilter(function (value) {
        return soloLetrasinputFilter.test(value)
    })

    $("#codigoPensionista").inputFilter(function (value) {
        return soloLetrasNumerosInputFilter.test(value)
    })
    $("#codigoDeSalud").inputFilter(function (value) {
        return soloLetrasNumerosInputFilter.test(value)
    })
}

function limpiarControlesEmpleado() {
    $('#txtNumDoc').attr('disabled', false)
    $('#txtNumDoc').val('')
    $('#fechaDeCeseValidar').val('')
    $('#fechaDefechaAdmision').val('')
    $('#DNI_PER').val(0)
    $('#txtApePat').val('')
    $('#txtApeMat').val('')
    $('#txtNombres').val('')
    $('#txtFechaNac').val('')
    $('#TipVia').val(0)
    $('#TXTTIPVIA').val('')
    $('#txtFechaAdmi').val('')
    $('#VistaPrevia').html(`<img id="imgCarga"  src="/DirEmpleadosRuta/descarga(1).jpg" class="img-rounded img-logo-empleado"/>`)
    $('#txtRutaEmple').val('')
    $('#txtUbigeo').val('')
    $('#txtIntidUbigeo').val('')
    $('#chck_mas').iCheck('check')
    $('#Email_Emple').val('')
    $('#celularEmpleado').val('')
    $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
    $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
    var mailformatEmail = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/

    $('#tagsEmail').tagsInput({
        width: 'auto',
        defaultText: 'Correos',
        placeholderColor: '#666666',
        pattern: mailformatEmail,
        interactive: true,
    })
    $('#tagsTelefono').tagsInput({
        width: 'auto',
        defaultText: 'Teléfonos',
        placeholderColor: '#666666',
        pattern: /^\d{9}$/,
        interactive: true,
    })
    $('#fotocheckPersonal').val('')
    $('#codigoExterno').val('')
    $('#comboFiscalizacion').val(0)
    $('#nivelDeResponsabilidad').val(0)
    $('#cargoEmpleado').val(0)
    $('#planillaEmpleado').val(0)
    $('#categoriaEmpleado').val(0)
    $('#tipoDePersonal').val(0)
    $('#tgGrupoRegistro').val(0)
    $('#centroDeCosto').val(0)
    $('#cboDependencia').val(0)
    $('#unidadOrganizacionalCbo').val(0)
    $('#contradoIndeterminado').iCheck('uncheck')
    $('#codigoPensionista').val('')
    $('#codigoDeSalud').val('')
    $('#reglaDeNegocio').val(0)
    $('#tgHorarioFijo').val(0)
    $('#activarUsuarioCbo').iCheck('uncheck')
    $('#fechaCeseChecbox').iCheck('uncheck')
    $('#txtFechaCese').val('')
    $('#mativoDeCese').val(0)
    $('#tgTgGrupoliq').val(0)
    $('#strPersonalCampo1').val('')
    $('#strPersonalCampo2').val('')
    $('#strPersonalCampo3').val('')
    $('#strPersonalCampo4').val('')
    $('#strPersonalCampo5').val('')
    $('#marcadorMultiple option:selected').removeAttr('selected')
    // $('#txtFechaAdmi').
    // $('#cboResponsableInmediato').val(0)
    // $('#cboResponsableContractual').val(0)
}

function CombosEmpleado() {
    const { intIdMenu } = configEmpleadoInicial()
    const soloLetrasinputFilter = /^[a-zA-Z\sáéíóú]*$/

    cboResponsableInmediato('TGPERSONALINMEDIATOOLIDERAZGO', 'TGPERSONAL')

    $('#unidadOrganizacionalCbo').empty()
    $('#unidadOrganizacionalCbo').attr('disabled', false)
    $('#unidadOrganizacionalCbo').append('<option value="0">Seleccione</option>')

    validarEmpleadoControlesEmpleadop()

    $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)

    $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)

    var mailformatEmail = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/
    $('#tagsEmail').tagsInput({
        width: 'auto',
        defaultText: 'Correos',
        placeholderColor: '#666666',
        pattern: mailformatEmail,
    })
    $('#tagsTelefono').tagsInput({
        width: 'auto',
        defaultText: 'Teléfonos',
        placeholderColor: '#666666',
        pattern: /^\d{9}$/,
    })

    $.post(
        '/Personal/ListarComboGlobal',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONALCONTRACTUAL',
            intIdFiltroGrupo: 0,
            strGrupo: 'TGPERSONAL',
            strSubGrupo: '',
        },
        response => {
            $('#cboResponsableContractual').empty()
            $('#cboResponsableContractual').append('<option value="0">Seleccione</option>')
            $('#cboResponsableContractual').attr('disabled', false)
            response.forEach(element => {
                $('#cboResponsableContractual').append('<option value="' + element.intId + '"   >' + element.strDescripcion + '</option>')
            })
            $('#cboResponsableContractual').select2({
                language: {

                    noResults: function () {

                        return "No hay resultado";
                    },
                    searching: function () {

                        return "Buscando..";
                    }
                },
                placeholder: 'Seleccione',
                allowClear: true,
            })
        }
    )

    $('#nivelDeResponsabilidad').change(function () {
        let valinfo = $(this).val()
        if (valinfo == '0') {
            messageResponseMix({ type: 'info', message: 'Seleccione un Nivel de Responsabilidad' }, 'Registro Empleado')
            return false
            // 9 Inmediata o de Liderazgo
            // 10 Contractual
            // 11 Ambas (I+C)
            // 12 Ninguna
        }

        // $('#cboResponsableInmediato').attr('disabled', false)
        // $('#cboResponsableInmediato').select2({
        //     placeholder: 'Seleccione',
        //     allowClear: true,
        // })
        // if (valinfo == 9) {
        // cboResponsableInmediato('TGPERSONALINMEDIATOOLIDERAZGO', 'TGPERSONAL')
        // } else if (valinfo == 10) {
        //     cboResponsableInmediato('TGPERSONALCONTRACTUAL', 'TGPERSONAL')
        // } else if (valinfo == 11) {
        //     cboResponsableInmediato('TGPERSONALAMBASIC', 'TGPERSONAL')
        // } else if (valinfo == 12) {
        //     cboResponsableInmediato('TGPERSONALAMBASIC', 'TGPERSONAL')
        // }
    })

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGTIPO_VIA',
            intIdFiltroGrupo: 0,
            strGrupo: '',
            strSubGrupo: '',
        },
        response => {
            $('#TipVia').empty()
            $('#TipVia').attr('disabled', false)
            $('#TipVia').append('<option value="">Via</option>')
            response.forEach(element => {
                $('#TipVia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }
    )

    $.post(
        '/Personal/ListarComboGlobal',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TSTIPDOC02',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: '',
        },
        response => {
            $('#cboUndOrg').empty()
            $('#cboUndOrg').attr('disabled', false)
            response.forEach(element => {
                $('#TipoDoc').append('<option value="' + element.intId + '" maxdata="' + element.strCodigo + '"  >' + element.strDescripcion + '</option>')
            })
        }
    )

    $('#TipoDoc').change(function () {
        const valorDoc = $(this).val()
        $('#txtNumDoc').val('')
        let maxdata = $('option:selected', this).attr('maxdata')

        if (valorDoc == '' || valorDoc == '0') {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, 'Registro Empleado')
            $('#txtNumDoc').prop('disabled', true)
            $('#txtNumDoc').removeAttr('maxlength')
            $('#txtNumDoc').removeAttr('minlength')
        } else {
            $('#txtNumDoc').prop('disabled', false)
            if (maxdata == '0') {
                $('#txtNumDoc').removeAttr('maxlength')
                $('#txtNumDoc').removeAttr('minlength')
            } else {
                $('#txtNumDoc').attr('maxlength', maxdata)
                $('#txtNumDoc').attr('minlength', maxdata)
            }
        }
    })

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPAIS',
            intIdFiltroGrupo: 0,
            strGrupo: 'EXISTE',
            strSubGrupo: '',
        },
        response => {
            $('#CboPais').empty()
            $('#CboPais').attr('disabled', false)
            $('#CboPais').append('<option value="">Seleccione</option>')

            response.forEach(element => {
                $('#CboPais').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }
    )

    $('#CboPais').on('change', function () {
        var Valxpais = $('#CboPais').val()

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'DEPART',
                strSubGrupo: '',
            },
            response => {
                $('#CboRegion').empty()
                $('#CboRegion').attr('disabled', false)
                $('#CboRegion').append('<option value="">Seleccione</option>')

                response.forEach(element => {
                    $('#CboRegion').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        )
    })

    $('#CboRegion').on('change', function () {
        var Valxpais = $('#CboRegion').val()
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'REG',
                strSubGrupo: '',
            },
            response => {
                $('#CboProvincia').empty()
                $('#CboProvincia').attr('disabled', false)
                $('#CboProvincia').append('<option value="">Seleccione</option>')

                response.forEach(element => {
                    $('#CboProvincia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        )
    })

    $('#CboProvincia').on('change', function () {
        var Valxpais = $('#CboProvincia').val()
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'DIST',
                strSubGrupo: '',
            },
            response => {
                $('#CboDistrito').empty()
                $('#CboDistrito').attr('disabled', false)
                $('#CboDistrito').append('<option value="">Seleccione</option>')
                response.forEach(element => {
                    $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        )
    })

    $.post(
        '/Personal/ListarComboGlobal',
        {
            intIdMenu: 1,
            strEntidad: 'TGMOTIVOREGISTRO',
            intIdFiltroGrupo: 0,
            strGrupo: 'TGMOTIVO',
            strSubGrupo: '',
        },
        response => {
            $('#mativoDeCese').empty()
            $('#mativoDeCese').append('<option value="0">Seleccione</option>')
            response.forEach(item => {
                $('#mativoDeCese').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }
    )

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERFIL',
            intIdFiltroGrupo: 0,
            strGrupo: 'PERFILEMPLEADO',
            strSubGrupo: '',
        },
        response => {
            $('#cboPerfilAdmin').empty()
            $('#cboPerfilAdmin').append('<option value="0">Seleccione</option>')
            response.forEach(item => {
                $('#cboPerfilAdmin').append('<option value="' + item.intidTipo + '">' + item.strDeTipo + '</option>')
            })
        }
    )

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGJERARQORG',
            intIdFiltroGrupo: 0,
            strGrupo: 'DEPEN',
            strSubGrupo: 'EMPRESADEPEN',
        },
        response => {
            $('#cboDependencia').empty()
            $('#cboDependencia').attr('disabled', false)
            $('#cboDependencia').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#cboDependencia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }
    )

    $('#cboDependencia').change(function () {
        let idDependencia = $(this).val()
        if (idDependencia == '0') {
            messageResponseMix({ type: 'info', message: 'Seleccione una Dependencia ' }, 'Registro Empleado')
            return false
        }
        $.post('/Personal/ListarCombos', {
            strEntidad: 'TGPERFIL',
            intIdFiltroGrupo: idDependencia,
            strGrupo: 'UNIORG',
            strSubGrupo: ''
        }, response => {
            $('#unidadOrganizacionalCbo').empty()
            $('#unidadOrganizacionalCbo').attr('disabled', false)
            $('#unidadOrganizacionalCbo').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#unidadOrganizacionalCbo').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
            })
        })
    })

    $('#fechaCeseChecbox').on('ifChanged', function () {
        if ($('#fechaCeseChecbox').is(':checked') == true) {
            $('#tgTgGrupoliq').attr('disabled', false)
            $('#txtFechaCese').attr('disabled', false)
            $('#mativoDeCese').attr('disabled', false)
        } else if ($('#fechaCeseChecbox').is(':checked') == false) {
            $('#tgTgGrupoliq').attr('disabled', true)
            $('#tgTgGrupoliq').val(0)
            $('#txtFechaCese').attr('disabled', true)
            $('#txtFechaCese').val("")
            $('#mativoDeCese').attr('disabled', true)
            $('#mativoDeCese').val("")
        }
    })

    $("#planillaEmpleado").change(function () {
        let id = $(this).val()
        $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGGRUPOLIQREGISTRO',
            intIdFiltroGrupo: id,
            strGrupo: 'TGGRUPOLIQ',
            strSubGrupo: 'U',
        },
            (response) => {
                $('#tgTgGrupoliq').empty()
                $('#tgTgGrupoliq').append('<option value="0">Seleccione</option>')
                response.forEach(item => {
                    $('#tgTgGrupoliq').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
                })
            }
        )
    })

    $('#activarUsuarioCbo').on('ifChanged', function () {
        if ($('#activarUsuarioCbo').is(':checked') == true) {
            $('#activarUsuarioAdmin').attr('disabled', false)
        } else if ($('#activarUsuarioCbo').is(':checked') == false) {
            $('#activarUsuarioAdmin').iCheck('uncheck')
            $('#activarUsuarioAdmin').attr('disabled', true)
        }
        $('#cboPerfilAdmin').attr('disabled', true)
        $('#cboPerfilAdmin').val(0)
    })

    $('#activarUsuarioAdmin').on('ifChanged', function () {
        if ($('#activarUsuarioAdmin').is(':checked') == true) {
            $('#cboPerfilAdmin').attr('disabled', false)
        } else if ($('#activarUsuarioAdmin').is(':checked') == false) {
            $('#cboPerfilAdmin').attr('disabled', true)
            $('#cboPerfilAdmin').attr('disabled', true)
            $('#cboPerfilAdmin').val(0)
        }
    })

    //busqueda validacion

    $('#txtNumDoc').keypress(function (e) {
        // $.post(
        //     '/Personal/ListarCombos',
        //     {
        //         strEntidad: 'TGPERSONAL',
        //         intIdFiltroGrupo: 0,
        //         strGrupo: 'EXISTE',
        //         strSubGrupo: '',
        //     },
        //     response => {
        //         $('#DNI_PER').empty()
        //         $('#DNI_PER').attr('disabled', false)
        //         $('#DNI_PER').append('<option value="0">Seleccione</option>')

        //         response.forEach(element => {
        //             $('#DNI_PER').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
        //         })
        //     }
        // )
        $('#intIdPersonalReg').val('0')
        $('#fechaDeCeseValidar').val('')
        $('#fechaDefechaAdmision').val('')
        var ValidaDocum = $('#DNI_PER').val()

        if (e.which == 13) {
            validarSession()
            $('#intIdPersonalReg').val('0')
            $('#fechaDeCeseValidar').val('')
            $('#fechaDefechaAdmision').val('')
            if ($('#TipoDoc').val() == '0') {
                messageResponseMix({ type: 'info', message: 'Seleccione un tipo de documento' }, 'Registro Empleado')
                $('#TipoDoc').focus()
                return false
            }

            let fechaMostrarPorDefecto = moment().format('DD/MM/YYYY')
            $('#txtFechaAdmi').val(fechaMostrarPorDefecto)

            var NumDoc = $('#txtNumDoc').val()

            if (NumDoc == '') {
            } else if (NumDoc !== '') {
                var IntIdPersonaleValida = null
                var codPersonalHideen = null
                var numRegistroPersonalHideen = null
                var intIdTipDocConsulta = 1
                var fechaDeCeseValidar = null

                if ($('#TipoDoc').val() != '0') {
                    intIdTipDocConsulta = $('#TipoDoc').val()
                }
                $.post(
                    '/Personal/ValidarDocIdentidad',
                    {
                        intIdTipDoc: Number(intIdTipDocConsulta),
                        strNumDoc: NumDoc,
                    },
                    response => {
                        if (response.length) {
                            let data = response[0]
                            if (data.hasOwnProperty('intIdPersonal')) {
                                IntIdPersonaleValida = data.intIdPersonal

                                codPersonalHideen = data.strCodPersonal

                                messageResponseMix({ type: 'info', message: data.strObservacion }, 'Valida Empleado')

                                $('#intIdPersonalReg').val(IntIdPersonaleValida)
                                $('#intTipoOperacion').val('1')
                                $('#codPersonalHideen').val(codPersonalHideen)
                                $('#numRegistroPersonalHideen').val(data.strNumRegist.trim())
                                numRegistroPersonalHideen = data.strNumRegist.trim()
                                $('#codigoDeRegistro').val(data.strCodPersonal.trim() + '-' + data.strNumRegist.trim())
                                // validando documento inicio
                                if (data.intExiste == 1) {
                                    return false
                                }
                                $('#DNI_PER option')
                                    .filter(function () {
                                        return this.text == String(NumDoc)
                                    })
                                    .attr('selected', true)

                                ValidaDocum = $('#DNI_PER').val()

                                if (ValidaDocum !== '0') {
                                    const valorDocumento = $('#txtNumDoc').val()

                                    $('#txtNumDoc').attr('disabled', true)
                                    $('#Mensaje_Info').html(`${data.strObservacion}`)
                                    $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-lock" style="color:green;font-size:32px;" id="HabNumDoc"></i>')
                                    $(".disabled_Doc").attr("disabled", false)
                                    // alert(IntIdPersonaleValida);

                                    $.post(
                                        '/Personal/ObtenerRegistroEmpleado',
                                        {
                                            intIdPersonal: IntIdPersonaleValida,
                                        },
                                        response => {
                                            response.forEach(element => {
                                                $('#fechaDeCeseValidar').val(element.dttFecCese)
                                                $('#fechaDefechaAdmision').val(element.dttFecAdmin)

                                                fechaDeCeseValidar = element.dttFecCese
                                                $('#txtApePat').val(element.strApePaterno)
                                                $('#txtApeMat').val(element.strApeMaterno)
                                                $('#txtNombres').val(element.strNombres)
                                                $('#txtFechaNac').val(element.dttFecNacim)
                                                $('#TipVia').val(element.intIdTipoVia)
                                                $('#TXTTIPVIA').val(element.strDireccion)
                                                //$('#txtFechaAdmi').val(element.dttFecAdmin)

                                                if (element.bitflSexo == true) {
                                                    $('#chck_mas').iCheck('check')
                                                    //$('#chck_fem').iCheck('uncheck');
                                                } else if (element.bitflSexo == false) {
                                                    $('#chck_fem').iCheck('check')
                                                    // $('#chck_mas').iCheck('uncheck');
                                                }

                                                $('#CboPais').val(element.intIdUbiSupPais)

                                                $('#fotocheckPersonal').val(element.strFotocheck)

                                                $('#txtIntidUbigeo').val(element.intIdUbigeo)

                                                $('#Mensaje_Info').css('color', 'green')


                                               

                                                if (element.imgFoto != null) {
                                                   // $('#VistaPrevia').html(`<img id="imgCarga"  src="/DirEmpleadosRuta/${element.imgFoto}" class="img-rounded img-logo-empleado"/>`)
                                                    Imagen_GC(element.imgFoto, "Empleado");//añadido 26.03.2021
                                                    $('#txtRutaEmple').val(element.imgFoto)
                                                } else {
                                                    $('#VistaPrevia').html(`<img id="imgCarga"  src="/images/descarga(1).jpg" class="img-rounded img-logo-empleado"/>`)
                                                    $('#txtRutaEmple').val('')
                                                }

                                                var INTIDTPEVAL = $('#txtIntidUbigeo').val()
                                                var INTIDSUPUBI = element.intIdUbigSup
                                                var INTIDSUPUBIREGION = element.intIdUbiSupReg
                                                var intIdProvinciaMostrar = element.intIdUbiReg
                                                var intIdRegionMostrar = element.intIdUbiPais

                                                $.post(
                                                    '/Personal/ListarCombos',
                                                    {
                                                        strEntidad: 'TGUBIGEO',
                                                        intIdFiltroGrupo: element.intIdUbiSupPais,
                                                        strGrupo: 'DEPART',
                                                        strSubGrupo: '',
                                                    },
                                                    response => {
                                                        console.log(response)
                                                        $('#CboRegion').empty()
                                                        $('#CboRegion').attr('disabled', false)
                                                        $('#CboRegion').append('<option value="">Seleccione</option>')
                                                        response.forEach(element => {
                                                            $('#CboRegion').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                                                            if (element.intidTipo == intIdRegionMostrar) {
                                                                $('#CboRegion').val(element.intidTipo)
                                                            }
                                                        })
                                                    }
                                                )

                                                $.post(
                                                    '/Personal/ListarCombos',
                                                    {
                                                        strEntidad: 'TGUBIGEO',
                                                        intIdFiltroGrupo: INTIDSUPUBI,
                                                        strGrupo: 'DIST',
                                                        strSubGrupo: '',
                                                    },
                                                    response => {
                                                        $('#CboDistrito').empty()
                                                        $('#CboDistrito').attr('disabled', false)
                                                        $('#CboDistrito').append('<option value="">Seleccione</option>')
                                                        response.forEach(element => {
                                                            $('#CboDistrito').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                                                            if (element.intidTipo == INTIDTPEVAL) {
                                                                $('#CboDistrito').val(element.intidTipo)
                                                                $('#txtUbigeo').val(element.strDeTipo)
                                                                $('#txtUbigeo').attr('disabled', true)
                                                            }
                                                        })
                                                    }
                                                )

                                                $.post(
                                                    '/Personal/ListarCombos',
                                                    {
                                                        strEntidad: 'TGUBIGEO',
                                                        intIdFiltroGrupo: INTIDSUPUBIREGION,
                                                        strGrupo: 'REG',
                                                        strSubGrupo: '',
                                                    },
                                                    response => {
                                                        $('#CboProvincia').empty()
                                                        $('#CboProvincia').attr('disabled', false)
                                                        $('#CboProvincia').append('<option value="">Seleccione</option>')
                                                        response.forEach(element => {
                                                            $('#CboProvincia').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                                                            if (element.intidTipo == intIdProvinciaMostrar) {
                                                                $('#CboProvincia').val(element.intidTipo)
                                                            }
                                                        })
                                                    }
                                                )

                                                var NumeroAleatorio = Math.floor(Math.random() * (999 - 99)) + 99
                                                var PrimeraLetraNombre = element.strNombres.substring(0, 1)
                                                var TresPrimerasLetrasApePater = element.strApeMaterno.substring(0, 3)
                                                var TresPrimerosNumerosDI = element.strNumDoc.substring(0, 3)

                                                let codPersonalUsuario = PrimeraLetraNombre + '' + TresPrimerasLetrasApePater + '' + NumeroAleatorio + '' + TresPrimerosNumerosDI
                                                //$('#codigoDeRegistro').val(codPersonalUsuario.toUpperCase() + '-' + numRegistroPersonalHideen)
                                            })
                                        }
                                    )

                                    $('#HabNumDoc').on('click', function () {
                                        swal({
                                            title: 'Cambiar Doc. Identidad',
                                            text: 'Se perdera toda la información ingresada',
                                            type: 'warning',
                                            showCancelButton: true,
                                            confirmButtonText: 'Sí, cambiar',
                                            cancelButtonText: 'No, cancelar',
                                        }).then(function (isConfirm) {
                                            $("#Mensaje_Info").html("")
                                            $('#txtNumDoc').attr('disabled', false)
                                            $('#txtNumDoc').val('')
                                            $('#fechaDeCeseValidar').val('')
                                            $('#fechaDefechaAdmision').val('')
                                            $('#DNI_PER').val(0)
                                            $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-unlock" style="color:red;font-size:32px;"></i>')

                                            limpiarControlesEmpleado()
                                            $(".disabled_Doc").attr("disabled", true)
                                        }, function (dismiss) {
                                            if (dismiss == 'cancel') {
                                                swal("Cancelado", "La Operación fue cancelada", "error");
                                            }
                                        });
                                    })
                                } else if (ValidaDocum == '0') {
                                    $('#DNI_PER').val(0)
                                    $('#txtNumDoc').attr('disabled', true)
                                    $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-lock" style="color:green;font-size:25px;" id="HabNumDoc"></i>')
                                    $('#Mensaje_Info').html('Complete sus Datos (*)')

                                    $('#HabNumDoc').on('click', function () {
                                        swal({
                                            title: 'Cambiar Doc. Identidad',
                                            text: 'Se perdera toda la información ingresada',
                                            type: 'warning',
                                            showCancelButton: true,
                                            confirmButtonText: 'Sí, cambiar',
                                            cancelButtonText: 'No, cancelar',
                                        }).then(function (isConfirm) {
                                            $("#Mensaje_Info").html("")
                                            $('#txtNumDoc').attr('disabled', false)
                                            $('#txtNumDoc').val('')
                                            $('#fechaDeCeseValidar').val('')
                                            $('#fechaDefechaAdmision').val('')
                                            $('#DNI_PER').val(0)
                                            $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-unlock" style="color:red;font-size:25px;"></i>')
                                            limpiarControlesEmpleado()
                                            $(".disabled_Doc").attr("disabled", true)
                                        }, function (dismiss) {
                                            if (dismiss == 'cancel') {
                                                swal("Cancelado", "La Operación fue cancelada", "error");
                                            }
                                        });
                                    })
                                }
                                // validando documento fin
                            } else {
                                $('#intTipoOperacion').val('1')
                                $('#fechaDeCeseValidar').val('')
                                $('#fechaDefechaAdmision').val('')
                                $('#txtNumDoc').attr('disabled', false)
                                $('#txtNumDoc').val('')
                                $('#DNI_PER').val(0)
                                $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-unlock" style="color:red;font-size:25px;"></i>')
                                limpiarControlesEmpleado()
                            }
                        } else if (response.type == 'success') {
                            let dataObjet = response.objeto
                            let fechaMostrarPorDefecto = moment().format('DD/MM/YYYY')
                            $('#txtFechaAdmi').val(fechaMostrarPorDefecto)

                            $('#intTipoOperacion').val('1')
                            $('#fechaDeCeseValidar').val('')
                            $('#fechaDefechaAdmision').val('')
                            $('#txtNumDoc').attr('disabled', true)
                            $('#TipoDoc').attr('disabled', true)
                            $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-lock" style="color:green;font-size:25px;" id="HabNumDoc"></i>')
                            //messageResponseMix({ type: 'error', message: response.message }, 'Registro Empleado')
                            $('#codPersonalHideen').val(dataObjet.strCodPersonal.trim())
                            $('#numRegistroPersonalHideen').val(dataObjet.strNumRegist.trim())
                            $('#codigoDeRegistro').val(dataObjet.strCodPersonal.trim() + '-' + dataObjet.strNumRegist.trim())
                            $('#DNI_PER').val(0)
                            $('#Mensaje_Info').html(`${response.message}`)
                            $('#Mensaje_Info').css('color', 'red')
                            $('#txtApePat').val('')
                            $('#txtApeMat').val('')
                            $('#txtNombres').val('')
                            $('#txtFechaNac').val('')
                            $('#TipVia').val(0)
                            $('#TXTTIPVIA').val('')
                            $('#chck_mas').iCheck('check')
                            $('#chck_fem').iCheck('uncheck')
                            $('#VistaPrevia').html(`<img id="imgCarga"  src="/DirEmpleadosRuta/descarga(1).jpg" class="img-rounded img-logo-empleado"/>`)
                            $('#txtRutaEmple').val('')
                            $(".disabled_Doc").attr("disabled", false)

                            $('#HabNumDoc').on('click', function () {
                                swal({
                                    title: 'Cambiar Doc. Identidad',
                                    text: 'Se perdera toda la información ingresada',
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonText: 'Sí, cambiar',
                                    cancelButtonText: 'No, cancelar',
                                }).then(function (isConfirm) {
                                    $("#Mensaje_Info").html("")
                                    $('#TipoDoc').attr('disabled', false)
                                    $('#txtNumDoc').attr('disabled', false)
                                    $('#txtNumDoc').val('')
                                    $('#fechaDeCeseValidar').val('')
                                    $('#fechaDefechaAdmision').val('')
                                    $('#DNI_PER').val(0)
                                    $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-unlock" style="color:red;font-size:25px;"></i>')

                                    limpiarControlesEmpleado()
                                    $(".disabled_Doc").attr("disabled", true)
                                }, function (dismiss) {
                                    if (dismiss == 'cancel') {
                                        swal("Cancelado", "La Operación fue cancelada", "error");
                                    }
                                });
                            })
                        }
                    }
                )
            }
        }

        valor = $('#txtNumDoc').val()
    })

    //wizarEmpleadosValidacion()
}

function wizarEmpleadosValidacion(tipoOperacionPass) {
    const { intIdMenu, formatoFecha } = configEmpleadoInicial()
    let titleToast = 'Nuevo Empleado'
    if (tipoOperacionPass == 2) {
        titleToast = 'Editar Empleado'
    }
    // validacion de pasos
    var pasoUnoValidate = false
    var pasoDosValidate = false
    var pasoTresValidate = false
    var pasoCuatroValidate = false

    $('#wizarpaso2').click(function () {
        if (pasoUnoValidate) {
        } else {
            $('#wizard').smartWizard('goToStep', 1)
        }
    })

    $('#wizarpaso3').click(function () {
        if (pasoUnoValidate && pasoDosValidate) {
        } else {
            $('#wizard').smartWizard('goToStep', 2)
        }
    })

    $('#wizarpaso4').click(function () {
        if (pasoUnoValidate && pasoDosValidate && pasoTresValidate) {
        } else {
            $('#wizard').smartWizard('goToStep', 3)
        }
    })

    return pasoUnoValidate && pasoDosValidate && pasoTresValidate && pasoCuatroValidate
}
let _vartableEmpleado = null

function traerDatosEmpleados(filtrojer_ini_var = null, filtrojer_fin_var = null) {
    const datePicker = getDateRangePickerEmpleado()
    const { dataTableId, intIdMenu, formatoFecha } = configEmpleadoInicial()

    let filtrosActivo = $('#filActiEmpleado').val() != '' ? $('#filActiEmpleado').val() : 2
    let strfiltro = $('#filtroEmpleado').val()
    let filtrojer_ini = filtrojer_ini_var ? filtrojer_ini_var : datePicker.fInicio
    let filtrojer_fin = filtrojer_fin_var ? filtrojer_fin_var : datePicker.fFin
    let intIdUniOrg = $("#intIdUniOrg").val()

    const { loaderHtml } = APPCONFIG

    $(`#${dataTableId} tbody`).html(`<tr><td colspan="100%" ><div class="min-height-300">${loaderHtml}</div></td></tr>`)

    $.ajax({
        url: '/Personal/GetTablaPersonal',
        type: 'POST',
        data: {
            intIdMenu: intIdMenu,
            IntActivoFilter: filtrosActivo,
            strfilter: strfiltro,
            dttfiltrofch1: filtrojer_ini,
            dttfiltrofch2: filtrojer_fin,
            intIdUniOrg
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            let dataJson = response

            $(`#${dataTableId} tbody`).empty()

            if (dataJson.length == 0) {
                dataJson = []
            }

            if (_vartableEmpleado !== null) {
                _vartableEmpleado.destroy()
            }

            _vartableEmpleado = $(`#${dataTableId}`).DataTable({
                data: dataJson,
                columns: [
                    { data: 'strCoPersonal' },
                    { data: 'strNombres' },
                    { data: 'strNumDoc' },
                    { data: 'dttFecAdmin' },
                    { data: 'bitEspecifica_DESC' },
                    {
                        sortable: false,
                        render: (data, type, item, meta) => {
                            return `<button class="btn btn-success btn-xs btn-edit" dataid="${item.intIdPersonal}" ><i class="fa fa-pencil"></i> Editar </button>
                                    <button class="btn btn-primary btn-xs btn-delete" dataid="${item.intIdPersonal}" des_data="${item.strNombres}"  ><i class="fa fa-trash-o"></i> Eliminar </button>
                                    <button class="btn btn-primary btn-xs btn-resend" dataid="${item.intIdPersonal}"><i style="cursor: pointer;" class="fa fa-paper-plane" aria-hidden="true"></i></button>
                                    `
                        },
                    },
                    { data: 'intIdPersonal' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [6], //IntIdJerOrg
                        visible: false,
                        searchable: false,
                    },
                ],
                order: [],
                dom: 'lBfrtip',
            })
        },
        complete: function () {
            $.unblockUI();
        },
        error: (xhr, status, error) => {
            $(`#${dataTableId} tbody`).empty()
            $(`#${dataTableId}_info`).empty()
            $(`#${dataTableId}_paginate`).empty()
            $(`#${dataTableId} tbody`).html(`<tr><td colspan="100%" ><div class="min-height-300 flex-error"><div class="alert alert-danger">Hubo un error al listar. ${error.statusText}. Código de error: ${error.status}</div></div></td></tr>`)
        }
    })
}

function setMaxLengthInput(id, maxLength) {
    $(`#${id}`).attr('maxlength', `${maxLength}`)
}

async function NuevoEmpleadoVista(editar) {
    const dataVista = await $.post('/Personal/NuevoEmpleado', {})
    if (dataVista !== '') {
        $('.form-hide-empleado .x_content').empty()
        $('.form-hide-empleado .x_content').html(dataVista)
        switcheryLoad()
        init_checkBox_styles()
        cargarDaterangePicker()
        init_daterangepicker()

        //Inicio de código para solucionar observación 1.2  HG 03.03.2021        
        $.post('/Personal/GetHabGeo', {},
            (response) => {
                if (response) {
                    $("#wizarpaso5").show();
                } else {
                    $("#wizarpaso5").hide();
                    $('.wizard_steps').find('li:eq(4)').remove();// Se añadió esta linea
                    $(".p-3").hide();
                    $("#step-5").hide();
                    
                }
            }
        )
        //Fin de código para solucionar observación 1.2  HG 03.03.2021
        
        const dataCboEmpresa = await $.post('/Personal/ListarCombos', {
            intIdMenu: 0,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: 0,
            strGrupo: 'EMPRESA',
            strSubGrupo: '',
        })
        if (dataCboEmpresa.length) {
            $('#cboEmpresa').empty()
            $('#cboEmpresa').attr('disabled', false)
            $('#cboEmpresa').append('<option value="0">Seleccione</option>')
            dataCboEmpresa.forEach(element => {
                $('#cboEmpresa').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        $("#cboLocal").change(function () {
            let id = $(this).val()
            $.post('/Personal/ListarComboGlobal', {
                intIdMenu: 1,
                strEntidad: 'TGMARCADORREGISTRO',
                intIdFiltroGrupo: id,
                strGrupo: 'TGMARCADOR',
                strSubGrupo: 'U',
            }, response => {
                $('#marcadorMultiple').empty()
                response.forEach(item => {
                    $('#marcadorMultiple').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')

                })

                new PNotify({
                    title: '',
                    text: 'Verificar si el Local seleccionado tiene Marcador',
                    type: 'info',
                    delay: 1500,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });

            })

            //NUEVO HG 03.03.21
            //if ($('#marcadorMultiple').val() == '') {
            //    //alert("El Local seleccionado no tiene Marcador");

                //new PNotify({
                //    title: 'Advertencia',
                //    text: 'Verificar si el Local seleccionado tiene Marcador',
                //    type: 'info',
                //    delay: 1500,
                //    styling: 'bootstrap3',
                //    addclass: 'dark'
                //});

            //}
        })

        $("#cboEmpresa").change(function () {

            var intidUniOrg = $(this).val()

            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGPERSONAL',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'LOCAL',
                    strSubGrupo: ''
                },
                response => {
                    $('#cboLocal').empty()
                    $('#cboLocal').attr('disabled', false)
                    $('#cboLocal').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#cboLocal').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGCARGOREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGCARGO',
                    strSubGrupo: ''
                },
                response => {
                    $('#cargoEmpleado').empty()
                    $('#cargoEmpleado').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#cargoEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGPLANILLAREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGPLANILLA',
                    strSubGrupo: ''
                },
                response => {
                    $('#planillaEmpleado').empty()
                    $('#planillaEmpleado').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#planillaEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGCATEGORIAREGISTROEMPLEADO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGCATEGORIAEMPLEADO',
                    strSubGrupo: ''
                },
                response => {
                    $('#categoriaEmpleado').empty()
                    $('#categoriaEmpleado').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#categoriaEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGTIPOPERSONREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGTIPOPERSON',
                    strSubGrupo: ''
                },
                response => {
                    $('#tipoDePersonal').empty()
                    $('#tipoDePersonal').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#tipoDePersonal').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGGRUPOREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGGRUPO',
                    strSubGrupo: ''
                },
                response => {
                    $('#tgGrupoRegistro').empty()
                    $('#tgGrupoRegistro').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#tgGrupoRegistro').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGCCOSTOREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGCCOSTO',
                    strSubGrupo: ''
                },
                response => {
                    $('#centroDeCosto').empty()
                    $('#centroDeCosto').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#centroDeCosto').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $('#marcadorMultiple').empty()
        })

        CombosEmpleado()

        $('#btn-save-change-empleado').prop('disabled', true)
        if (typeof $.fn.smartWizard != 'undefined') {
            $('#wizardEmpleado').smartWizard({
                selected: 0,
                enableFinishButton: true,
                enableAllSteps: true,
                onLeaveStep: leaveAStepCallbackEmpleadoRegistro,
                onFinish: onFinishCallbackEmpleado,
            })
            $('#wizard_verticle').smartWizard({
                transitionEffect: 'slide',
            })

            $('.buttonNext').hide() //.addClass('btn btn-success');
            $('.buttonPrevious').hide() //.addClass('btn btn-primary');
            $('.buttonFinish').hide() //.addClass('btn btn-default');
        }

        $('#CargarImagen').change(function (e) {
            const o = document.getElementById('CargarImagen')
            let foto = o.files[0]
            if (o.files.length == 0 || !/\.(jpeg|jpg|png|svg)$/i.test(foto.name)) {
                messageResponseMix({ type: 'infoc', message: 'Ingrese una imagen con alguno de los siguientes formatos: .jpeg/.jpg/.png.' }, 'Nuevo Empleado')
            } else {
                const img = new Image()
                img.onload = function () {
                    let widthImg = Number(this.width.toFixed(0))
                    let heightImg = Number(this.height.toFixed(0))
                    if (widthImg <= 200 && heightImg <= 200) {
                        messageResponseMix({ type: 'infoc', message: 'Las medidas deben ser mínimo: 200 x 200 px' }, 'Nuevo Empleado')
                    } else {
                        CargoImagenEmpleado()
                    }
                }

                img.src = URL.createObjectURL(foto)
            }
        })
        document.getElementById('delete').onclick = function () {
            $('#VistaPrevia').html('<img src = "/DirLogosRuta/descarga(1).jpg" />')
            $('#txtRutaEmple').val('')
            return false
        }
    }
}

async function mostrarFormNuevoEmpleado(estad) {
    const { loaderHtml } = APPCONFIG
    $(`#loaderEditPersonal`).show()
    $(`#loaderEditPersonal`).html(`<div class="loaderContenedor"><div class="min-height-300">${loaderHtml}</div></div>`)
    const { intIdMenu } = configEmpleadoInicial()
    const dataVista = await NuevoEmpleadoVista(false)

    const camposAdicionales = await $.post('/Personal/ListarCamposAdicionales', { intIdMenu: intIdMenu, strNoEntidad: 'TGPERSONAL' })

    if (camposAdicionales.length) {
        $('#contendorCamposPersonal').empty()
        camposAdicionales.forEach(element => {
            let columHtml = `<div class="col-md-6 col-sm-6 col-xs-6">
                                <div class="form-group">
                                    <label> ${element.strTitulo}</label>
                                    <input id="${element.strNomCampo}" type="text" class="form-control " placeholder="${element.strTitulo}" maxlength="255"/>
                                </div>
                            </div>`
            $('#contendorCamposPersonal').append(columHtml)
        })
    }

    const dataCaracter = await $.post('/Personal/ListarCaracteresMax', {
        strMaestro: 'TGPERSONAL',
    })

    if (dataCaracter.length) {
        dataCaracter.forEach(item => {
            if (item.strColumnName == 'strFotocheck') {
                setMaxLengthInput('fotocheckPersonal', item.intMaxLength)
            } else if (item.strColumnName == 'strNombres') {
                setMaxLengthInput('txtNombres', item.intMaxLength)
            } else if (item.strColumnName == 'strApePaterno') {
                setMaxLengthInput('txtApePat', item.intMaxLength)
            } else if (item.strColumnName == 'strApeMaterno') {
                setMaxLengthInput('txtApeMat', item.intMaxLength)
            } else if (item.strColumnName == 'strDireccion') {
                setMaxLengthInput('TXTTIPVIA', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo1') {
                setMaxLengthInput('strPersonalCampo1', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo2') {
                setMaxLengthInput('strPersonalCampo2', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo3') {
                setMaxLengthInput('strPersonalCampo3', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo4') {
                setMaxLengthInput('strPersonalCampo4', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo5') {
                setMaxLengthInput('strPersonalCampo5', item.intMaxLength)
            } else if (item.strColumnName == 'strCodExterior') {
                setMaxLengthInput('codigoExterno', item.intMaxLength)
            } else if (item.strColumnName == 'strCodPensionista') {
                setMaxLengthInput('codigoPensionista', item.intMaxLength)
            } else if (item.strColumnName == 'strCodSalud') {
                setMaxLengthInput('codigoDeSalud', item.intMaxLength)
            }
        })
    }

    $(".disabled_Doc").attr("disabled", true)

    if (typeof _vartablaGeo !== 'undefined') {
        _vartablaGeo.destroy();
    }

    _vartablaGeo = $('#tableGeo').DataTable({
        searching: false,
        paging: false,
        info: false,
        ordering: false,
        language: {
            lengthMenu: 'Mostrar _MENU_ Filas',
            info: '(*) Las Casillas en X no se grabarán',
            infoEmpty: 'No hay Items para mostrar',
            search: '',
            sSearchPlaceholder: '',
            zeroRecords: '',
            infoFiltered: '',
            paginate: {
                previous: 'Anterior',
                next: 'Siguiente'
            }
        },
    });

    $("#txtNumGeo").val(1)

    $("#tableGeoBody").empty();

    $('#cboGeoArea').on('ifChanged', function () {
        if ($("#cboGeoArea").is(':checked')) {
            //$("#txtNumGeo").attr("disabled", false)
            $("#btnNuevaGeoArea").attr("disabled", false)
            getIndexGeo()
        } else {
            //$("#txtNumGeo").attr("disabled", true)
            $("#btnNuevaGeoArea").attr("disabled", true)
        }
    })

    $("#btn-limpiar-Intrevalos").on("click", function () {
        $("#txtCoor").val("")
        $("#txtNumGeo").val(1)
        $("#txtDireccionCoor").val("")
        $("#cboGeoArea").iCheck('unCheck')
    })

    $("#btn-clear-Geo").on("click", function () {
        $("#tableGeoBody").empty();
    })

    $("#btnNuevaGeoArea").on("click", function () {
        getIndexGeo()
    })

    function getIndexGeo() {
        $("#txtCoor").val("")
        $("#txtDireccionCoor").val("")
        if ($("#tableGeoBody tr").length == 0) {
            $("#txtNumGeo").val(1)
        } else {
            var index = 0
            $("#tableGeoBody tr").each(x => {
                var dato = $($("#tableGeoBody tr")[x]).find(".intGeoArea").html()
                if (dato != "") {
                    index = parseInt(dato)
                }
            })
            $("#txtNumGeo").val(index + 1)
        }
    }

    $("#btn-add-Geo").on("click", function () {
        var Geo = $("#txtCoor").val()
        var geoArea = false;
        var dir = $("#txtDireccionCoor").val()
        $("#txtCoor").val("")
        $("#txtDireccionCoor").val("")
        var index = ""
        var btnCoord = ""
        if ($("#cboGeoArea").is(':checked')) {
            geoArea = true;
            index = $("#txtNumGeo").val()
            btnCoord = `<span class="btn btn-success btn-xs btnAgregarCoor"> <i class="fa fa-plus"></i> </span>`
        }

        $("#tableGeoBody").append(`
            <tr class="GeoDetalle">
            <td class="intGeoArea">${index}</td>
            <td class="geo">${Geo}</td>
            <td class="geoDir">${dir}</td>
            <td><span class="btn btn-danger btn-xs btnQuitarCoor"> quitar </span>${btnCoord}</td>
            <td class="geoArea" hidden>${geoArea}</td>
            </tr>
        `)
    })

    $('#activarUsuarioAdmin').attr('disabled', true);
    $(`#loaderEditPersonal`).hide()
    $('.form-hide-empleado').show()
}

$('#btn-new-empleado').on('click', function () {
    validarSession()
    //$('.form-hide-empleado').show()
    $('#btn-save-change-empleado').show()
    $('#btn-editar-empleado').hide()
    activaUsuario = false;
    desactivaUsuario = false;
    activarAdmin = false;
    mostrarFormNuevoEmpleado(false)
})

function leaveAStepCallbackEmpleado(obj, context) {
    //alert('Leaving step ' + context.fromStep + ' to go to step ' + context.toStep)
    if (context.toStep == 4) {
        $('#btn-save-change-empleado').prop('disabled', false)
        //$('#btn-editar-empleado').prop('disabled', false)
    }
    return validateSteps(context.fromStep) // return false to stay on step and true to continue navigation
}


//COMENTADO HG 03.03.21
//function leaveAStepCallbackEmpleadoRegistro(obj, context) {
//    //alert('Leaving step ' + context.fromStep + ' to go to step ' + context.toStep)
//    if (context.toStep == 4) {
//        $('#btn-save-change-empleado').prop('disabled', false)
//        //$('#btn-editar-empleado').prop('disabled', false)
//    }
//    return validateStepsEmpleado(context.fromStep) // return false to stay on step and true to continue navigation
//}


//AÑADIDO HG 03.03.21
function leaveAStepCallbackEmpleadoRegistro(obj, context) {

     if (context.fromStep > context.toStep ) {
    
            return true;
     }
    
     if (context.fromStep == 1 && context.toStep == 2) {
    
         return validateStepsEmpleado(1);
     }
    
     if (context.fromStep == 1 && context.toStep == 3) {
    
         return validateStepsEmpleado(2);
    
     }
    
     if (context.fromStep == 1 && context.toStep == 4) {
    
         return validateStepsEmpleado(3);
    
     }    

     if (context.fromStep == 2 && context.toStep == 3) {

         return validateStepsEmpleado(2);
     }

     if (context.fromStep == 2 && context.toStep == 4) {

         return validateStepsEmpleado(3);
     }

     if (context.fromStep == 3 && context.toStep == 4 ) {

         return validateStepsEmpleado(3);
     }

     if (context.toStep == 4) {

        $('#btn-save-change-empleado').prop('disabled', false)
     }

    //else if (context.toStep > context.fromStep) {//toStep: PASO CLICKEADO, fromStep: PASO DESDE DONDE SE ESTA CLICKEANDO

    //    //REALIZA LA VALIDACION DE LOS CONTROLES PARA DEVOLVERME TRUE ó FALSE
    //    return validateStepsEmpleado(context.fromStep);
    //    //TRUE : QUE SI SE PUEDE IR A ESE PASO CLICKEADO
    //    //FALSE: QUE NO SE PUEDE IR AL PASO CLICKEADO
    //}
    //else {
    //    return true;
    //}
}






function onFinishCallbackEmpleado(objs, context) {
    if (validateAllSteps()) {
        //$('form').submit()
        $('#btn-save-change-empleado').prop('disabled', false)
        // $('#btn-editar-empleado').prop('disabled', false)
    }
}

function validateStepsEmpleado(stepnumber) {
    const { intIdMenu, formatoFecha } = configEmpleadoInicial()
    const titleToast = 'Nuevo Empleado'

    //Añadido HG 03.03.21
    var ResponsableInmediato = $('#select2-cboResponsableInmediato-container').text();
    var ResponsableContractual = $('#select2-cboResponsableContractual-container').text();
    
    var isStepValid = true

    // validate step 1
    if (stepnumber == 1) {
        if (
            $('#TipoDoc').val() != 0 &&
            $('#txtNumDoc').val().length > 1 &&
            $('#txtApePat').val().length > 1 &&
            $('#txtApeMat').val().length > 1 &&
            $('#txtNombres').val().length > 1 &&
            $('#txtFechaNac').val().length > 1 &&
            $("input[name='generoEmpleado']:radio").is(':checked') &&
            $('#Email_Emple').val().length > 4 &&
            ValidateEmail(getValueControl('#Email_Emple')) &&
            $('#celularEmpleado').val().length > 8
        ) {
            isStepValid = true
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
            isStepValid = false
        }
    }

    else if (stepnumber == 2) {
        if (
            $('#fotocheckPersonal').val().length > 3 &&
            $('#txtFechaAdmi').val().length > 4 &&
            $('#comboFiscalizacion').val() != 0 &&
            $('#nivelDeResponsabilidad').val() != 0 &&
            $('#cargoEmpleado').val() != 0 &&
            $('#planillaEmpleado').val() != 0 &&
            $('#cboDependencia').val() != 0 &&
            $('#unidadOrganizacionalCbo').val() != 0
        ) {
            isStepValid = true
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
            isStepValid = false
        }
    }


    else if (stepnumber == 3) {
        if (ResponsableContractual != "×Seleccione" && ResponsableInmediato != "×Seleccione") { //($("#cboResponsableInmediato option").length = 1 || $('#cboResponsableInmediato').val() != 0) && ($("#cboResponsableContractual option").length = 1 || $('#cboResponsableContractual').val() != 0) ||
            isStepValid = true
            $('#btn-save-change-empleado').prop('disabled', false)
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios (Responsables)' }, titleToast)
            isStepValid = false
        }
    }

    else if (stepnumber == 4) {
        if (($('#reglaDeNegocio option').length = 1 || $('#reglaDeNegocio').val() != 0) && ($('#tgHorarioFijo option').length = 1 || $('#tgHorarioFijo').val() != 0) && getValueControl('#marcadorMultiple').length >= 1) {
            isStepValid = true
            $('#btn-save-change-empleado').prop('disabled', false)
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios (Regla, Horario y/o Marcador)' }, titleToast)
            isStepValid = false
        }
    }

    return isStepValid
}
// Your Step validation logic
function validateSteps(stepnumber) {
    const { intIdMenu, formatoFecha } = configEmpleadoInicial()
    const titleToast = 'Editar Empleado'

    var isStepValid = true
    // validate step 1
    if (stepnumber == 1) {
        if (
            $('#txtApePat').val().length > 1 &&
            $('#txtApeMat').val().length > 1 &&
            $('#txtNombres').val().length > 1 &&
            $('#txtFechaNac').val().length > 1 &&
            $("input[name='generoEmpleado']:radio").is(':checked') &&
            $('#Email_Emple').val().length > 4 &&
            ValidateEmail(getValueControl('#Email_Emple')) &&
            $('#celularEmpleado').val().length > 8
        ) {
            isStepValid = true
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 2) {
        if (
            $('#fotocheckPersonal').val().length > 3 &&
            $('#txtFechaAdmi').val().length > 4 &&
            $('#comboFiscalizacion').val() != 0 &&
            $('#nivelDeResponsabilidad').val() != 0 &&
            $('#cargoEmpleado').val() != 0 &&
            $('#planillaEmpleado').val() != 0 &&
            $('#cboDependencia').val() != 0 &&
            $('#unidadOrganizacionalCbo').val() != 0
        ) {
            isStepValid = true
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 3) {
        if (($("#cboResponsableInmediato option").length = 1 || $('#cboResponsableInmediato').val() != 0) && ($("#cboResponsableContractual option").length = 1 || $('#cboResponsableContractual').val() != 0)) {
            isStepValid = true
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios (Responsables)' }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 4){
        if (($('#reglaDeNegocio option').length = 1 || $('#reglaDeNegocio').val() != 0) && ($('#tgHorarioFijo option').length = 1 || $('#tgHorarioFijo').val() != 0) && getValueControl('#marcadorMultiple').length >= 1) {
            isStepValid = true
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios (Regla, Horario y/o Marcador)' }, titleToast)
            isStepValid = false
        }
    }
    return isStepValid
}
function validateAllSteps() {
    var isStepValid = true
    // all step validation logic
    return isStepValid
}

function CargoImagenEmpleado() {
    const formdata = new FormData()
    const fileInput = document.getElementById('CargarImagen')
    formdata.append(fileInput.files[0].name, fileInput.files[0])
    const nameFile = fileInput.files[0].name
    var xhr = new XMLHttpRequest()

    xhr.open('POST', '/Personal/Upload')
    xhr.send(formdata)
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4 && xhr.status == 200) {
            DirLocal = xhr.responseText
            $('#VistaPrevia').html('<img id="imgCarga"  src=' + DirLocal + ' class="img-rounded img-logo-empleado" />')
            $('#txtRutaEmple').val(nameFile)
        }
    }

    return false
}
// mostrar--
async function EditarEmpleadoVista(idItemPersonalEdit, intIdUniOrg, intidPlanilla, intIdLocal) {
    const { intIdMenu } = configEmpleadoInicial()
    $('.form-hide-empleado .x_content').empty()
    $('.form-hide-empleado .x_content').html('')
    try {
        const resultForm = await $.ajax({ url: '/Personal/EditarEmpleado', type: 'POST', data: {} })
        if (resultForm !== '') {
            $('.form-hide-empleado .x_content').empty()
            $('.form-hide-empleado .x_content').html(resultForm)
            $('#wizard .form-hide-empleado').hide()
            $('#btn-editar-empleado').hide()
            $('.form-hide-empleado').hide()
            switcheryLoad()
            init_checkBox_styles()
            cargarDaterangePicker()
            init_daterangepicker()

            //Inicio de código para solucionar observación 1.2  HG 03.03.2021 
            $.post('/Personal/GetHabGeo', {},
                (response) => {
                    if (response) {
                        $("#wizarpaso5").show();
                    } else {
                        $("#wizarpaso5").hide();
                        $('.wizard_steps').find('li:eq(4)').remove();
                        $(".p-3").hide();
                        $("#step-5").hide();
                    }
                }
            )
            //Fin de código para solucionar observación 1.2  HG 03.03.2021

            //$('#btn-editar-empleado').prop('disabled', true)
            if (typeof $.fn.smartWizard != 'undefined') {
                $('#wizardEmpleado').smartWizard({
                    selected: 0,
                    keyNavigation: false,
                    enableFinishButton: true,
                    enableAllSteps: true,
                    onLeaveStep: leaveAStepCallbackEmpleado,
                    onFinish: onFinishCallbackEmpleado,
                })
                $('#wizard_verticle').smartWizard({
                    transitionEffect: 'slide',
                })

                $('.buttonNext').hide() //.addClass('btn btn-success');
                $('.buttonPrevious').hide() //.addClass('btn btn-primary');
                $('.buttonFinish').hide() //.addClass('btn btn-default');
            }
        }

        $('#CargarImagen').change(function (e) {
            const o = document.getElementById('CargarImagen')
            let foto = o.files[0]
            if (o.files.length == 0 || !/\.(jpeg|jpg|png|svg)$/i.test(foto.name)) {
                messageResponseMix({ type: 'infoc', message: 'Ingrese una imagen con alguno de los siguientes formatos: .jpeg/.jpg/.png.' }, 'Editar Empleado')
            } else {
                const img = new Image()
                img.onload = function () {
                    let widthImg = Number(this.width.toFixed(0))
                    let heightImg = Number(this.height.toFixed(0))
                    if (widthImg <= 200 && heightImg <= 200) {
                        messageResponseMix({ type: 'infoc', message: 'Las medidas deben ser mínimo: 200 x 200 px' }, 'Editar Empleado')
                    } else {
                        CargoImagenEmpleado()
                    }
                }

                img.src = URL.createObjectURL(foto)
            }
        })

        document.getElementById('delete').onclick = function () {
            $('#VistaPrevia').html('<img src = "/DirLogosRuta/descarga(1).jpg" />')
            $('#txtRutaEmple').val('')
            return false
        }

        // $('#tagsEmail').importTags('')
        // $('#tagsTelefono').importTags('')

        const camposAdicionales = await $.post('/Personal/ListarCamposAdicionales', { intIdMenu: intIdMenu, strNoEntidad: 'TGPERSONAL' })

        if (camposAdicionales.length) {
            $('#contendorCamposPersonal').empty()
            camposAdicionales.forEach(element => {
                let columHtml = `<div class="col-md-6 col-sm-6 col-xs-6">
                                    <div class="form-group">
                                        <label> ${element.strTitulo}</label>
                                        <input id="${element.strNomCampo}" type="text" class="form-control " placeholder="${element.strTitulo}" maxlength="255"/>
                                    </div>
                                </div>`
                $('#contendorCamposPersonal').append(columHtml)
            })
        }

        const caracteresMax = await $.post('/Personal/ListarCaracteresMax', {
            intIdMenu: intIdMenu,
            strMaestro: 'TGPERSONAL',
        })
        if (caracteresMax.length > 0) {
            caracteresMax.forEach(item => {
                if (item.strColumnName == 'strFotocheck') {
                    setMaxLengthInput('fotocheckPersonal', item.intMaxLength)
                } else if (item.strColumnName == 'strNombres') {
                    setMaxLengthInput('txtNombres', item.intMaxLength)
                } else if (item.strColumnName == 'strApePaterno') {
                    setMaxLengthInput('txtApePat', item.intMaxLength)
                } else if (item.strColumnName == 'strApeMaterno') {
                    setMaxLengthInput('txtApeMat', item.intMaxLength)
                } else if (item.strColumnName == 'strDireccion') {
                    setMaxLengthInput('TXTTIPVIA', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo1') {
                    setMaxLengthInput('strPersonalCampo1', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo2') {
                    setMaxLengthInput('strPersonalCampo2', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo3') {
                    setMaxLengthInput('strPersonalCampo3', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo4') {
                    setMaxLengthInput('strPersonalCampo4', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo5') {
                    setMaxLengthInput('strPersonalCampo5', item.intMaxLength)
                } else if (item.strColumnName == 'strCodExterior') {
                    setMaxLengthInput('codigoExterno', item.intMaxLength)
                } else if (item.strColumnName == 'strCodPensionista') {
                    setMaxLengthInput('codigoPensionista', item.intMaxLength)
                } else if (item.strColumnName == 'strCodSalud') {
                    setMaxLengthInput('codigoDeSalud', item.intMaxLength)
                }
            })
        }

        const tipoDocData = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: intIdMenu,
            strEntidad: 'TSTIPDOC02',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: '',
        })
        if (tipoDocData !== '') {
            $('#TipoDoc').empty()
            $('#TipoDoc').attr('disabled', false)
            tipoDocData.forEach(element => {
                $('#TipoDoc').append('<option value="' + element.intId + '" maxdata="' + element.strCodigo + '"  >' + element.strDescripcion + '</option>')
            })
        }

        const dataTipVia = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGTIPO_VIA',
            intIdFiltroGrupo: 0,
            strGrupo: '',
            strSubGrupo: '',
        })
        if (dataTipVia.length) {
            $('#TipVia').empty()
            $('#TipVia').attr('disabled', false)
            $('#TipVia').append('<option value="">Via</option>')
            dataTipVia.forEach(element => {
                $('#TipVia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        const dataCboPais = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPAIS',
            intIdFiltroGrupo: 0,
            strGrupo: 'EXISTE',
            strSubGrupo: '',
        })
        if (dataCboPais.length) {
            $('#CboPais').empty()
            $('#CboPais').attr('disabled', false)
            $('#CboPais').append('<option value="">Seleccione</option>')

            dataCboPais.forEach(element => {
                $('#CboPais').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        const dataCorreosPersonal = await $.post('/Personal/GetCorreosPersonal', {
            intIdMenu: 1,
            intIdPersonal: idItemPersonalEdit,
        })
        if (dataCorreosPersonal.length) {
            let dataCorreosInsert = ''
            dataCorreosPersonal.forEach(element => {
                if (element.bitFlPrincipal) {
                    $('#Email_Emple').val(element.strCorreo)
                } else {
                    dataCorreosInsert += element.strCorreo + ','
                }
            })
            if (dataCorreosInsert != '') {
                let cadenaEmail = dataCorreosInsert.slice(0, -1)
                $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="${cadenaEmail}" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
                //$('#tagsEmail').importTags(cadenaEmail)
            } else {
                $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
            }
        } else {
            $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
        }

        const dataTelefonosPersonal = await $.post('/Personal/GetTelefonosPersonal', {
            intIdMenu: 1,
            intIdPersonal: idItemPersonalEdit,
        })
        if (dataTelefonosPersonal.length) {
            let dataTelefonosInsert = ''
            dataTelefonosPersonal.forEach(element => {
                if (element.bitFlPrincipal) {
                    $('#celularEmpleado').val(element.strNumero)
                } else {
                    dataTelefonosInsert += element.strNumero + ','
                }
            })
            if (dataTelefonosInsert != '') {
                let cadenaTekl = dataTelefonosInsert.slice(0, -1)
                $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value="${cadenaTekl}"  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
                //$('#tagsTelefono').importTags(cadenaTekl)
            } else {
                $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
            }
        } else {
            $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
        }

        var mailformatEmail = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/

        $('#tagsEmail').tagsInput({
            width: 'auto',
            defaultText: 'Correos',
            placeholderColor: '#666666',
            pattern: mailformatEmail,
            interactive: true,
        })
        $('#tagsTelefono').tagsInput({
            width: 'auto',
            defaultText: 'Teléfonos',
            placeholderColor: '#666666',
            pattern: /^\d{9}$/,
            interactive: true,
        })

        const dataFiscalizacion = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPO1REGISTROTIPOFISCALIZACION',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: '',
        })
        if (dataFiscalizacion.length) {
            $('#comboFiscalizacion').empty()
            $('#comboFiscalizacion').append('<option value="0">Seleccione</option>')
            dataFiscalizacion.forEach(item => {
                $('#comboFiscalizacion').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataResponsabilidad = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPO1REGISTRO',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: '',
        })
        if (dataResponsabilidad.length) {
            $('#nivelDeResponsabilidad').empty()
            $('#nivelDeResponsabilidad').append('<option value="0">Seleccione</option>')
            dataResponsabilidad.forEach(item => {
                $('#nivelDeResponsabilidad').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataCargoEmpleado = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGCARGOREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGCARGO',
            strSubGrupo: 'U',
        })
        if (dataCargoEmpleado.length) {
            $('#cargoEmpleado').empty()
            $('#cargoEmpleado').append('<option value="0">Seleccione</option>')
            dataCargoEmpleado.forEach(item => {
                $('#cargoEmpleado').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataPlanillaEmpleado = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGPLANILLAREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGPLANILLA',
            strSubGrupo: 'U',
        })
        if (dataPlanillaEmpleado.length) {
            $('#planillaEmpleado').empty()
            $('#planillaEmpleado').append('<option value="0">Seleccione</option>')
            dataPlanillaEmpleado.forEach(item => {
                $('#planillaEmpleado').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataCategoriaEmpleado = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGCATEGORIAREGISTROEMPLEADO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGCATEGORIAEMPLEADO',
            strSubGrupo: 'U',
        })
        if (dataCategoriaEmpleado.length) {
            $('#categoriaEmpleado').empty()
            $('#categoriaEmpleado').append('<option value="0">Seleccione</option>')
            dataCategoriaEmpleado.forEach(item => {
                $('#categoriaEmpleado').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataTipoDePersonal = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPOPERSONREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGTIPOPERSON',
            strSubGrupo: 'U',
        })
        if (dataTipoDePersonal.length) {
            $('#tipoDePersonal').empty()
            $('#tipoDePersonal').append('<option value="0">Seleccione</option>')
            dataTipoDePersonal.forEach(item => {
                $('#tipoDePersonal').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataTgGrupoRegistro = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGGRUPOREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGGRUPO',
            strSubGrupo: 'U',
        })
        if (dataTgGrupoRegistro.length) {
            $('#tgGrupoRegistro').empty()
            $('#tgGrupoRegistro').append('<option value="0">Seleccione</option>')
            dataTgGrupoRegistro.forEach(item => {
                $('#tgGrupoRegistro').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataCentroDeCosto = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGCCOSTOREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGCCOSTO',
            strSubGrupo: 'U',
        })
        if (dataCentroDeCosto.length) {
            $('#centroDeCosto').empty()
            $('#centroDeCosto').append('<option value="0">Seleccione</option>')
            dataCentroDeCosto.forEach(item => {
                $('#centroDeCosto').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataCboEmpresa = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: 0,
            strGrupo: 'EMPRESA',
            strSubGrupo: 'U',
        })
        if (dataCboEmpresa.length) {
            $('#cboEmpresa').empty()
            $('#cboEmpresa').attr('disabled', false)
            $('#cboEmpresa').append('<option value="0">Seleccione</option>')
            dataCboEmpresa.forEach(element => {
                $('#cboEmpresa').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        const dataCboDependencia = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGJERARQORG',
            intIdFiltroGrupo: 0,
            strGrupo: 'DEPEN',
            strSubGrupo: 'EMPRESADEPEN',
        })

        if (dataCboDependencia.length) {
            $('#cboDependencia').empty()
            $('#cboDependencia').attr('disabled', false)
            $('#cboDependencia').append('<option value="0">Seleccione</option>')
            dataCboDependencia.forEach(element => {
                $('#cboDependencia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        const dataRespoDetalle = await $.post('/Personal/GetResponsablesPersonal', {
            intIdMenu: 1,
            intIdPersonal: idItemPersonalEdit,
        })
        let intIdTipoRespInmediato = null
        let intIdTipoRespContractual = null
        if (dataRespoDetalle.length) {
            dataRespoDetalle.forEach(item => {
                if (item.intIdTipoResp == 10) {
                    intIdTipoRespContractual = item.intIdPerResp
                } else {
                    intIdTipoRespInmediato = item.intIdPerResp
                }
            })
        }

        const datacboResponsableInmediato = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONALINMEDIATOOLIDERAZGO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGPERSONAL',
            strSubGrupo: 'U',
        })
        if (datacboResponsableInmediato.length) {
            $('#cboResponsableInmediato').empty()
            $('#cboResponsableInmediato').append('<option value="0">Seleccione</option>')
            $('#cboResponsableInmediato').attr('disabled', false)
            datacboResponsableInmediato.forEach(element => {
                $('#cboResponsableInmediato').append('<option value="' + element.intId + '"   >' + element.strDescripcion + '</option>')
                if (intIdTipoRespInmediato == element.intId) {
                    $('#cboResponsableInmediato').val(intIdTipoRespInmediato)
                    console.log("test")
                }
            })
            $('#cboResponsableInmediato').select2({
                language: {

                    noResults: function () {

                        return "No hay resultado";
                    },
                    searching: function () {

                        return "Buscando..";
                    }
                },
                placeholder: 'Seleccione',
                allowClear: true,
            })
        }

        const dataCboResponsableContractual = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONALCONTRACTUAL',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGPERSONAL',
            strSubGrupo: 'U',
        })
        if (dataCboResponsableContractual.length) {
            $('#cboResponsableContractual').empty()
            $('#cboResponsableContractual').append('<option value="0">Seleccione</option>')
            $('#cboResponsableContractual').attr('disabled', false)
            dataCboResponsableContractual.forEach(element => {
                $('#cboResponsableContractual').append('<option value="' + element.intId + '"   >' + element.strDescripcion + '</option>')
                if (intIdTipoRespContractual == element.intId) {
                    $('#cboResponsableContractual').val(intIdTipoRespContractual)
                }
            })
            $('#cboResponsableContractual').select2({
                language: {

                    noResults: function () {

                        return "No hay resultado";
                    },
                    searching: function () {

                        return "Buscando..";
                    }
                },
                placeholder: 'Seleccione',
                allowClear: true,
            })
        }

        //
        const dataReglaDeNegocio = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGREGLANEGREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGREGLANEG',
            strSubGrupo: 'U',
        })
        if (dataReglaDeNegocio.length) {
            $('#reglaDeNegocio').empty()
            $('#reglaDeNegocio').append('<option value="0">Seleccione</option>')
            dataReglaDeNegocio.forEach(item => {
                $('#reglaDeNegocio').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataTgHorarioFijo = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGHORARIOREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGHORARIO',
            strSubGrupo: 'U',
        })

        if (dataTgHorarioFijo.length) {
            $('#tgHorarioFijo').empty()
            $('#tgHorarioFijo').append('<option value="0">Seleccione</option>')
            dataTgHorarioFijo.forEach(item => {
                $('#tgHorarioFijo').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataMarcadorMultiple = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGMARCADORREGISTRO',
            intIdFiltroGrupo: intIdLocal,
            strGrupo: 'TGMARCADOR',
            strSubGrupo: 'U',
        })
        if (dataMarcadorMultiple.length) {
            $('#marcadorMultiple').empty()
            //$('#marcadorMultiple').append('<option value="0">Seleccione</option>');
            dataMarcadorMultiple.forEach(item => {
                $('#marcadorMultiple').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataMotivoDeCese = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGMOTIVOREGISTRO',
            intIdFiltroGrupo: 0,
            strGrupo: 'TGMOTIVO',
            strSubGrupo: '',
        })

        if (dataMotivoDeCese.length) {
            $('#mativoDeCese').empty()
            $('#mativoDeCese').append('<option value="0">Seleccione</option>')
            dataMotivoDeCese.forEach(item => {
                $('#mativoDeCese').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataTgTgGrupoliq = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGGRUPOLIQREGISTRO',
            intIdFiltroGrupo: intidPlanilla,
            strGrupo: 'TGGRUPOLIQ',
            strSubGrupo: 'U',
        })
        if (dataTgTgGrupoliq.length) {
            $('#tgTgGrupoliq').empty()
            $('#tgTgGrupoliq').append('<option value="0">Seleccione</option>')
            dataTgTgGrupoliq.forEach(item => {
                $('#tgTgGrupoliq').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataMarcadoresLista = await $.post('/Personal/GetMarcadoresPersonal', {
            intIdMenu: 1,
            intIdPersonal: idItemPersonalEdit,
        })
        if (dataMarcadoresLista.length) {
            const newArr = dataMarcadoresLista.map(function (val, index) {
                return val.intIdMarcador
            })
            $('#marcadorMultiple').val(newArr)
        }

    } catch (error) {
        console.error(error)
    }
}

async function editarEmpleado(idItemEdit) {
    const { intIdMenu } = configEmpleadoInicial()
    const { loaderHtml } = APPCONFIG
    $(`#loaderEditPersonal`).show()
    $(`#loaderEditPersonal`).html(`<div class="loaderContenedor"><div class="min-height-300">${loaderHtml}</div></div>`)

    const dataEmpleado = await $.post('/Personal/ObtenerRegistroEmpleado', { intIdPersonal: idItemEdit }, response => { })
    const estadoDeCargaVista = await EditarEmpleadoVista(idItemEdit, dataEmpleado[0].intIdUniOrgSup, dataEmpleado[0].intIdPlanilla, dataEmpleado[0].intIdLocal)
    validarEmpleadoControlesEmpleadop()
    console.log(dataEmpleado)
    if (dataEmpleado.length) {
        const data = dataEmpleado[0]

        const INTIDTPEVAL = data.intIdUbigeo
        const INTIDSUPUBI = data.intIdUbigSup
        const INTIDSUPUBIREGION = data.intIdUbiSupReg
        const intIdProvinciaMostrar = data.intIdUbiReg
        const intIdRegionMostrar = data.intIdUbiPais
        const intIdJerOrgLista = data.intIdJerOrg
        const intIdUniOrgLista = data.intIdUniOrg
        const intIdUniOrgSupLista = data.intIdUniOrgSup
        const intIdLocalLista = data.intIdLocal


        $("#cboEmpresa").val(intIdUniOrgSupLista)
        $('#cboDependencia').val(intIdJerOrgLista)
        $('#CboPais').val(data.intIdUbiSupPais)
        $('#intTipoOperacion').val('2')
        $('#intIdPersonalReg').val(data.intIdPersonal)
        $('#codigoDeRegistro').val(data.strCoPersonal.trim() + '-' + data.strNumRegis.trim())
        $('#codPersonalHideen').val(data.strCoPersonal)
        $('#numRegistroPersonalHideen').val(data.strNumRegis.trim())
        $('#fechaDeCeseValidar').val(data.dttFecCese)
        $('#fechaDefechaAdmision').val(data.dttFecAdmin)
        $('#TipoDoc').val(data.intIdTipDoc)
        $('#TipoDoc').prop('disabled', true)
        $('#txtNumDoc').val(data.strNumDoc)
        $('#txtNumDoc').prop('disabled', true)
        $('#txtApePat').val(data.strApePaterno)
        $('#txtApeMat').val(data.strApeMaterno)
        $('#txtNombres').val(data.strNombres)
        $('#txtFechaNac').val(data.dttFecNacim)
        $('#TipVia').val(data.intIdTipoVia)
        $('#TXTTIPVIA').val(data.strDireccion)
        $('#txtFechaAdmi').val(data.dttFecAdmin)
        $('#fotocheckPersonal').val(data.strFotocheck)
        $('#strPersonalCampo1').val(data.strPersoCampo1)
        $('#strPersonalCampo2').val(data.strPersoCampo2)
        $('#strPersonalCampo3').val(data.strPersoCampo3)
        $('#strPersonalCampo4').val(data.strPersoCampo4)
        $('#strPersonalCampo5').val(data.strPersoCampo5)
        if (data.bitflSexo == true) {
            $('#chck_mas').iCheck('check')
        } else if (data.bitflSexo == false) {
            $('#chck_fem').iCheck('check')
        }
        if (data.bitFlActivo == false) {
            $('#checkEstadoEmpleado').html(`<input type="checkbox" class="js-switch"  id="estadoEmpleadoActivo" /> Activo`)
            switcheryLoad()
        } else if (data.bitFlActivo == true) {
            $('#checkEstadoEmpleado').html(`<input type="checkbox" class="js-switch" checked id="estadoEmpleadoActivo" /> Activo`)
            switcheryLoad()
        }
        $('#CboPais').val(data.intIdUbiSupPais)
        $('#fotocheckPersonal').val(data.strFotocheck)
        $('#txtIntidUbigeo').val(data.intIdUbigeo)
        $('#Mensaje_Info').css('color', 'green')
        if (data.imgFoto != null) {
            Imagen_GC(data.imgFoto, "Empleado");//añadido 26.03.2021
            //$('#VistaPrevia').html(`<img id="imgCarga"  src="/DirEmpleadosRuta/${data.imgFoto}" class="img-rounded img-logo-empleado"/>`)
            $('#txtRutaEmple').val(data.imgFoto)
        } else {
            $('#VistaPrevia').html(`<img id="imgCarga"  src="/images/descarga(1).jpg" class="img-rounded img-logo-empleado"/>`)
            $('#txtRutaEmple').val('')
        }
        $('#nivelDeResponsabilidad').val(data.intIdTipoResp)
        $('#comboFiscalizacion').val(data.intIdTipFisc)
        $('#planillaEmpleado').val(data.intIdPlanilla)
        $('#cargoEmpleado').val(data.intIdCargo)
        $('#categoriaEmpleado').val(data.intIdCateg)
        $('#tipoDePersonal').val(data.intIdTiPers)
        $('#centroDeCosto').val(data.intIdCCosto)
        $('#codigoExterno').val(data.strCodExterior)
        $('#codigoDeSalud').val(data.strCodSalud)
        $('#codigoPensionista').val(data.strCodPensionista)
        $('#tgGrupoRegistro').val(data.intIdGrupo)

        if (data.bitContratoInd) {
            $('#contradoIndeterminado').iCheck('check')
        }
        if (data.bitFlfotomovil) {
            $('#cboTomarFoto').iCheck('check')
        }
        if (data.dttFecCese != '') {
            $('#fechaCeseChecbox').iCheck('check')
            $('#txtFechaCese').val(data.dttFecCese)
            $('#mativoDeCese').val(data.intIdMotiCese)
            $('#tgTgGrupoliq').val(data.intIdGrupoLiq)

            $('#tgTgGrupoliq').attr('disabled', false)
            $('#txtFechaCese').attr('disabled', false)
            $('#mativoDeCese').attr('disabled', false)
        }
        $('#reglaDeNegocio').val(data.intIdReglaNeg)
        $('#tgHorarioFijo').val(data.intIdHorario)
        if (data.bitActivarUsuario === true) {
            $('#activarUsuarioCbo').iCheck('check')
            $('#activarUsuarioAdmin').attr('disabled', false);
        } else {
            $('#activarUsuarioAdmin').attr('disabled', true);
            $('#cboPerfilAdmin').attr('disabled', true);
        }
        activaUsuario = data.bitActivarUsuario
        desactivaUsuario = data.bitActivarUsuario
        activarAdmin = data.bitPerfilAdmin

        if (data.bitPerfilAdmin === true) {
            $('#activarUsuarioAdmin').iCheck('check')
            $('#cboPerfilAdmin').attr('disabled', false);
        } else {
            $('#cboPerfilAdmin').attr('disabled', true);
        }

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGPERFIL',
                intIdFiltroGrupo: 0,
                strGrupo: 'PERFILEMPLEADO',
                strSubGrupo: 'U',
            },
            response => {
                $('#cboPerfilAdmin').empty()
                $('#cboPerfilAdmin').append('<option value="0">Seleccione</option>')
                response.forEach(item => {
                    $('#cboPerfilAdmin').append('<option value="' + item.intidTipo + '">' + item.strDeTipo + '</option>')
                    if (item.intidTipo == data.intIdPerfil) {
                        $('#cboPerfilAdmin').val(item.intidTipo)
                    }
                })
            }
        )

        $.post(
            '/Personal/ListarCombos',
            {
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: INTIDSUPUBI,
                strGrupo: 'DIST',
                strSubGrupo: '',
            },
            response => {
                $('#CboDistrito').empty()
                $('#CboDistrito').attr('disabled', false)
                $('#CboDistrito').append('<option value="">Seleccione</option>')
                response.forEach(element => {
                    $('#CboDistrito').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    if (element.intidTipo == INTIDTPEVAL) {
                        $('#CboDistrito').val(element.intidTipo)
                        $('#txtUbigeo').val(element.strDeTipo)
                        $('#txtUbigeo').attr('disabled', true)
                    }
                })
            }
        )

        $.post(
            '/Personal/ListarCombos',
            {
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: INTIDSUPUBIREGION,
                strGrupo: 'REG',
                strSubGrupo: '',
            },
            response => {
                $('#CboProvincia').empty()
                $('#CboProvincia').attr('disabled', false)
                $('#CboProvincia').append('<option value="">Seleccione</option>')
                response.forEach(element => {
                    $('#CboProvincia').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    if (element.intidTipo == intIdProvinciaMostrar) {
                        $('#CboProvincia').val(element.intidTipo)
                    }
                })
            }
        )

        $.post(
            '/Personal/ListarCombos',
            {
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: data.intIdUbiSupPais,
                strGrupo: 'DEPART',
                strSubGrupo: '',
            },
            response => {
                $('#CboRegion').empty()
                $('#CboRegion').attr('disabled', false)
                $('#CboRegion').append('<option value="">Seleccione</option>')
                response.forEach(element => {
                    $('#CboRegion').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    if (element.intidTipo == intIdRegionMostrar) {
                        $('#CboRegion').val(element.intidTipo)
                    }
                })
            }
        )

        const dataCboEmpresa = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: intIdUniOrgSupLista,
            strGrupo: 'LOCAL',
            strSubGrupo: 'U',
        })
        if (dataCboEmpresa.length) {
            $('#cboLocal').empty()
            $('#cboLocal').attr('disabled', false)
            $('#cboLocal').append('<option value="0">Seleccione</option>')
            dataCboEmpresa.forEach(element => {
                $('#cboLocal').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                if (intIdLocalLista == element.intidTipo) {
                    $("#cboLocal").val(element.intidTipo)
                }
            })
        }

        $.post('/Personal/ListarCombos', {
            strEntidad: 'TGPERFIL',
            intIdFiltroGrupo: intIdUniOrgLista,
            strGrupo: 'UNIORG2',
            strSubGrupo: 'U'
        }, response => {
            $('#unidadOrganizacionalCbo').empty()
            $('#unidadOrganizacionalCbo').attr('disabled', false)
            $('#unidadOrganizacionalCbo').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#unidadOrganizacionalCbo').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                if (intIdUniOrgLista == element.intidTipo) {
                    $('#unidadOrganizacionalCbo').val(element.intidTipo)
                }
            })
        })
    }



    //MARCA CON DNI lunes22 //HG 23.03.21 Marcación con DNI POST Carga los controles //<!-- AÑADIDO HG 23.03.21 HEBERT23-->
    const dataEmpleadoMarcaDni = await $.post('/Personal/ObtenerRegistroEmpleadoMarcaDni', { intIdPersonal: idItemEdit }, response => { })
    console.log(dataEmpleadoMarcaDni);
    if (dataEmpleado.length) {
        const data = dataEmpleadoMarcaDni[0]

        if (data.bitHabilitarMarcaDNI) {

            $('#CheckboxVigenciaMarcaConDni').iCheck('check');
            $('#txtFechaFinVegencia').val(data.dttFechaFinVegencia);
            $('#txtFechaInicioVegencia').val(data.dttFechaInicioVegencia);
        }

        if (data.bitHabilitarSupervisorCom) {

            $('#CheckboxHabilitarSupervisorDeCom').iCheck('check');

        }


    };

    $("#cboLocal").change(function () {
        let id = $(this).val()
        $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGMARCADORREGISTRO',
            intIdFiltroGrupo: id,
            strGrupo: 'TGMARCADOR',
            strSubGrupo: 'U',
        }, response => {
            $('#marcadorMultiple').empty()
            response.forEach(item => {
                $('#marcadorMultiple').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
           

            })
            })

             //FORM EDITAR HG 03.03.21 Añadido
        //if ($('#marcadorMultiple').val() == '') {

            new PNotify({
                title: '',
                text: 'Verificar si el Local seleccionado no tiene Marcador',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

        //}
    })

    $("#cboEmpresa").change(function () {

        var intidUniOrg = $(this).val()

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: 1,
                strEntidad: 'TGPERSONAL',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'LOCAL',
                strSubGrupo: 'U'
            },
            response => {
                $('#cboLocal').empty()
                $('#cboLocal').attr('disabled', false)
                $('#cboLocal').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#cboLocal').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGCARGOREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGCARGO',
                strSubGrupo: 'U'
            },
            response => {
                $('#cargoEmpleado').empty()
                $('#cargoEmpleado').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#cargoEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGPLANILLAREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGPLANILLA',
                strSubGrupo: 'U'
            },
            response => {
                $('#planillaEmpleado').empty()
                $('#planillaEmpleado').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#planillaEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGCATEGORIAREGISTROEMPLEADO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGCATEGORIAEMPLEADO',
                strSubGrupo: 'U'
            },
            response => {
                $('#categoriaEmpleado').empty()
                $('#categoriaEmpleado').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#categoriaEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGTIPOPERSONREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGTIPOPERSON',
                strSubGrupo: 'U'
            },
            response => {
                $('#tipoDePersonal').empty()
                $('#tipoDePersonal').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#tipoDePersonal').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGGRUPOREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGGRUPO',
                strSubGrupo: 'U'
            },
            response => {
                $('#tgGrupoRegistro').empty()
                $('#tgGrupoRegistro').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#tgGrupoRegistro').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGCCOSTOREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGCCOSTO',
                strSubGrupo: 'U'
            },
            response => {
                $('#centroDeCosto').empty()
                $('#centroDeCosto').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#centroDeCosto').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $('#marcadorMultiple').empty()

    })

    // intIdJerOrgLista
    $(`#loaderEditPersonal`).hide()
    $('#wizard .form-hide-empleado').show()
    $('#btn-save-change-empleado').hide()
    $('#btn-editar-empleado').show()
    $('.form-hide-empleado').show()

    $('#cboDependencia').change(function () {
        let idDependencia = $(this).val()
        if (idDependencia == '0') {
            messageResponseMix({ type: 'info', message: 'Seleccione una Dependencia ' }, 'Registro Empleado')
            return false
        }
        $.post('/Personal/ListarCombos', {
            strEntidad: 'TGPERFIL',
            intIdFiltroGrupo: idDependencia,
            strGrupo: 'UNIORG',
            strSubGrupo: ''
        }, response => {
            $('#unidadOrganizacionalCbo').empty()
            $('#unidadOrganizacionalCbo').attr('disabled', false)
            $('#unidadOrganizacionalCbo').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#unidadOrganizacionalCbo').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
            })
        })
    })
    $('#fechaCeseChecbox').on('ifChanged', function () {
        if ($('#fechaCeseChecbox').is(':checked') == true) {
            $('#tgTgGrupoliq').attr('disabled', false)
            $('#txtFechaCese').attr('disabled', false)
            $('#mativoDeCese').attr('disabled', false)
        } else if ($('#fechaCeseChecbox').is(':checked') == false) {
            $('#tgTgGrupoliq').attr('disabled', true)
            $('#tgTgGrupoliq').val(0)
            $('#txtFechaCese').attr('disabled', true)
            $('#txtFechaCese').val("")
            $('#mativoDeCese').attr('disabled', true)
            $('#mativoDeCese').val("")
        }
    })

    $("#planillaEmpleado").change(function () {
        let id = $(this).val()
        $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGGRUPOLIQREGISTRO',
            intIdFiltroGrupo: id,
            strGrupo: 'TGGRUPOLIQ',
            strSubGrupo: 'U',
        },
            (response) => {
                $('#tgTgGrupoliq').empty()
                $('#tgTgGrupoliq').append('<option value="0">Seleccione</option>')
                response.forEach(item => {
                    $('#tgTgGrupoliq').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
                })
            }
        )
    })

    $('#activarUsuarioCbo').on('ifChanged', function () {
        if ($('#activarUsuarioCbo').is(':checked') == true) {
            $('#activarUsuarioAdmin').attr('disabled', false)
        } else if ($('#activarUsuarioCbo').is(':checked') == false) {
            $('#activarUsuarioAdmin').iCheck('uncheck')
            $('#activarUsuarioAdmin').attr('disabled', true)
        }
        $('#cboPerfilAdmin').attr('disabled', true)
        $('#cboPerfilAdmin').val(0)
    })

    $('#activarUsuarioAdmin').on('ifChanged', function () {
        if ($('#activarUsuarioAdmin').is(':checked') == true) {
            $('#cboPerfilAdmin').attr('disabled', false)
        } else if ($('#activarUsuarioAdmin').is(':checked') == false) {
            $('#cboPerfilAdmin').attr('disabled', true)
            $('#cboPerfilAdmin').attr('disabled', true)
            $('#cboPerfilAdmin').val(0)
        }
    })


    $('#CboPais').on('change', function () {
        var Valxpais = $('#CboPais').val()

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'DEPART',
                strSubGrupo: '',
            },
            response => {
                $('#CboRegion').empty()
                $('#CboRegion').attr('disabled', false)
                $('#CboRegion').append('<option value="">Seleccione</option>')

                response.forEach(element => {
                    $('#CboRegion').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        )
    })

    $('#CboRegion').on('change', function () {
        var Valxpais = $('#CboRegion').val()
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'REG',
                strSubGrupo: '',
            },
            response => {
                $('#CboProvincia').empty()
                $('#CboProvincia').attr('disabled', false)
                $('#CboProvincia').append('<option value="">Seleccione</option>')

                response.forEach(element => {
                    $('#CboProvincia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        )
    })

    $('#CboProvincia').on('change', function () {
        var Valxpais = $('#CboProvincia').val()
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'DIST',
                strSubGrupo: '',
            },
            response => {
                $('#CboDistrito').empty()
                $('#CboDistrito').attr('disabled', false)
                $('#CboDistrito').append('<option value="">Seleccione</option>')
                response.forEach(element => {
                    $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        )
    })

    if (typeof _vartablaGeo !== 'undefined') {
        _vartablaGeo.destroy();
    }

    _vartablaGeo = $('#tableGeo').DataTable({
        searching: false,
        paging: false,
        info: false,
        ordering: false,
        language: {
            lengthMenu: 'Mostrar _MENU_ Filas',
            info: '(*) Las Casillas en X no se grabarán',
            infoEmpty: 'No hay Items para mostrar',
            search: '',
            sSearchPlaceholder: '',
            zeroRecords: '',
            infoFiltered: '',
            paginate: {
                previous: 'Anterior',
                next: 'Siguiente'
            }
        },
    });

    $("#txtNumGeo").val(1)

    $("#tableGeoBody").empty();

    const datacoordenadas = await $.post('/Personal/getcoordenadaspersonal', {
        intIdPersonal: idItemEdit
    })
    console.log(datacoordenadas)
    if (datacoordenadas.length) {
        datacoordenadas.forEach(e => {

            var btnCoord = ""
            if (e.bitFlGeoArea) {
                btnCoord = `<span class="btn btn-success btn-xs btnAgregarCoor"> <i class="fa fa-plus"></i></span>`
            }

            $("#tableGeoBody").append(`
            <tr class="GeoDetalle">
            <td class="intGeoArea">${e.intIdGeoArea}</td>
            <td class="geo">${e.strCoord}</td>
            <td class="geoDir">${e.strDireccionCoord}</td>
            <td><span class="btn btn-danger btn-xs btnQuitarCoor"> quitar </span>${btnCoord}</td>
            <td class="geoArea" hidden>${e.bitFlGeoArea}</td>
            </tr>
        `)
        })
    }


    $('#cboGeoArea').on('ifChanged', function () {
        if ($("#cboGeoArea").is(':checked')) {
            //$("#txtNumGeo").attr("disabled", false)
            $("#btnNuevaGeoArea").attr("disabled", false)
            getIndexGeo()
        } else {
            //$("#txtNumGeo").attr("disabled", true)
            $("#btnNuevaGeoArea").attr("disabled", true)
        }
    })

    $("#btn-limpiar-Intrevalos").on("click", function () {
        $("#txtCoor").val("")
        $("#txtNumGeo").val(1)
        $("#txtDireccionCoor").val("")
        $("#cboGeoArea").iCheck('unCheck')
    })

    $("#btn-clear-Geo").on("click", function () {
        $("#tableGeoBody").empty();
    })

    $("#btnNuevaGeoArea").on("click", function () {
        getIndexGeo()
    })

    function getIndexGeo() {
        $("#txtCoor").val("")
        $("#txtDireccionCoor").val("")
        if ($("#tableGeoBody tr").length == 0) {
            $("#txtNumGeo").val(1)
        } else {
            var index = 0
            $("#tableGeoBody tr").each(x => {
                var dato = $($("#tableGeoBody tr")[x]).find(".intGeoArea").html()
                if (dato != "") {
                    index = parseInt(dato)
                }
            })
            $("#txtNumGeo").val(index + 1)
        }
    }

    $("#btn-add-Geo").on("click", function () {
        var Geo = $("#txtCoor").val()
        var geoArea = false;
        var dir = $("#txtDireccionCoor").val()
        $("#txtCoor").val("")
        $("#txtDireccionCoor").val("")
        var index = ""
        var btnCoord = ""
        if ($("#cboGeoArea").is(':checked')) {
            geoArea = true;
            index = $("#txtNumGeo").val()
            btnCoord = `<span class="btn btn-success btn-xs btnAgregarCoor"> <i class="fa fa-plus"></i> </span>`
        }

        $("#tableGeoBody").append(`
            <tr class="GeoDetalle">
            <td class="intGeoArea">${index}</td>
            <td class="geo">${Geo}</td>
            <td class="geoDir">${dir}</td>
            <td><span class="btn btn-danger btn-xs btnQuitarCoor"> quitar </span>${btnCoord}</td>
            <td class="geoArea" hidden>${geoArea}</td>
            </tr>
        `)



        $(".btnAgregarCoor").on("click", function () {
            var index = parseInt($(this).parents("tr").find(".intGeoArea").html())
            $("#txtNumGeo").val(index)
            $("#cboGeoArea").iCheck('Check')
        })


    })

}

$(document).on("click", ".btnAgregarCoor", function () {
    var index = parseInt($(this).parents("tr").find(".intGeoArea").html())
    $("#cboGeoArea").iCheck('Check')
    $("#txtNumGeo").val(index)
})

$(document).on("click", ".btnQuitarCoor", function () {

    var GeoArea = $(this).parents("tr").find(".intGeoArea").html()
    var elemento = this;
    if (GeoArea == "" || GeoArea == "0") {
        $(this).parents("tr").remove()
    } else {
        if ($("#tableGeoBody").find(".intGeoArea:contains(" + GeoArea + ")").length == 2) {
            swal({
                title: "Eliminar Coordenada",
                text: "¿Está seguro de eliminar la Coordenada?, Si lo hace esta se volvera una coordenada individual",
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, eliminar",
                cancelButtonText: "No, cancelar",
            }).then(function (isConfirm) {
                swal("Eliminado", "Se elimino la coordenada", "success");
                $(elemento).parents("tr").remove()
                var tr = $("#tableGeoBody").find(".intGeoArea:contains(" + GeoArea + ")").parent("tr")
                tr.find(".btnAgregarCoor").remove()
                tr.find(".geoArea").html("false")
                $("#tableGeoBody").find(".intGeoArea:contains(" + GeoArea + ")").html("")
            }, function (dismiss) {
                swal("Cancelado", "La Operación fue cancelada", "error");
            });
        } else {
            $(this).parents("tr").remove()
        }
    }
})

function eliminarEmpleado(idItemDelete, textInfo = '¿Esta seguro de eliminar el registro?') {
    const { intIdMenu, tituloEliminarRegistro } = configEmpleadoInicial()
    swal({
        title: tituloEliminarRegistro,
        text: textInfo,
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'No, cancelar',
    })
        .then(isConfirm => {
            validarSession()
            $.post('/Personal/EliminarEmpleado', { intIdMenu: intIdMenu, intIdPersonal: idItemDelete }, respo => {

                if (respo.type !== '') {
                    var tipo = 'Eliminado!';
                    if (respo.type === 'error') {
                        tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                    }
                    if (respo.type === 'success') {
                        traerDatosEmpleados()
                        $('.form-hide-empleado').hide()
                        $('#btn-save-change-empleado').show()
                        $('#btn-editar-empleado').hide()
                    }
                    swal(tipo, respo.message, respo.type);
                }
            })
        })
        .catch(err => {
            swal('Cancelado', 'La Operación fue cancelada', 'error')
        })
}

function ValidateEmail(email) {
    const mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
    if (email.match(mailformat)) {
        return true
    }
    return false
}

function getValueControl(idControl) {
    let data = $(idControl).val()
    if (data.length > 0) {
        //data.trim()
    }
    return data
}

function focusControl(idControl) {
    return $(idControl).focus()
}


function registrarOActualizar(tipoOperacionPass) {
    const { intIdMenu, formatoFecha } = configEmpleadoInicial()
    let titleToast = 'Nuevo Empleado'
    if (tipoOperacionPass == 2) {
        titleToast = 'Editar Empleado'
    }

    let cboResponsableInmediato = $('#cboResponsableInmediato').val()
    let cboResponsableContractual = $('#cboResponsableContractual').val()

    const otrosCorreosData = $.map($('#TagEmailContainer .tagsinput span span'), function (e, i) {
        return $(e)
            .text()
            .trim()
    })
    const otrosTelefonosData = $.map($('#tagTelefonosContainer .tagsinput span span'), function (e, i) {
        return $(e)
            .text()
            .trim()
    })

    const otrosCorreos = otrosCorreosData.filter(item => {
        return ValidateEmail(item) === true
    })

    let generoEstado = false
    let contradoIndeterminado = false
    let estadoActivoPersonal = false
    let activarUsuarioCbo = false
    let usuarioAdmin = false
    let bitFlfotomovil = false
    let intIdPerfil = 0


    let estadoHabilitarMarcaDNI = false
    let estadoHabilitarSupervisorDeCom = false


    if ($('.radioMasculino').is(':checked')) {
        generoEstado = true
    }

    if ($('#contradoIndeterminado').is(':checked')) {
        contradoIndeterminado = true
    }

    if ($('#estadoEmpleadoActivo').is(':checked')) {
        estadoActivoPersonal = true
    }

    if ($('#activarUsuarioCbo').is(':checked')) {
        activarUsuarioCbo = true
    }

    if ($('#activarUsuarioAdmin').is(':checked')) {
        usuarioAdmin = true
        intIdPerfil = $('#cboPerfilAdmin').val()
    }


    if ($('#cboTomarFoto').is(':checked')) {
        bitFlfotomovil = true
    }


    var dttFechaInicioVegencia_ = '';
    var dttFechaFinVegencia_ = '';


    //Añadido HG 19.03.21 - Para Toma de Consumos con DNI 
    if ($('#CheckboxVigenciaMarcaConDni').is(':checked')) {

        estadoHabilitarMarcaDNI = true
        dttFechaInicioVegencia_ = $('#txtFechaInicioVegencia').val();
        dttFechaFinVegencia_ = $('#txtFechaFinVegencia').val();

    }

    //<!-- AÑADIDO HG 23.03.21 HEBERT23-->
    if ($('#CheckboxHabilitarSupervisorDeCom').is(':checked')) {

        estadoHabilitarSupervisorDeCom = true
    }


    if (getValueControl('#TipoDoc') == '0' && $("#TipoDoc option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Tipo Documento)' }, titleToast)
        focusControl('#TipoDoc')
        return false
    } else if (getValueControl('#txtNumDoc').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Número Documento)' }, titleToast)
        focusControl('#txtNumDoc')
        return false
    } else if (getValueControl('#txtApePat').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Apellido Paterno)' }, titleToast)
        focusControl('#txtApePat')
        return false
    } else if (getValueControl('#txtApeMat').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Apellido Materno)' }, titleToast)
        focusControl('#txtApeMat')
        return false
    } else if (getValueControl('#txtNombres').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Nombres)' }, titleToast)
        focusControl('#txtNombres')
        return false
    } else if (getValueControl('#txtFechaNac').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Fecha de Nacimiento)' }, titleToast)
        focusControl('#txtFechaNac')
        return false
    } else if (!$("input[name='generoEmpleado']:radio").is(':checked')) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Género)' }, titleToast)
        return false
    } else if (getValueControl('#Email_Emple').length < 1 && !ValidateEmail(getValueControl('#Email_Emple'))) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Email)' }, titleToast)
        focusControl('#Email_Emple')
        return false
    } else if (getValueControl('#celularEmpleado').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Celular)' }, titleToast)
        focusControl('#celularEmpleado')
        return false
    } else if (getValueControl('#fotocheckPersonal').length < 1) {
        $('#wizard').smartWizard('goToStep', 2)
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Fotocheck)' }, titleToast)
        focusControl('#fotocheckPersonal')
        return false
    } else if (getValueControl('#txtFechaAdmi').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Fecha de Admisión)' }, titleToast)
        focusControl('#txtFechaAdmi')
        return false
    } else if (getValueControl('#marcadorMultiple').length <= 0) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Marcador)' }, titleToast)
        focusControl('#marcadorMultiple')
        return false
    }

    let marcadorMultiple = getValueControl('#marcadorMultiple')
    let otrosCorreosInsert = []
    otrosCorreosInsert.push({
        intIdPerCorr: 0,
        intIdPersonal: 0,
        strCorreo: getValueControl('#Email_Emple'),
        bitFlPrincipal: true,
        bitFlEliminado: false,
    })
    otrosCorreos.forEach(item => {
        otrosCorreosInsert.push({
            intIdPerCorr: 0,
            intIdPersonal: 0,
            strCorreo: item,
            bitFlPrincipal: false,
            bitFlEliminado: false,
        })
    })

    let otrosTelefonosInsert = []
    otrosTelefonosInsert.push({
        intIdPerTele: 0,
        intIdPersonal: 0,
        strNumero: getValueControl('#celularEmpleado'),
        bitFlPrincipal: true,
        strAnexo: ' ',
        bitFlEliminado: false,
    })
    otrosTelefonosData.forEach(item => {
        otrosTelefonosInsert.push({
            intIdPerTele: 0,
            intIdPersonal: 0,
            strNumero: item,
            bitFlPrincipal: false,
            strAnexo: '',
            bitFlEliminado: false,
        })
    })

    let otrosMarcadoresInsert = []
    marcadorMultiple.forEach(item => {
        otrosMarcadoresInsert.push({
            intIdPerMarc: false,
            intIdPersonal: 0,
            intIdSoft: 0,
            intIdMarcador: item,
            dttFecAsig: moment().format(formatoFecha),
            bitFlEliminado: false,
        })
    })

    let otrosResponsabilidadInsert = []

    if (cboResponsableInmediato != 0 && cboResponsableInmediato != null) {
        otrosResponsabilidadInsert.push({
            intIdPerRespDet: 0,
            intIdPersonal: 0,
            intIdPerResp: cboResponsableInmediato,
            intIdTipoResp: 9,
            bitVigente: true,
            bitFlEliminado: false,
            intIdUsuarReg: 1,
        })
    }

    if (cboResponsableContractual != 0 && cboResponsableContractual != null) {
        otrosResponsabilidadInsert.push({
            intIdPerRespDet: 0,
            intIdPersonal: 0,
            intIdPerResp: cboResponsableContractual,
            intIdTipoResp: 10,
            bitVigente: true,
            bitFlEliminado: false,
            intIdUsuarReg: 1,
        })
    }

    let imagePersonal = null
    let numRegistroPersonalHideen = '000'
    let strCoPersonalRegistro = '000'
    let subsidioPorAlimentacion = false
    let liniaDeCreditos = false

    if ($('#txtRutaEmple').val() != '') {
        imagePersonal = $('#txtRutaEmple').val()
    }

    if ($('#codPersonalHideen').val() != '') {
        strCoPersonalRegistro = $('#codPersonalHideen').val()
    }

    if ($('#numRegistroPersonalHideen').val() != '') {
        numRegistroPersonalHideen = $('#numRegistroPersonalHideen').val()
    }

    if ($('#subsidioPorAlimentacion').is(':checked')) {
        subsidioPorAlimentacion = true
    }
    if ($('#liniaDeCreditos').is(':checked')) {
        liniaDeCreditos = true
    }

    var comboFiscalizacion = $('#comboFiscalizacion').val()
    if (comboFiscalizacion == 0 && $("#comboFiscalizacion option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione una Fizcalización',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    var nivelDeResponsabilidad = $('#nivelDeResponsabilidad').val()
    if (nivelDeResponsabilidad == 0 && $("#nivelDeResponsabilidad option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione un Nivel de Responsabilidad',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    var unidadOrganizacionalCbo = $('#unidadOrganizacionalCbo').val()
    if (unidadOrganizacionalCbo == 0 && $("#unidadOrganizacionalCbo option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione una Unidad Organizacional',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    var cargoEmpleado = $('#cargoEmpleado').val()
    if (cargoEmpleado == 0 && $("#cargoEmpleado option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione un Cargo',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    var planillaEmpleado = $('#planillaEmpleado').val()
    if (planillaEmpleado == 0 && $("#planillaEmpleado option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione una Planilla',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    var categoriaEmpleado = $('#categoriaEmpleado').val()
    //if (categoriaEmpleado == 0 && $("#categoriaEmpleado option").length > 1) {
    //    new PNotify({
    //        title: titleToast,
    //        text: 'Seleccione una Categoria',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });

    //    return;
    //}

    var tipoDePersonal = $('#tipoDePersonal').val()
    //if (tipoDePersonal == 0 && $("#tipoDePersonal option").length > 1) {
    //    new PNotify({
    //        title: titleToast,
    //        text: 'Seleccione un Tipo de Personal',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });

    //    return;
    //}

    var tgGrupoRegistro = $('#tgGrupoRegistro').val()
    //if (tgGrupoRegistro == 0 && $("#tgGrupoRegistro option").length > 1) {
    //    new PNotify({
    //        title: titleToast,
    //        text: 'Seleccione un Grupo',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });

    //    return;
    //}

    var centroDeCosto = $('#centroDeCosto').val()
    //if (centroDeCosto == 0 && $("#centroDeCosto option").length > 1) {
    //    new PNotify({
    //        title: titleToast,
    //        text: 'Seleccione un Centro de Costo',
    //        type: 'info',
    //        delay: 3000,
    //        styling: 'bootstrap3',
    //        addclass: 'dark'
    //    });

    //    return;
    //}



    //RECOGER LAS FECHAS DE LOS CONTROLES Y USAR EL MOMENT()
    var txtFechaInicioVegencia_ = $('#txtFechaInicioVegencia').val();
    var txtFechaInicioVegencia_mas_uno = moment(txtFechaInicioVegencia_).add('m', 60).format('YYYY-MM-DD HH:mm:ss');
    var txtFechaFinVegencia_ = $('#txtFechaFinVegencia').val();


    //QUE LA FECHA DE INICIO NO SEA MAYOR QUE LA HORA FINAL
    if ($('#CheckboxVigenciaMarcaConDni').is(':checked') == true) {

        if (txtFechaInicioVegencia_ == '' || txtFechaFinVegencia_ == '') {

            new PNotify({
                title: 'Habilitar Marcación con DNI',
                text: 'Revisar las fechas de vigencia',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            return;
        }

    }


    //QUE LA FECHA DE INICIO NO SEA MAYOR QUE LA HORA FINAL
    if (moment(txtFechaInicioVegencia_).isAfter(txtFechaFinVegencia_)) {

        new PNotify({
            title: 'Habilitar Marcación con DNI',
            text: 'La fecha de inicio es mayor que la fecha fin',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    //FECHA Y HORA SON IGUALES
    if (moment(txtFechaInicioVegencia_).isSame(txtFechaFinVegencia_)) {

        new PNotify({
            title: 'Habilitar Marcación con DNI',
            text: 'La fecha de inicio no debe ser igual a la fecha fin',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }


    //QUE LA HORA FINAL SEA UNA HORA MAYOR AL INICIAL
    if (moment(txtFechaInicioVegencia_mas_uno).isAfter(txtFechaFinVegencia_)) {

        new PNotify({
            title: 'Habilitar Marcación con DNI',
            text: 'El tiempo de la Vigencia tiene es mínimo una hora',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }




    var reglaDeNegocio = $('#reglaDeNegocio').val()
    if (reglaDeNegocio == 0 && $("#reglaDeNegocio option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione una Regla de Negocio',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    var tgHorarioFijo = $('#tgHorarioFijo').val()
    if (tgHorarioFijo == 0 && $("#tgHorarioFijo option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione un Horario Fijo',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    var intIdUniOrgSup = $('#cboEmpresa').val()
    if (intIdUniOrgSup == 0 && $("#cboEmpresa option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione una Empresa',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    var intIdLocal = $('#cboLocal').val()
    if (intIdLocal == 0 && $("#cboLocal option").length > 1) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione un Local',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }

    if (usuarioAdmin && intIdPerfil == 0) {
        new PNotify({
            title: titleToast,
            text: 'Seleccione un Perfil Administrador',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;
    }


    let geoDetalle = []
    if ($(".GeoDetalle").length > 0) {
        $(".GeoDetalle").each(function (index) {
            var geoArea = $(this).find(".geoArea").html()
            var coor = $(this).find(".geo").html()
            var geoDir = $(this).find(".geoDir").html()
            var intGeo = $(this).find(".intGeoArea").html()

            geoDetalle.push({
                intIdPersonal: $('#intIdPersonalReg').val(),
                strCoord: coor,
                strDireccionCoord: geoDir,
                bitFlGeoArea: geoArea,
                intIdGeoArea: intGeo
            })

        });
    }

    if (activaUsuario == false && activarUsuarioCbo == true) {
        activaUsuario = true
    } else {
        activaUsuario = false
    }

    if (desactivaUsuario == true && activarUsuarioCbo == false) {
        desactivaUsuario = true
    } else {
        desactivaUsuario = false
    }

    if (activarAdmin != usuarioAdmin) {
        activarAdmin = true
    } else {
        activarAdmin = false
    }

    const params = {
        intIdMenu: intIdMenu,
        ObjPersonal: {
            intIdPersonal: $('#intIdPersonalReg').val(),
            strCoPersonal: strCoPersonalRegistro,
            strNumRegis: numRegistroPersonalHideen,
            strFotocheck: $('#fotocheckPersonal').val(),
            intIdTipDoc: $('#TipoDoc').val(),
            strNumDoc: $('#txtNumDoc').val(),
            strNombres: $('#txtNombres').val(),
            strApePaterno: $('#txtApePat').val(),
            strApeMaterno: $('#txtApeMat').val(),
            dttFecNacim: $('#txtFechaNac').val(),
            bitflSexo: generoEstado,
            intIdTipoVia: $('#TipVia').val() != '0' ? $('#TipVia').val() : null,
            strDireccion: $('#TXTTIPVIA').val().length ? $('#TXTTIPVIA').val() : null,
            intIdUbigeo: $('#txtIntidUbigeo').val() != '0' ? $('#txtIntidUbigeo').val() : null,
            imgFoto: imagePersonal,
            intIdUniOrg: unidadOrganizacionalCbo,
            intIdPlanilla: planillaEmpleado,
            intIdCargo: cargoEmpleado,
            intIdCateg: categoriaEmpleado,
            intIdTiPers: tipoDePersonal,
            intIdGrupo: tgGrupoRegistro,
            intIdCCosto: centroDeCosto,
            intIdTipFisc: comboFiscalizacion,
            intIdTipoResp: nivelDeResponsabilidad,
            bitContratoInd: contradoIndeterminado,
            dttFecAdmin: $('#txtFechaAdmi').val(),
            dttFecCese: $('#txtFechaCese').val() != '' || $('#txtFechaCese').val() != ' ' ? $('#txtFechaCese').val() : null, //'09/11/2021', //tgTgGrupoliq
            intIdMotiCese: $('#mativoDeCese').val() != '0' ? $('#mativoDeCese').val() : null,
            intIdGrupoLiq: $('#tgTgGrupoliq').val() != '0' ? $('#tgTgGrupoliq').val() : null,
            bitFlSubsidio: null,
            bitFlLinCred: false,
            strPersoCampo1: $('#strPersonalCampo1').val(),
            strPersoCampo2: $('#strPersonalCampo2').val(),
            strPersoCampo3: $('#strPersonalCampo3').val(),
            strPersoCampo4: $('#strPersonalCampo4').val(),
            strPersoCampo5: $('#strPersonalCampo5').val(),
            bitFlActivo: estadoActivoPersonal,

            strCodExterior: $('#codigoExterno').val(),
            strCodPensionista: $('#codigoPensionista').val(),
            strCodSalud: $('#codigoDeSalud').val(),
            bitSubsidioAlimentacion: subsidioPorAlimentacion,
            bitLineaCredito: liniaDeCreditos,
            intIdReglaNeg: reglaDeNegocio != '0' ? reglaDeNegocio : null,
            intIdHorario: tgHorarioFijo != '0' ? tgHorarioFijo : null,
            bitActivarUsuario: activarUsuarioCbo,
            intIdUniOrgSup,
            intIdLocal,
            bitPerfilAdmin: usuarioAdmin,
            intIdPerfil,
            bitFlfotomovil
        },

        //Inicio Añadido un Nuevo Objeto ObjMarcaConDni HG 19.02.21 ====================================================================
        ObjMarcaConDni: {

            bitHabilitarMarcaDNI: estadoHabilitarMarcaDNI,
            dttFechaInicioVegencia: dttFechaInicioVegencia_,                //Añadido HG 19.03.21 - Para Toma de Consumos con DNI
            dttFechaFinVegencia: dttFechaFinVegencia_,                      //Añadido HG 19.03.21 - Para Toma de Consumos con DNI
            bitHabilitarSupervisorCom: estadoHabilitarSupervisorDeCom,

        },
        //Fin de Añadido un Nuevo Objeto ObjMarcaConDni HG 19.02.21 ====================================================================



        listaDetallesPersonalCorreos: otrosCorreosInsert,
        listaDetallesPersonalTelefonos: otrosTelefonosInsert,
        listaDetallesPersonalResponsabilidad: otrosResponsabilidadInsert,
        listaDetallesPersonalMarcadores: otrosMarcadoresInsert,
        intTipoOperacion: tipoOperacionPass,
        listaCoor: geoDetalle,
        activaUsuario,
        desactivaUsuario,
        activarAdmin
    }

    console.log(params)
    $.post('/Personal/RegistrarNuevoEmpleado', params, respo => {
        if (tipoOperacionPass == 1) {
            messageResponseMix(respo, 'Nuevo Empleado')
        } else {
            messageResponseMix(respo, 'Editar Empleado')
        }

        if (respo.extramsg != null && respo.extramsg .includes("correo")) {
            new PNotify({
                title: 'Info Correo',
                text: respo.extramsg,
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
        }

        if (respo.type === 'success') {
            $('.form-hide-empleado .x_content').empty()
            $('.form-hide-empleado .x_content').html('')
            $('.form-hide-empleado').hide()
            traerDatosEmpleados()
        }
    })
}

$('#btn-save-change-empleado').on('click', function () {
    validarSession()
    const titleToast = 'Nuevo Empleado'
    if (($('#reglaDeNegocio option').length = 1 || $('#reglaDeNegocio').val() != 0) && ($('#tgHorarioFijo option').length = 1 || $('#tgHorarioFijo').val() != 0) && getValueControl('#marcadorMultiple').length >= 1) {
        registrarOActualizar(1)
    } else {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
    }
})

$('#btn-editar-empleado').on('click', function () {
    validarSession()
    const titleToast = 'Editar Empleado'
    if (($('#reglaDeNegocio option').length = 1 || $('#reglaDeNegocio').val() != 0) && ($('#tgHorarioFijo option').length = 1 || $('#tgHorarioFijo').val() != 0) && getValueControl('#marcadorMultiple').length >= 1) {
        registrarOActualizar(2)
    } else {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
    }
})

$('#btn-cancel-empleado').on('click', function () {
    validarSession()
    $('.form-hide-empleado').hide()
    $('#btn-save-change-empleado').show()
    $('#btn-editar-empleado').hide()
})

$(`#TablaPersonal tbody`).on('click', `tr button.btn-edit`, function () {
    validarSession()
    let intIdPersonal = $(this).attr('dataid')
    editarEmpleado(intIdPersonal)
})

$(`#TablaPersonal tbody`).on('click', `tr button.btn-delete`, function () {
    validarSession()
    let intIdPersonal = $(this).attr('dataid')
    let nombreEmpleado = $(this).attr('des_data')
    eliminarEmpleado(intIdPersonal, `¿Está seguro de eliminar el empleado "${nombreEmpleado}"?`)
})

$(`#TablaPersonal tbody`).on('click', `tr button.btn-resend`, function () {
    validarSession()
    let intIdPersonal = parseInt($(this).attr('dataid'))
    $.ajax({
        url: '/Personal/ReenviarCorreo',
        type: 'POST',
        data: {
            intIdPersonal
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response)
            if (response["activo"] == "no") {
                swal({
                    title: "Reenviar correo",
                    text: "Empleado no tiene usuario activo, ¿Desea activarlo?",
                    type: 'info',
                    showCancelButton: true,
                    confirmButtonText: 'Sí, activar',
                    cancelButtonText: 'No, cancelar',
                })
                    .then(isConfirm => {
                        validarSession()
                        $.post('/Personal/ActivarUsuario', { intIdPersonal }, respo => {
                            new PNotify({
                                title: 'Reenviar Correo',
                                text: respo,
                                type: 'info',
                                delay: 3000,
                                styling: 'bootstrap3',
                                addclass: 'dark'
                            });
                        })
                    })
                    .catch(err => {
                        swal('Cancelado', 'La Operación fue cancelada', 'error')
                    })
            } else {
                new PNotify({
                    title: 'Reenviar Correo',
                    text: response["mensaje"],
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });
            }


        },
        complete: function () {
            $.unblockUI();
        }
    })



})

var activaUsuario = false;
var desactivaUsuario = false;
var activarAdmin = false;
$(document).ready(function () {
    const { dataTableId, formatoFecha, rangeDateInicial } = configEmpleadoInicial()
    if ($(`#${dataTableId}`).length) {

        $.post(
            '/Personal/ListarCombosPersonal',
            { intIdMenu: 0, strEntidad: 'TGUNIDORG', intIdFiltroGrupo: 2, strGrupo: 'JERAR', strSubGrupo: '' },
            (response) => {
                $('#intIdUniOrg').empty();
                $('#intIdUniOrg').append('<option value="0" selected>Todos</option>');

                response.forEach(element => {
                    $('#intIdUniOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });

            });

        $('#intIdUniOrg').change(function () {
            validarSession()
            const date = getDateRangePickerEmpleado()
            traerDatosEmpleados(date.fInicio, date.fFin)
        })

        traerDatosEmpleados(rangeDateInicial.startDate.format(formatoFecha), rangeDateInicial.endDate.format(formatoFecha))
    }
})

function configMiFichaInicial() {
    const intIdMenu = localStorage.getItem('idsubmenu') && !isNaN(localStorage.getItem('idsubmenu')) ? Number(localStorage.getItem('idsubmenu')) : 1
    const contenedorIdInicial = 'miFichaPersonal'
    const formatoFecha = 'DD/MM/YYYY'
    const rangeDateInicial = {
        startDate: moment().subtract(10, 'year'),
        endDate: moment(),
    }
    return {
        intIdMenu,
        contenedorIdInicial,
        formatoFecha,
        rangeDateInicial,
    }
}
function getDocumentElementById(id) {
    return document.getElementById(id)
}

function getAdicionalControlEditarPersonal() {
    const { intIdMenu, formatoFecha, rangeDateInicial } = configMiFichaInicial()

    axios
        .post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGTIPO_VIA',
            intIdFiltroGrupo: 0,
            strGrupo: '',
            strSubGrupo: '',
        })
        .then((resp) => {
            const dataTipVia = resp.data
            if (dataTipVia.length) {
                $('#TipVia').empty()
                $('#TipVia').attr('disabled', false)
                $('#TipVia').append('<option value="">Via</option>')
                dataTipVia.forEach((element) => {
                    $('#TipVia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        })
        .catch((error) => {
            console.log(error)
        })

    axios
        .post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPAIS',
            intIdFiltroGrupo: 0,
            strGrupo: 'EXISTE',
            strSubGrupo: '',
        })
        .then((resp) => {
            const dataCboPais = resp.data
            if (dataCboPais.length) {
                $('#CboPais').empty()
                $('#CboPais').attr('disabled', false)
                $('#CboPais').append('<option value="">Seleccione</option>')

                dataCboPais.forEach((element) => {
                    $('#CboPais').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        })
        .catch((error) => {
            console.log(error)
        })
}

function getTimeConceptoHoras(string) {

    var x = string.indexOf('(')
    var y = string.substr(x + 1)

    var salida = y.replace(')', '');

    return salida
}


function getHorasByMin(m) {
    var minutes = m % 60
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var hours = Math.floor(m / 60)
    hours = hours < 10 ? '0' + hours : hours;
    return hours + ":" + minutes
}

var _vartableResponsabilidad;
var _vartablePapeleta;
var fechaInicio;
var fechaFin;


async function updatePersonalPerfil(intIdPersonal) {
    const titleToast = 'Editar Perfil'
    ActualizarPerfilEmpleado(titleToast, intIdPersonal);

    //alert('error al intentar actualizar')
}

function validarFecha(fecha) {
    var array = fecha.split("/", 3)
    var d = array[0]
    var m = array[1]
    var a = array[2]
    var ok = true;
    if ((a < 1900) || (a > 2050) || (m < 1) || (m > 12) || (d < 1) || (d > 31))
        ok = false;
    else {
        if ((a % 4 != 0) && (m == 2) && (d > 28))
            ok = false;
        else {
            if ((((m == 4) || (m == 6) || (m == 9) || (m == 11)) && (d > 30)) || ((m == 2) && (d > 29)))
                ok = false;
        }
    }
    return ok;
}

function ActualizarPerfilEmpleado(titleToast, intIdPersonal) {

    const { intIdMenu, formatoFecha } = configEmpleadoInicial()

    if (getValueControl('#TipVia').length == '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
        focusControl('#TipVia')
        return false
    }
    if (getValueControl('#TXTTIPVIA').length < 4) {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
        focusControl('#TXTTIPVIA')
        return false
    }
    if (getValueControl('#txtFechaNac').length < 4) {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
        focusControl('#txtFechaNac')
        return false
    }
    if (!validarFecha(getValueControl('#txtFechaNac'))) {
        messageResponseMix({ type: 'info', message: 'Fecha incorrecta' }, titleToast)
        focusControl('#txtFechaNac')
        return false
    }
    else if (getValueControl('#CboPais') == '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
        $('#CboPais').focus()
        return false
    }
    else if (getValueControl('#CboRegion') == '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
        $('#CboRegion').focus()
        return false
    }
    else if (getValueControl('#CboProvincia') == '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
        $('#CboProvincia').focus()
        return false
    }
    else if (getValueControl('#CboDistrito') == '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
        $('#CboDistrito').focus()
        return false
    }
    else if (getValueControl('#Email_Emple').length < 4 || !ValidateEmail(getValueControl('#Email_Emple'))) {
        messageResponseMix({ type: 'info', message: 'Correo no tiene el formato correcto' }, titleToast)
        focusControl('#Email_Emple')
        return false
    }
    else if (getValueControl('#celularEmpleado').length < 6) {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
        focusControl('#celularEmpleado')
        return false
    }

    const otrosCorreosData = $.map($('#TagEmailContainer .tagsinput span span'), function (e, i) {
        return $(e)
            .text()
            .trim()
    })

    const otrosTelefonosData = $.map($('#tagTelefonosContainer .tagsinput span span'), function (e, i) {
        return $(e)
            .text()
            .trim()
    })

    const otrosCorreos = otrosCorreosData.filter(item => {
        return ValidateEmail(item) === true
    })


    let otrosCorreosInsert = []
    otrosCorreosInsert.push({
        intIdPerCorr: 0,
        intIdPersonal: 0,
        strCorreo: getValueControl('#Email_Emple'),
        bitFlPrincipal: true,
        bitFlEliminado: false,
    })
    otrosCorreos.forEach(item => {
        otrosCorreosInsert.push({
            intIdPerCorr: 0,
            intIdPersonal: 0,
            strCorreo: item,
            bitFlPrincipal: false,
            bitFlEliminado: false,
        })
    })

    let otrosTelefonosInsert = []
    otrosTelefonosInsert.push({
        intIdPerTele: 0,
        intIdPersonal: 0,
        strNumero: getValueControl('#celularEmpleado'),
        bitFlPrincipal: true,
        strAnexo: ' ',
        bitFlEliminado: false,
    })
    otrosTelefonosData.forEach(item => {
        otrosTelefonosInsert.push({
            intIdPerTele: 0,
            intIdPersonal: 0,
            strNumero: item,
            bitFlPrincipal: false,
            strAnexo: '',
            bitFlEliminado: false,
        })
    })

    const params = {
        intIdMenu: intIdMenu,
        ObjPersonal: {
            intIdPersonal: intIdPersonal,
            dttFecNacim: $('#txtFechaNac').val(),
            intIdTipoVia: $('#TipVia').val() != '0' ? $('#TipVia').val() : null,
            strDireccion: $('#TXTTIPVIA').val().length ? $('#TXTTIPVIA').val() : null,
            intIdUbigeo: $('#txtIntidUbigeo').val() != '0' ? $('#txtIntidUbigeo').val() : null,
        },
        listaDetallesPersonalCorreos: otrosCorreosInsert,
        listaDetallesPersonalTelefonos: otrosTelefonosInsert
    }

    console.log(params)


    $.post('/Personal/ActualizarPerfilEmpleado', params, respo => {
        messageResponseMix(respo, 'Editar Empleado')

        if (respo.type === 'success') {
            //$('.form-hide-empleado .x_content').empty()
            //$('.form-hide-empleado .x_content').html('')
            //$('.form-hide-empleado').hide()
            //traerDatosEmpleados()
            $('#myModalEditar').modal('hide')
            getPersonalPerfil2(intIdPersonal)
        }
    })

}

async function getPersonalPerfil2(intIdPersonalId) {
    const { intIdMenu, formatoFecha, rangeDateInicial } = configMiFichaInicial()
    const { loaderHtml } = APPCONFIG
    const intIdPersonal = intIdPersonalId
    //getAdicionalControlEditarPersonal()
    try {
        const idRange = ".range-datepicker";
        //const fechaInicio = $(idRange).data('daterangepicker').startDate.format('DD/MM/YYYY');
        //const fechaFin = $(idRange).data('daterangepicker').endDate.format('DD/MM/YYYY');
        const anio = $(idRange).data('daterangepicker').startDate.format('DD/MM/YYYY').substr(-4, 4);
        fechaInicio = '01/01/' + anio
        fechaFin = '31/12/' + anio

        $(".rangoFechaIni").html('Enero 01, ' + anio)
        $(".rangoFechaFin").html('Diciembre 31, ' + anio)

        const dataUser = await axios.post('/Personal/GetPersonalData', { intIdMenu, intIdPersonal })
        const dataCorreos = await axios.post('/Personal/GetCorreosPersonal', { intIdMenu, intIdPersonal })
        const dataTelefonos = await axios.post('/Personal/GetTelefonosPersonal', { intIdMenu, intIdPersonal })

        if (dataUser.data.length) {
            document.querySelectorAll('.loading-item-p').forEach((el) => {
                el.classList.remove('skeleton-loader', 'h23x100', 'h22x79', 'dplayinitial', 'bg-loader')
            })

            const user = dataUser.data[0]
            const INTIDTPEVAL = user.intIdUbigeo
            const INTIDSUPUBI = user.intIdUbigSup
            const INTIDSUPUBIREGION = user.intIdUbiSupReg
            const intIdProvinciaMostrar = user.intIdUbiReg
            const intIdRegionMostrar = user.intIdUbiPais
            const intIdJerOrgLista = user.intIdJerOrg
            const intIdUniOrgLista = user.intIdUniOrg

            getDocumentElementById('direccionPersonal').innerHTML = `<i class="fa fa-map-marker user-profile-icon"></i> ${user.strDir} <br> ${user.strDirUbi}`
            getDocumentElementById('fechaNacimientoPersonal').innerHTML = `<strong>Fecha de Nacimiento:</strong> ${user.dttFecNacim}`
        }

        if (dataCorreos.data.length) {
            const dataCorreosArray = dataCorreos.data
            let dataCorreosInsert = ''
            $('#tituloCorreoPersonal').html(`<li><i class="glyphicon glyphicon-envelope"></i> Otros Emails:</li>`)
            $('#dataCorreoPersonal').empty()
            dataCorreosArray.forEach((item) => {
                if (item.bitFlPrincipal) {
                    getDocumentElementById('correoPrincipalPersonal').innerHTML = `<i class="fa fa-envelope user-profile-icon"></i> ${item.strCorreo}`
                } else {
                    $('#dataCorreoPersonal').append(`<li>${item.strCorreo}</li><br>`)
                }
            })
        } else {
            $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
        }

        if (dataTelefonos.data.length) {
            const dataTelefonosArray = dataTelefonos.data
            let dataTelefonosInsert = ''
            $('#tituloTelefonoPersonal').html(`<li><i class="glyphicon glyphicon-phone-alt"></i> Otros Telefonos:</li>`)
            $('#dataTelefonoPersonal').empty()
            dataTelefonosArray.forEach((item) => {
                if (item.bitFlPrincipal) {
                    getDocumentElementById('telefonoPrincipalPersonal').innerHTML = `<i class="glyphicon glyphicon-phone-alt"></i> ${item.strNumero}`
                } else {
                    $('#dataTelefonoPersonal').append(`<li>${item.strNumero}</li><br>`)
                }
            })
        } else {
            $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
        }
        var mailformatEmail = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/
    } catch (error) {
        console.log(error)
    }
}


$(document).ready(function () {
    const { intIdMenu, contenedorIdInicial, formatoFecha, rangeDateInicial } = configMiFichaInicial()
    if ($(`#${contenedorIdInicial}`).length) {
        //const intIdPersonal = window.SISCOP.intIdPersonal
        //getPersonalPerfil(intIdPersonal)
        var today = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate());
        $('#FechaNac').datetimepicker({
            maxDate: today,
            viewMode: 'days',
            format: formatoFecha
        })

    }
})







/*
 | ----------------------------------------------------------------------------------------
 | A partir de esta línea se debería estar copiando código desde el SITE.JS lunes.22.01.21
 | ----------------------------------------------------------------------------------------
 | 1.- Mantenimiento Servicios(del sisfood)
 | 2.- Mantenimiento Toma de Consumos(del sisfood)
 | 3.- Mantenimiento Regla de Negocio(del sisfood)(se le reubicó en otra parte)

*/

/**------------------------------------------------------*//*ln_30840_all*/
/**28. Mantenimiento Servicio (de sisfood) */
/**------------------------------------------------------*//*ln_32888_all*/
/*******************************************/
/***************3.2-Servicio****************/
/********* Mantenimiento Servicio **********/
/*******************************************/

//Combos Servicios
function CombosServicios() {

    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'TIPOSERV' },// HG 13.03.21 
        (response) => {
            $('#TipServicio').empty()
            $('#TipServicios').empty();
            //Combo Tipo de Servicio para los Filtros
            $('#TipServicio').append('<option value="0">Todos</option>');
            //Combo Tipo de Servicio para Editar/Nuevo
            $('#TipServicios').append('<option value="0" >Seleccione</option>');

            response.forEach(element => {
                $('#TipServicio').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                $('#TipServicios').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });

        });


    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'TIPOMENU' }, // HG 13.03.21
        (response) => {
            $('#TipMenu').empty();
            $('#TipMenus').empty();
            //Tipo de Menú Encabezado Principal
            $('#TipMenu').append('<option value="0">Todos</option>');
            // Tipo de Menú Editar/Nuevo
            $('#TipMenus').append('<option  value="0">Seleccione</option>');
            response.forEach(element => {
                $('#TipMenu').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                $('#TipMenus').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });

        });

    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'CLASE' },
        (response) => {
            $('#ClaseServFiltro').empty();
            $('#ClaseServ').empty();
            $('#ClaseServFiltro').append('<option value="0">Todos</option>');
            $('#ClaseServ').append('<option  value="0">Seleccione</option>');
            response.forEach(element => {
                $('#ClaseServFiltro').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                $('#ClaseServ').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMPLEM', strSubGrupo: 'CATEG' },
        (response) => {
            $('#CategSC').empty();
            $('#CategSC').append('<option  value="0">Seleccione</option>');
            response.forEach(element => {
                $('#CategSC').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

}



//===============================================================================================
//=============================== FUNCION CombosListarPersonalTipoUM() ==========================fclpt
//===============================================================================================
function CombosListarPersonalTipoUM() {
}

$('#filActi').on('change', function () {
    TablaServicios();
});

$('#TipMenu').on('change', function () {
    TablaServicios();
});

$('#TipServicio').on('change', function () {
    TablaServicios();
});

$('#filtro').keyup(function () {
    TablaServicios();
});
//añadido 18.03.2021
$('#ClaseServFiltro').on('change', function () {
    TablaServicios();
});

//===============================================================================================
//=============================== FUNCION TablaServicios() ======================================fts   
//===============================================================================================
var _varTablaServicios;
function TablaServicios() {
    validarSession();//AÑADIDO HG 22.04.2021
    var Activo = $('#filActi option:selected').val();
    var Descipción = $('#filtro').val();
    var TipServicio = $('#TipMenu option:selected').val();
    var TipMenu = $('#TipServicio option:selected').val();
    var iClase = $('#ClaseServFiltro option:selected').val(); //18.03.2021
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    //Inicio de código para solucionar observación 15.1   HG 24.02.2021
    $.ajax({
        url: '/Asistencia/GetTablaServicio',
        type: 'POST',
        //data: { objSession: SesionMovi, IntActivoFilter: Activo, strfilter: Descipción, intfiltrojer1: TipMenu, intfiltrojer2: TipServicio },
        data: { objSession: SesionMovi, IntActivoFilter: Activo, strfilter: Descipción, intfiltrojer1: TipMenu, intfiltrojer2: TipServicio, intfiltroClase: iClase, intUso: 0 }, //modificado 18.03.2021
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },


        success: function (response) { //===========================INI

            if (typeof _varTablaServicios !== 'undefined') {
                _varTablaServicios.destroy();
            }

            _varTablaServicios = $('#tablaservicio').DataTable({
                data: response,
                columns: [
                    { data: 'strCoServicio' },
                    { data: 'strDesServicio' },
                    { data: 'strDesClase' },//añadido 18.03.2021
                    { data: 'strDesTipServicio' }, //Aqui por error se ha invertido el orden de strDesTipServicio y strDesTipMenu
                    { data: 'strDesTipMenu' },
                    { data: 'strDesEstado' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let intIdServicio = item.intIdServicio;
                            let strDesServicio = item.strDesServicio;
                            return `<button class="btn btn-success btn-xs btn-edit" dataid="${intIdServicio}" ><i class="fa fa-pencil"></i> Editar </button> 
                                           <button class="btn btn-primary btn-xs btn-delete" dataid="${intIdServicio}" des_data="${strDesServicio}" data="${item}" ><i class="fa fa-trash-o"></i> Eliminar </button>`;
                        }
                    },
                    { data: 'intIdServicio' }
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [7],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });


            $('#tablaservicio  tbody').on('click', 'tr button.btn-delete', function () {
                let ServicioId = $(this).attr("dataid")
                let Descripcion = $(this).attr("des_data")
                if (!isNaN(ServicioId)) {
                    intentEliminarServicio(ServicioId, Descripcion)
                }
            });
        }, 
        complete: function () {
            $.unblockUI();
        }
    });

    //Fin de código para solucionar observación 15.1   HG 24.02.2021
}


$('#tablaservicio  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    let ServicioId = $(this).attr("dataid")
    if (!isNaN(ServicioId)) {
        editarServicio(ServicioId)
    }
});

//===============================================================================================
//=============================== FUNCION intentEliminarServicio() ==============================fies
//===============================================================================================
function intentEliminarServicio(ServicioId, Descripcion) {
    validarSession();//AÑADIDO HG 22.04.2021
    swal({
        title: "Eliminar Servicio",
        text: "¿Está seguro de eliminar el Servicio ''<strong>" + Descripcion + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            yesEliminaServicio(ServicioId);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

//===============================================================================================
//=============================== FUNCION  yesEliminaServicio() =================================fies
//===============================================================================================
function yesEliminaServicio(ServicioId) {
    validarSession();//AÑADIDO HG 22.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }
    $.post(
        '/Asistencia/EliminarServicio',
        { objSession: SesionMovi, intIdServicio: ServicioId },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaServicios();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}


//===============================================================================================
//=============================== BOTON NUEVO Servicio ==========================================bnser Nuevo Servicio
//===============================================================================================
$('#btn-new-servicio').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    CamposAdicionalesServicio();
    $('.form-hide-servicio').hide();
    $('#txtCoServicio').val('');
    $('#txtDescServicio').val('');
    $('#btn-save-change-servicio').hide();
    $('#btn-save-change-servicio').show();
    $('#btn-update-servicio').hide();
    $('#JerOrG').html('');
    $('#JerOrG').val(0); // GRUPO EMPRESARIAL:val(1)
    $('#JerOrG').append('<option value="0">Seleccione</option>');
    $('#UndOrG').attr('disabled', true);//estaba como true
    $('#UndOrG').html('');
    $('#UndOrG').append('<option value="0">Seleccione</option>');
    $('#TipServicios').val(0);//$('#TipServicios').val(1133);//Desayuno:124 //comentado 18.03.2021
    $('#TipMenus').val(0);//$('#TipMenus').val(1130);// Económico:121//comentado 18.03.2021
    $('#DivTipServicios').show();//AÑADIDO 18.03.2021
    $('#DivTipMenus').show();//AÑADIDO 18.03.2021
    $('#ClaseServ').val(0);//AÑADIDO 18.03.2021
    $('#CategSC').val(0);//AÑADIDO 20.03.2021

    $('#Change_state').html();
    $('#Change_state').html('<input type="checkbox" class=" js-switch" id="Activ_Serv" checked style="float:right;" /> Activo');
    $('#Change_state').iCheck('check');
    switcheryLoad(); //Debe ir despues del append
    $('#ConCosto').iCheck('uncheck');


    $.post(
        '/Proceso/MaestroMaxCaracteres',
        { StrNomMan: 'TCSERVICIO' },
        (response) => {
            response.forEach(element => {
                if (element.NombreColum == 'strCoServicio') {
                    $('#' + element.NombreColum + '').empty();
                    $('#' + element.NombreColum + '').append('<label>Código (*)</label><input type = "text" class= "form-control" id = "txtCoServicio" placeholder = "Código" maxlength="' + element.intNumero + '" onkeypress="validarCampoCodigo(event)" ><div id="notifry_error" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                } else if (element.NombreColum == 'strDesServicio') {
                    $('#' + element.NombreColum + '').empty();

                    $('#' + element.NombreColum + '').append('<label>Descripción (*)</label><input type = "text" class= "form-control" id = "txtDescServicio" placeholder = "Descripción" maxlength="' + element.intNumero + '"  onkeyup="this.value=caracteresValidosConEspacios(this.value)"><div id="notifry_errordes" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                } else if (element.NombreColum == 'strCoExporta') {
                    $('#' + element.NombreColum + '').empty();

                    $('#' + element.NombreColum + '').append('<label>Código Externo </label><input type = "text" class= "form-control" id = "txtCoExterno" placeholder = "Codigo Externo" maxlength="' + element.intNumero + '" onkeypress="validarCampoCodigo(event)" ><div id="notifry_errorexp" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                    $("#txtCoServicio").keyup(function () {
                        $('#notifry_error').html('');
                        document.getElementById("txtCoServicio").style.borderColor = "#CCCCCC";
                    });
                    $("#txtDescServicio").keyup(function () {
                        $('#notifry_errordes').html('');
                        document.getElementById("txtDescServicio").style.borderColor = "#CCCCCC";
                    });

                }

            });


        });

    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGMONEDA', intIdFiltroGrupo: 0, strGrupo: 'D', strSubGrupo: '' },
        (response) => {
            $('#Moneda').html('');
            $('#Moneda').append('<option value="0">Seleccione</option>');

            response.forEach(element => {
                $('#Moneda').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
            $('.form-hide-servicio').show();
        });


    //HG_28.10.2020_12:47:45_Servicio 
    //Cargar Combo Moneda (*) "id="Moneda"" del FORMULARIO NUEVO
    //$('#strMontoCosto').append('<label>Monto del Costo (*) </label><input class= "form-control" id="txtMontoCosto" placeholder="0.00"' +
    //    'type = "number" maxlength = "12" pattern="^([0-9]{12})$" onkeyup="this.value=caracteres_solo_numeros(this.value)"  >'); //maxlength = "' + element.intNumero + '"  
    $('#strMontoCosto').html('');
    //Inicio de código para solucionar observación 15.5   HG 24.02.2021
    //$('#strMontoCosto').append('<label>Monto del Costo (*) </label><input class= "form-control" id="txtMontoCosto" placeholder="0.00"' +
    //    'type = "number" onkeypress="validarCampoCosto(event)" maxlength = "6" min="0.01" max="999.99" step=".01">');
    $('#strMontoCosto').append('<label>Monto del Costo (*) </label><input class= "form-control" id="txtMontoCosto" placeholder="0.00"' +
        'type = "number" onkeypress = "return filterFloat(event,this);" maxlength = "6" min="0.01" max="999.99" step=".01">');
    
    //Fin de código para solucionar observación 15.5   HG 24.02.2021

    //Permitir sienpre dos deciales después del entero (funcion para el div contenesor del inputs)                  
    //$("#txtMontoCosto").change(function () {

    //    $(this).val(parseFloat($(this).val()).toFixed(2));

    //});

    //Inicio de código para solucionar observación 15.4   HG 24.02.2021
    //Mostrar/Esconder "CON COSTO" Hebert_27.10.2020_18:02:09_44616 
    if ($('#ConCosto').is(':checked') == true) {
        $('#Moneda').val(0);//$('#Moneda').val(1); // PEN 1, USD 2, EUR 3   //movido y modificado 18.03.2021
        $('#Money').show();
        $('#TipMoney').show();
        $('#div-contenedor-con-costo').show();
    }
    else if ($('#ConCosto').is(':checked') == false) {
        $('#Moneda').val(0);//$('#Moneda').val(1); // PEN 1, USD 2, EUR 3   //movido y modificado 18.03.2021
        $('#Money').hide();
        $('#TipMoney').hide();
        $('#div-contenedor-con-costo').hide();
    };

    $('#ConCosto').on('ifChanged', function () {
        if ($('#ConCosto').is(':checked') == true) {
            $('#Moneda').val(0);       // 0 es el "Seleccionar" del combo
            $('#txtMontoCosto').val(); // Estaba en 0 pero debe estar vacío
            $('#Money').show();
            $('#TipMoney').show();
            $('#div-contenedor-con-costo').show();
        }
        else if ($('#ConCosto').is(':checked') == false) {
            $('#Money').hide();
            $('#TipMoney').hide();
            $('#Moneda').val(0);
            $('#txtMontoCosto').val(''); //valor vacio del campo para que no lleve nada a la BD
            $('#div-contenedor-con-costo').hide();
        }
    });

    //Fin de código para solucionar observación 15.4   HG 24.02.2021
});

//AÑADIDO 18.03.2021
$('#ClaseServ').on('change', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    //OCULTAR O MOSTRAR TIPO SERVICIO Y TIPO MENU
    var CodClase = $('#ClaseServ').val();
    if (CodClase == 1 || CodClase == 0) {
        //Servicio: Mostrar
        $('#TipServicios').val(0);
        $('#TipMenus').val(0);
        $('#CategSC').val(0);
        $('#DivCategSC').hide();
        $('#DivTipServicios').show();
        $('#DivTipMenus').show();
    } else {
        //Complementario: No Mostrar
        $('#TipServicios').val(0);
        $('#TipMenus').val(0);
        $('#CategSC').val(0);
        $('#DivTipServicios').hide();
        $('#DivTipMenus').hide();
        $('#DivCategSC').show();
    }
});

$('#btn-cancel-servicio').on('click', function () {
    $('.form-hide-servicio').hide();
});

//===============================================================================================
//=============================== BOTON GUARDAR Servicio ========================================bgser nuevo servicio
//===============================================================================================
$('#btn-save-change-servicio').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var _activo = $('#Activ_Serv').is(':checked');
    var _codigo = $('#txtCoServicio').val();
    var _desc = $('#txtDescServicio').val();

    var _codExt = $('#txtCoExterno').val();
    if (_codExt == '') { // Si no hay nada
        _codExt = ' ';   // Lo toma como vacio
    }
    var _MonCosto = $('#txtMontoCosto').val();
    //var _UndOrg = $('#UndOrG  option:selected').val(0);

    var _UndOrg = 0; //Por qué cuandos se asigna "0" manda el mensaje de "null"? //Modificado el 18.03.2021
    var _Clase = $('#ClaseServ  option:selected').val();//añadido 18.03.2021
    var _TipMenu = $('#TipMenus  option:selected').val();  //Invertido para controlar error
    var _TipServ = $('#TipServicios  option:selected').val();//Invertido para controlar error
    var _TipMone = $('#Moneda  option:selected').val();
    var _CategSC = $('#CategSC  option:selected').val();//añadido 20.03.2021
    var _ChckCosto = $('#ConCosto').is(':checked');
    var _camp1 = '';
    var _camp2 = '';
    var _camp3 = '';
    var _camp4 = '';
    var _camp5 = '';

    //Inicio de código para solucionar observación 15.3   HG 24.02.2021
    if (_codigo === '') {
        new PNotify({
            title: 'Nuevo Servicio',
            text: 'Ingrese un Código',
            type: 'info',
            delay: 1500,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        //$("#txtCoServicio").effect("highlight", { border: 'coral' }, 3000);
        $("#txtCoServicio").effect("highlight", { color: '#b8c5d275' }, 2500);
        return;
    }

    if (_desc === '') {
        new PNotify({
            title: 'Nuevo Servicio',
            text: 'Ingrese una Descripción',
            type: 'info',
            delay: 1500,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#txtDescServicio").effect("highlight", { color: '#b8c5d275' }, 2500);
        return;
    }
    //Fin de código para solucionar observación 15.3   HG 24.02.2021
    if (_Clase == 0) {
        new PNotify({
            title: 'Nuevo Servicio',
            text: 'Seleccione una Clase',
            type: 'info',
            delay: 1500,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#ClaseServ").effect("highlight", { color: '#b8c5d275' }, 3000);
        return;
    }

    //modificado 18.03.2021
    if (_Clase == 1) {
        if (_TipServ == 0) {
            new PNotify({
                title: 'Nuevo Servicio',
                text: 'Seleccione un Tipo de Servicio',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#TipServicios").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

        if (_TipMenu == 0) {
            new PNotify({
                title: 'Nuevo Servicio',
                text: 'Seleccione un Tipo de Menú',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#TipMenus").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

    } else {
        if (_CategSC == 0) {
            new PNotify({
                title: 'Nuevo Servicio',
                text: 'Seleccione una Categoría para el Servicio',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#CategSC").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
    }

    if (_ChckCosto == true) {

        if (_TipMone == 0) {

            new PNotify({
                title: 'Nuevo Servicio',
                text: 'Seleccione un Tipo de Moneda',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            $("#Moneda").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
        if (_MonCosto == 0) {
            new PNotify({
                title: 'Nuevo Servicio',
                text: 'Ingrese un Monto de Costo',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            $("#txtMontoCosto").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

    }

    var Servicio = {
        strCoServicio: _codigo,
        strDesServicio: _desc,
        strCoExporta: _codExt,
        intIdUniOrg: _UndOrg,
        intIdTipServ: _TipServ,
        intIdTipoMenu: _TipMenu,
        monCostoServ: _MonCosto,
        intIdMoneda: _TipMone,
        strServicioCampo1: _camp1,
        strServicioCampo2: _camp2,
        strServicioCampo3: _camp3,
        strServicioCampo4: _camp4,
        strServicioCampo5: _camp5,
        bitFlActivo: _activo,
        intClase: _Clase,//añadido 18.03.2021
        intCategSC: _CategSC,//añadido 20.03.2021
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/IUServicio',
        { ObjConcepto: Servicio, intTipoOperacion: 1, objSession: SesionMovi },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Servicio',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    $('.form-hide-servicio').hide();
                    TablaServicios();
                } else {
                    if (response.type === 'error') {
                        var nomMantemiento = 'Servicio';
                        var campo = 'txtCoServicio';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        document.getElementById("txtCoServicio").style.borderColor = "#3498dbe0";
                        return;
                    } else {
                        if (response.type === 'info') {
                            var nomMantemiento = 'Empresa';
                            var campo = 'txtDescServicio';
                            var msj = response.message;
                            var response = "info";
                            var deta = 'notifry_errordes';
                            document.getElementById("txtDescServicio").style.borderColor = "#3498dbe0";
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                        } else {
                            new PNotify({
                                title: 'Nuevo Servicio',
                                text: response.message,
                                type: 'info',
                                delay: 3000,
                                styling: 'bootstrap3'
                            });
                        }
                    }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});


//===============================================================================================
//=============================== BOTON ACTUALIZAR Servicio =====================================baser actualizar servicio
//===============================================================================================
$('#btn-update-servicio').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var _activo = $('#Activ_Serv').is(':checked');
    var _codigo = $('#txtCoServicio').val();
    var _desc = $('#txtDescServicio').val();
    var _codExt = $('#txtCoExterno').val();
    if (_codExt == '') { // Si no hay nada
        _codExt = ' ';   // Lo toma como vacio
    }
    var _MonCosto = $('#txtMontoCosto').val();
    //var _UndOrg = $('#UndOrG  option:selected').val();
    var _UndOrg = 0; //Para controlar este campo, <option value="1">DESK</option>//select * from TGUNIDORG
    var _Clase = $('#ClaseServ  option:selected').val();//añadido 18.03.2021
    var _TipServ = $('#TipServicios  option:selected').val();
    var _TipMenu = $('#TipMenus  option:selected').val();
    var _TipMone = $('#Moneda  option:selected').val();
    var _CategSC = $('#CategSC  option:selected').val();//añadido 20.03.2021

    var _IdServ = $('#IntIdServicio').val();
    var _ChckCosto = $('#ConCosto').is(':checked');
    var _camp1 = '';
    var _camp2 = '';
    var _camp3 = '';
    var _camp4 = '';
    var _camp5 = '';

    //MENSAJES DE VALIDACION POR CADA CAMPO
    if (_codigo === '') {
        new PNotify({
            title: 'Actualizar Servicio',
            text: 'Ingrese un Código',
            type: 'info',
            delay: 1500,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#txtCoServicio").effect("highlight", { color: '#b8c5d275' }, 3000);
        return;
    }

    if (_desc === '') {
        new PNotify({
            title: 'Actualizar Servicio',
            text: 'Ingrese una Descripción',
            type: 'info',
            delay: 1500,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#txtDescServicio").effect("highlight", { color: '#b8c5d275' }, 3000);
        return;
    }
    if (_Clase == 0) {
        new PNotify({
            title: 'Actualizar Servicio',
            text: 'Seleccione una Clase',
            type: 'info',
            delay: 1500,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#ClaseServ").effect("highlight", { color: '#b8c5d275' }, 3000);
        return;
    }
    //modificado 18.03.2021
    if (_Clase == 1) {
        if (_TipServ == 0) {
            new PNotify({
                title: 'Actualizar Servicio',
                text: 'Seleccione un Tipo de Servicio',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#TipServicios").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

        if (_TipMenu == 0) {
            new PNotify({
                title: 'Actualizar Servicio',
                text: 'Seleccione un Tipo de Menú',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#TipMenus").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
    } else {
        if (_CategSC == 0) {
            new PNotify({
                title: 'Actualizar Servicio',
                text: 'Seleccione una Categoría para el Servicio',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#CategSC").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
    }

    if (_ChckCosto == true) {
        if (_TipMone == 0) {
            new PNotify({
                title: 'Actualizar Servicio',
                text: 'Seleccione un Tipo de Moneda',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            $("#Moneda").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
        if (_MonCosto == 0) {

            new PNotify({
                title: 'Actualizar Servicio',
                text: 'Ingrese un Monto de Costo',
                type: 'info',
                delay: 1500,
                styling: 'bootstrap3',
                addclass: 'dark'
            });
            $("#txtMontoCosto").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

    }


    var Servicio = {
        strCoServicio: _codigo,
        strDesServicio: _desc,
        strCoExporta: _codExt,
        intIdUniOrg: _UndOrg,
        intIdTipServ: _TipServ,
        intIdTipoMenu: _TipMenu,
        monCostoServ: _MonCosto,
        intIdMoneda: _TipMone,
        strServicioCampo1: _camp1,
        strServicioCampo2: _camp2,
        strServicioCampo3: _camp3,
        strServicioCampo4: _camp4,
        strServicioCampo5: _camp5,
        bitFlActivo: _activo,
        intIdServicio: _IdServ,
        intClase: _Clase,//añadido 18.03.2021
        intCategSC: _CategSC,//añadido 20.03.2021
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/IUServicio',
        { ObjConcepto: Servicio, intTipoOperacion: 2, objSession: SesionMovi },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualizar Servicio',
                        text: 'Datos actualizados satisfactoriamente.',
                        //text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    $('.form-hide-servicio').hide();
                    //$("#hg_loader_espera").hide().show().delay(1600).fadeOut();
                    TablaServicios();
                } else {

                    if (response.type === 'error') {
                        var nomMantemiento = 'Servicio';
                        var campo = 'txt_cod_Empresa';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        document.getElementById("txtCoServicio").style.borderColor = "#3498dbe0";
                        return;

                    } else {

                        if (response.type === 'info') {
                            document.getElementById("txtDescServicio").style.borderColor = "#3498dbe0";
                            var nomMantemiento = 'Empresa';
                            var campo = 'txt_desc_Empresa';
                            var msj = response.message;
                            var response = "info";
                            var deta = 'notifry_errordes';
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                        } else {

                            new PNotify({
                                title: 'Actualizar Servicio',
                                text: response.message,
                                type: 'info',
                                delay: 3000,
                                styling: 'bootstrap3'
                            });


                        }

                    }
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});


//TIPO DE SERVICIO: Desayuno 1133, Almuerzo 1134, Cena 1135
//===============================================================================================
//=============================== FUNCION editarServicio(ServicioId)=============================feser editar servicio
//===============================================================================================
function editarServicio(ServicioId) {
    $('.form-hide-servicio').hide();
    //$("#hg_loader_espera").hide().show().delay(1300).fadeOut();
    $('#btn-save-change-servicio').hide();
    $('#btn-update-servicio').show();
    $('#JerOrG').val(0);
    $('#JerOrG').append('<option value="0">Seleccione</option>');
    $('#UndOrG').attr('disabled', true);
    $('#UndOrG').val(0);
    $('#Moneda').val(0);
    //añadido 13.04.2021 HG
    $('#notifry_error').html('');
    $('#notifry_errordes').html('');

    //Hebert_28.10.2020_12:47:45_Servicio 
    //Cargar Combo Moneda (*) "id="Moneda"" del FORMULARIO EDITAR
    $('#strMontoCosto').html("");
    //$('#strMontoCosto').append('<label>Monto del Costo (*) </label><input   class= "form-control" id="txtMontoCosto" placeholder="0.00"' +
    //    ' type = "number" maxlength = "12" oninput="this.value=this.value.slice(0,this.maxLength)"  >');

    //Inicio de código para solucionar observación 15.5   HG 24.02.2021
    $('#strMontoCosto').append('<label>Monto del Costo (*) </label><input class= "form-control" id="txtMontoCosto" placeholder="0.00"' +
        'type = "number" onkeypress="return filterFloat(event,this);"  maxlength = "6" min="0.01" max="999.99" step=".01">');
    //Fin de código para solucionar observación 15.5   HG 24.02.2021

    //Permitir siempre dos decimales después del entero miércoles                  
    //$("#txtMontoCosto").change(function () {
    //    $(this).val(parseFloat($(this).val()).toFixed(3));
    //});


    //Cargar Combo Moneda (*)  de id="Moneda" del formulario Editar
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGMONEDA', intIdFiltroGrupo: 0, strGrupo: 'D', strSubGrupo: '' },
        (response) => {

            $('#Moneda').html('');
            $('#Moneda').append('<option value="0">Seleccione</option>');

            response.forEach(element => {
                $('#Moneda').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });


            //Inicio de código para solucionar observación 15.4   HG 24.02.2021
            //Mostrar/Esconder "CON COSTO" Hebert_27.10.2020_18:02:09_44616 
            if ($('#ConCosto').is(':checked') == true) {
                //$('#Moneda').append('<option value="0">Seleccione</option>');
                $('#Moneda').val(0);
                $('#txtMontoCosto').val();
                $('#Money').show();
                $('#TipMoney').show();
                //Esconder Borde del div: div-contenedor-con-costo
                $('#div-contenedor-con-costo').show();
            }
            else if ($('#ConCosto').is(':checked') == false) {
                $('#Money').hide();
                $('#TipMoney').hide();
                $('#Moneda').val('');
                $('#txtMontoCosto').val(''); //valor vacio del campo
                $('#div-contenedor-con-costo').hide();
            }


            $('#ConCosto').on('ifChanged', function () {
                if ($('#ConCosto').is(':checked') == true) {
                    $('#Moneda').val(0);
                    $('#txtMontoCosto').val();
                    $('#Money').show();
                    $('#TipMoney').show();
                    $('#div-contenedor-con-costo').show();
                }
                else if ($('#ConCosto').is(':checked') == false) {
                    $('#Money').hide();
                    $('#TipMoney').hide();
                    $('#Moneda').val('');
                    $('#txtMontoCosto').val(''); //valor vacio del campo
                    $('#div-contenedor-con-costo').hide();
                }

            });

            //Fin de código para solucionar observación 15.4   HG 24.02.2021


            var SesionMovi = {
                IntIdMenu: 'M0305',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Asistencia/ObtenerRegistroServicio',
                { objSession: SesionMovi, intIdServicio: ServicioId },
                (response) => {

                    $('#txtCoServicio').val('');
                    $('#txtDescServicio').val('');
                    $('#txtCoExterno').val('');
                    $('#txtMontoCosto').val('');
                    $('#Moneda').val(0);
                    $('#TipServicios').val(0);
                    $('#ClaseServ').val(0);
                    $('#TipMenus').val(0);
                    $('#CategSC').val(0);
                    $('#IntIdServicio').val('');

                    response.forEach(element => {
                        $('#txtCoServicio').val(element.strCoServicio);
                        $('#txtDescServicio').val(element.strDesServicio);
                        $('#txtCoExterno').val(element.strCoExporta);

                        if (element.intIdMoneda == 0) {
                            $('#ConCosto').iCheck('uncheck');
                            $('#Money').hide();
                            $('#TipMoney').hide();
                            $('#div-contenedor-con-costo').hide();
                        } else if (element.intIdMoneda !== 0) {
                            $('#ConCosto').iCheck('check');
                            $('#Money').show();
                            $('#TipMoney').show();
                            $('#txtMontoCosto').val(element.monCostoServ);
                            $('#Moneda').val(element.intIdMoneda);
                            $('#div-contenedor-con-costo').show();
                        }
                        $('#ClaseServ').val(element.intClase);//añadido 18.03.2021
                        //añadido 18.03.2021
                        if (element.intClase == 1) {
                            $('#TipServicios').val(element.intIdTipServ);
                            $('#TipMenus').val(element.intIdTipoMenu);
                            $('#DivTipServicios').show();
                            $('#DivTipMenus').show();
                            $('#DivCategSC').hide();
                        } else {
                            $('#TipServicios').val(0);
                            $('#TipMenus').val(0);
                            $('#CategSC').val(element.intCategSC);
                            $('#DivTipServicios').hide();
                            $('#DivTipMenus').hide();
                            $('#DivCategSC').show();
                        }

                        $('#IntIdServicio').val(element.intIdServicio);

                        if (element.bitFlActivo == true) {
                            $('#Change_state').html('<input type="checkbox" class="js-switch" id="Activ_Serv" checked style="float:right;" />Activo');

                        } else if (element.bitFlActivo == false) {
                            $('#Change_state').html('<input type="checkbox" class="js-switch" id="Activ_Serv"  style="float:right;" /> Activo');
                        }
                        switcheryLoad();

                        $('.form-hide-servicio').show();
                    });
                });
        });//Añadido miercoles10: El combo monedas tiene que cargarse antes que el registro

}


//===============================================================================================
//=============================== FUNCION CamposAdicionalesServicio() ===========================fcaser
//===============================================================================================
function CamposAdicionalesServicio() {
    validarSession();//AÑADIDO HG 22.04.2021
    $.post(
        '/Asistencia/CamposAdicionales',
        { strEntidad: 'TCSERVICIO' },
        (response) => {

            console.log(response);
            $('#DivCamposAdicionalesServicio').empty();
            response.forEach(element => {

                $('#DivCamposAdicionalesServicio').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}









/***********************************************************/
/***************3.2-Regla de Negocio Comedor ***************/
/********* Mantenimiento Regla de Negocio Comedor **********/
/***********************************************************/
/**-------------------------------------------------------*//*ln_000_all*/
/**29. Mantenimiento Regla de Negocio Comedor(de sisfood) *//**24. Regla de Negocio Comedor (en sisfood) */
/**-------------------------------------------------------*//*ln_000_all*/
//BusqRegNeg filtro 01 "Buscar"
//ActvRegNegCom filtro "activo, inactivo""

//FILTRO COMBO PRINCIPAL
$('#ActvRegNegCom').on('change', function () {

    TablarReglaNegCom();

});

$('#BusqRegNeg').keyup(function () {

    TablarReglaNegCom();

});

//FILTRO COMBO 1 SERVICIOS
$('#TipMenuRN').on('change', function () {


    TablaRegNegComServ();

});

$('#TipMenuRN').keyup(function () {

    TablaRegNegComServ();

});


// ONCHANGE ESTADO ACTIVO/INACTIVO - Regla de Negocio Comedor
$('#cambio_estado').on('change', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    if ($("#chk-activo-RegNegCom").prop('checked') == true) {
        $("#texto_activo_inactivo").empty();
        $("#texto_activo_inactivo").append("  " + "Activo ");
        $('#texto_activo_inactivo').css("color", "#26b99a");
    }

    else if ($("#chk-activo-RegNegCom").prop('checked') == false) {
        $("#texto_activo_inactivo").empty();
        $("#texto_activo_inactivo").append("Activo ");
        $('#texto_activo_inactivo').css("color", "#949b9a");
    }

});

//===============================================================================================
//=============================== FUNCION CombosReglaDeNegociocOM() =============================
function CombosReglaDeNegociocOM() {

    //Combo Subsisio "TipoSubs"
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'SUBSIDIO', strSubGrupo: 'TIPO' },
        (response) => {
            var cantreg = response.length;
            if (cantreg == 0) {
                $('#TipoSubs').empty(0);
                $('#TipoSubs').append('<option selected>No existen Registros</option>');
                $('#TipoSubs').attr('disabled', true);

            }
            else if (cantreg !== 0) {
                $('#TipoSubs').empty(0);
                $('#TipoSubs').append('<option value="0" >Seleccione</option>');

                response.forEach(element => {

                    $('#TipoSubs').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            }
        });


    //Combo Empresa (*) "#IdEmp" - Combo En Regla De Negocio Comedor - Formulario Con Subsidio
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGEMPRESA', intIdFiltroGrupo: 0, strGrupo: 'TGEMPRESA', strSubGrupo: 'RN' },
        (response) => {

            $('#IdEmp').empty();
            //$('#IdEmp').append('<option value="0" >Seleccione</option>');//Retirado

            response.forEach(element => {

                $('#IdEmp').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });
            
        });


    //Inicio de código para solucionar observación 1.3  HG 01.03.2021 CERRADO 01.03.2021 09:23AM

    //Combo Tipo de Menú, este POST se tiene que llamar dos veces ya que hay dos combos
    //Mant. Regla de Negocio
    $.post(
        '/Asistencia/LlenarTipoUM',
        //{ strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'TIPOMENU' },//martes16 strGrupo: de COMEDOR lo cambio por RN
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'RN', strSubGrupo: 'TIPOMENU' },// HG 13.03.21 //martes16 strGrupo: de COMEDOR lo cambio por RN
        (response) => {

            //1er Combo: En el primer paso, con SUSIDIOS
            var cantreg = response.length;

            if (cantreg == 0) {
                $('#TipoMen').empty();
                //$('#TipoMen').append('<option selected>Seleccione222</option>');//Retirado
                $('#TipoMen').attr('disabled', true);

            }
            else if (cantreg !== 0) {
                $('#TipoMen').empty();
                //$('#TipoMen').append('<option value="0" >Seleccione44444</option>');//Retirado

                response.forEach(element => {

                    $('#TipoMen').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            }

            //2do Combo: En el paso DOS, para filtrar los servicios
            $('#TipServicioRN').empty();
            //'#TipServicioRN').append('<option value="0">Todos</option>');//Se mantienne

            response.forEach(element => {
                $('#TipServicioRN').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });



        });

    //Fin de código para solucionar observación 1.3  HG 01.03.2021


    //Combo Tipo de Menú "TipServicioRN" //Comentado HG 01.03.2021 09:17AM
    //$.post(
    //    '/Personal/ListarCombosPersonal_',
    //    { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'TIPOMENU' },
    //    (response) => {
    //        $('#TipServicioRN').empty();
    //        $('#TipServicioRN').append('<option value="0">Todos</option>');

    //        response.forEach(element => {
    //            $('#TipServicioRN').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

    //        });

    //    });


    //Combo Tipo de Servicio "TipMenuRN" - Cargar al EDITAR Regla de Negocio
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'RN', strSubGrupo: 'TIPOSERV' }, // HG 13.03.21 - Mantenimiento Regla de Negocio
        (response) => {

            $('#TipMenuRN').empty();
            //$('#TipMenuRN').append('<option value="0">Todos</option>');//Retirado

            $('#TipServiciosRNC').empty();
            //$('#TipServiciosRNC').append('<option value="0">Todos</option>');//Retirado

            response.forEach(element => {

                $('#TipMenuRN').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                $('#TipServiciosRNC').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });

        });



    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CONSUMO', strSubGrupo: 'PERIODO' },
        (response) => {
            $('#TipControlConsumo').empty();
            $('#TipControlConsumo').append('<option value="2">Seleccionar</option>');
            $('#TipControlConsumo').append('');
            response.forEach(element => {


                $('#TipControlConsumo').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>');
                //$('select option:eq(2)').prop('selected', true);            


            });

        });


}

//===============================================================================================
//=============================== LISTADO PRINCIPAL =============================================tabla regla de negocio
/* Esta función se encarga de realizar el listado principal, hace el uso de otra 
funcion "cardarDatosRegNegCom" al momento de presionar EDITAR y del "intentEliminarRegNegCom"*/
var _varTablaRegNeg;
function TablarReglaNegCom() {
    validarSession();//AÑADIDO HG 22.04.2021 
    var filtroActivo = $('#ActvRegNegCom').val();
    var strfiltro = $('#BusqRegNeg').val();

    var SesionMovi = {
        IntIdMenu: 'M0609',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }


    //Inicio de código para solucionar observación 1.1  HG 24.02.2021
    $.ajax({
        url: '/Asistencia/GetTablaFiltradaReglaNegocioComedor',
        type: 'POST',
        data: { objSession: SesionMovi, IntActivoFilter: filtroActivo, strfilter: strfiltro },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },


        success: function (response) {

        //============================================================

        //   console.log(response); ...... 

        //============================================================

            if (typeof _varTablaRegNeg !== 'undefined') {
                _varTablaRegNeg.destroy();
            }

            _varTablaRegNeg = $('#TablaRegCom').DataTable({
                data: response,
                columns: [

                    { data: 'strCoRegNeg' },
                    { data: 'strDesRegNeg' },
                    { data: 'strTipoConsu' },
                    { data: 'strContSub' },
                    { data: 'strDesEstado' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdReglaNeg = item.intIdReglaNeg;
                            let StrDesRegNeg = item.strDesRegNeg;
                            return `<button class="btn btn-success btn-xs btn-edit" dataid="${IntIdReglaNeg}" ><i class="fa fa-pencil"></i> Editar </button> 
                                           <button class="btn btn-primary btn-xs btn-delete" dataid="${IntIdReglaNeg}" des_data="${StrDesRegNeg}" data="${item}" ><i class="fa fa-trash-o"></i> Eliminar </button>`;
                        }
                    },
                    { data: 'intIdReglaNeg' }

                ],
                lengthMenu: [10, 25, 50],
                order: [5, 'asc'][2, 'asc'],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas                  
                    {
                        targets: [6],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });

            //$('#TablaRegCom  tbody').on('click', 'tr button.btn-edit', function () {

            //    let RegNegComId = $(this).attr("dataid")

            //    if (!isNaN(RegNegComId)) {
            //        cardarDatosRegNegCom(RegNegComId)
            //    }

            //});

            $('#TablaRegCom  tbody').on('click', 'tr button.btn-delete', function () {
                validarSession();//AÑADIDO HG 22.04.2021

                let RegNegComId = $(this).attr("dataid")
                let RegNegComDes = $(this).attr("des_data")
                if (!isNaN(RegNegComId)) {
                    intentEliminarRegNegCom(RegNegComId, RegNegComDes)
                }

            });

         },
        complete: function () {
            $.unblockUI();
        }
    });

    //Fin de código para solucionar observación 1.1  HG 24.02.2021




}

//Inicio de código para solucionar observación 1.17  HG 25.02.2021 
$('#TablaRegCom  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    let RegNegComId = $(this).attr("dataid")

    if (!isNaN(RegNegComId)) {
        cardarDatosRegNegCom(RegNegComId)
    }

});
//Fin de código para solucionar observación 1.17 HG 25.02.2021


//BOTON INTENT ELIMINAR - Regla de Negocio Comedor
function intentEliminarRegNegCom(RegNegComId, RegNegComDes) {
    validarSession();//AÑADIDO HG 22.04.2021
    swal({
        title: "Eliminar Regla de Negocio de Comedor",
        text: "¿Está seguro de eliminar la regla   ''<strong>" + RegNegComDes + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            yesEliminaReglaCom(RegNegComId);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}


//FUNCION ELIMINAR - Regla de Negocio Comedor=
function yesEliminaReglaCom(RegNegComId) {
    validarSession();//AÑADIDO HG 22.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0306',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/EliminarReglaNegocioCom',
        { objSession: SesionMovi, intIdReglaNeg: RegNegComId },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablarReglaNegCom();

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}


//CARGAR DATOS A EDITAR - Regla de Negocio Comedor
var _varTablaConfigHECD;
var _varTablaConfigHECDD;
function cardarDatosRegNegCom(RegNegComId) {

    //-------------------------------------------------------------------------------------------------------------
    //Añadido HG 12.04.21
    $.post(
        '/Proceso/MaestroMaxCaracteres',
        { StrNomMan: 'TGREGLANEG' },
        (response) => {
            response.forEach(element => {
                if (element.NombreColum == 'strCoRegNeg') {
                    $('#' + element.NombreColum + '').empty();
                    $('#' + element.NombreColum + '').append('<label>Código (*)</label><input type = "text" class= "form-control" id = "txt_cod_RegNegCom" placeholder = "Código" maxlength="' + element.intNumero + '" onkeypress="validarCampoCodigo(event)" ><div id="notifry_error" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                } else if (element.NombreColum == 'strDesRegNeg') {
                    $('#' + element.NombreColum + '').empty();
                    $('#' + element.NombreColum + '').append('<label>Descripción (*)</label><input type = "text" class= "form-control" id = "txt_desc_RegNegCom" placeholder = "Descripción" maxlength="' + element.intNumero + '"  onkeyup="this.value=caracteresValidosConEspacios(this.value)"><div id="notifry_errordes" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                }
            });
        });
    //-------------------------------------------------------------------------------------------------------------


    var detalleSubs1 = new Array();
    $('#primer_sitch_form').click();
    $('.form-hide-ReglaNegocio-Comedor').hide();
    $('#txt_cod_RegNegCom').val('');
    $('#txt_desc_RegNegCom').val('');
    $('#notifry_error').html('');
    $('#notifry_errordes').html('');
    $('#TipControlConsumo').val(2);
    $('#txtCantConsumo').val('');
    $('#tiempo_tol').val('00:00');
    $('#tiempo_tol').val('00:00');
    $('#ConSubsi').iCheck('uncheck');
    $('#TipoSubs').val(0);
    $('#pocent_general').val(1);

    //ListasDeSubsi = [];
    //ListasDeSubsi.splice(0, detalleSubs.length);
    detalleSubs.splice(0, detalleSubs.length);
    detalleServ.splice(0, detalleServ.length);

    $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.done:before, ' +
        '.wizard_horizontal ul.wizard_steps li a.done .step_no { ' +
        ' background: #73879C; color: #fff; ' +
        ' }</style >'
    )

    $('#segundo_sitch_form').on('click', function () {

        var g = 0;

        $('#span_02').click(function () {
            g = 1;
        });

        if (g == 1) {

                    
        }

        else {

            //Colorea de NEGRO: #34495E , el otro es VERDE: #1ABB9C //GreenYellow //PLOMO:#73879C
            //$('body').append('<style>.wizard_horizontal ul.wizard_steps li a.selected:before, .step_no {background-color:#1ABB9C;}</style>');

            $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.done:before, ' +
                '.wizard_horizontal ul.wizard_steps li a.done .step_no { ' +
                ' background: #1ABB9C; color: #fff; ' +
                ' }</style >'
            ) 

        }

        //$('body').append('<style>.wizard_horizontal ul.wizard_steps li a.selected:before, .step_no {background-color:#34495E;}</style>');

    });


    TablaRegNegComServ();  
    var d = new Date();
    var n = d.getTime();

     class TGREGLANEG_SUBSIDIO_DET {
        constructor(IntIdReglaNeg, IntIdEmp, nmPorcentaje, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif, intidtipoMenu, clave) {

            this.IntIdReglaNeg = IntIdReglaNeg  //almacena el IdEmpresa
            this.IntIdEmp = IntIdEmp            //Descripcion de la Empresa
            this.nmPorcentaje = nmPorcentaje
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg  //se almacena idTipoMenu reutilizar
            this.dttFeReg = dttFeReg
            this.dttFeModif = dttFeModif
            this.intidtipoMenu = intidtipoMenu  //se almacena la descripcion del TipoMenu
            this.clave = n
        }
    }

    $('#TipMenuRN').on('change', function () {
        TablarReglaNegComSub();
    });

    $('#TipServicioRN').on('change', function () {
        TablarReglaNegComSub();
    });

    $('#filtro2').keyup(function () {
        TablarReglaNegComSub();
    });

    $('#btn-update-ReglaNegocioCom').show();
    $('#btn-save-change-ReglaNegocioCom').hide();

    var SesionMovi = {
        IntIdMenu: 'M0306',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    //--------MÉTODOS----
    //1.  CABECERA
    $.post(
        '/Asistencia/ObtenerRegistroReglaNedocioCom',
        { objSession: SesionMovi, intIdReglaNeg: RegNegComId },
        (response) => {

            response.forEach(element => {
                $('#txt_cod_RegNegCom').val(element.strCoRegNeg);
                $('#txt_desc_RegNegCom').val(element.strDesRegNeg);

                if (element.bitFlActivo == 1) {
                    $('#cambio_estado').html()
                    $('#cambio_estado').html('<label id="texto_activo_inactivo"></label><input type="checkbox" class="js-switch" id="chk-activo-RegNegCom" style="float:right;" checked  />');
                    $("#texto_activo_inactivo").append("Activo ");
                    $('#texto_activo_inactivo').css("color", "#26b99a");
                    switcheryLoad();
                }
                else if (element.bitFlActivo == 0) {
                    $('#cambio_estado').html();
                    $('#cambio_estado').html('<label id="texto_activo_inactivo"></label><input type="checkbox" class="js-switch" id="chk-activo-RegNegCom" style="float:right; " unchecked />');
                    $("#texto_activo_inactivo").append("Activo ");
                    $('#texto_activo_inactivo').css("color", "#949b9a");
                    switcheryLoad();
                }
            });
        });


    //2.  DETALLE
    $('#IdRegNegCom').val(RegNegComId)

    // inicio --------------------------------
    $.post(
        '/Asistencia/ObtenerRegistroReglaNedocioDetCom',
        { objSession: SesionMovi, intIdReglaNeg: RegNegComId },
        (response) => {

            response.forEach(element => {

                if (element.strCoReglaDet == 'TIPPERIODO_CONSUMO') { //Diario, Periodico
                    if (element.strValorRegla > 0) {
                        $('#TipControlConsumo').val(element.strPosibValor);
                    }
                }

                if (element.strCoReglaDet == 'NUMCONSUMO_MAXGENERAL') {
                    $('#txtCantConsumo').val(element.strPosibValor);
                }

                if (element.strCoReglaDet == 'TOLERANCIA_CONSUMO') {
                    $('#tiempo_tol').val(element.strPosibValor);
                }


                //lunes01
                var ValorTipoSubs = '';
                if (element.strCoReglaDet == 'TIPO_SUBSIDIO_CONSUMO') { //

                    $('#TipoSubs').val(element.strPosibValor);

                    if (element.strPosibValor > 0) {

                        $('#ConSubsi').iCheck('check');
                        ValorTipoSubs = element.strValorRegla;


                        //evaluar por strcotipo=strValor  asignar intitipo =strPosibValor
                        if (ValorTipoSubs == '01') //01	GE	GENERAL	SUBSIDIO
                        {
                            $('#PGeneral').show();
                            $('#PEmpresa').hide();
                            $("#porcentaje_general").show();

                        }

                        else if (ValorTipoSubs == '02') //02	ES	POR EMPRESA	SUBSIDIO
                        {
                            $('#TipoSubs').val('128');
                            $('#PEmpresa').show();
                            $('#PGeneral').hide();
                            $("#porcentaje_general").hide();
                        }
                        else {
                            $('#PEmpresa').hide();
                            $('#PGeneral').hide();
                        }

                    } else {

                        $('#ConSubsi').iCheck('uncheck');
                    }
                }


                if ($('#ConSubsi').is(':checked') == true) {
                    $('#Subsidio').show();
                } else {
                    $('#Subsidio').hide();
                }
                if (element.strCoReglaDet == 'PORCENT_SUBSIDIO_CONSUMO') {

                    $('#pocent_general').val(element.strPosibValor);

                }

            });

            $('.form-hide-ReglaNegocio-Comedor').show();
        });

    //fin--------------------------------

    //CARGAR SUBSISIOS
    cargarSubsidiosEditar(RegNegComId);
    
    //CARGAR SERVICIOS AÑADIDOS
    cargarServiciosAgregadosEditar(RegNegComId) 

    //-------------------------------------------
    $('#ConSubsi').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021 
        if ($('#ConSubsi').is(':checked') == true) {
            $('#Subsidio').show();
        } else if ($('#ConSubsi').is(':checked') == false) {
            $('#Subsidio').hide();
            //INICIO DE SOLUCION OBSERVACION  11 HG 29.03.2021 // 06.04.2021
            detalleSubs = [];
            //FIN DE SOLUCION OBSERVACION 11  HG 29.03.2021
        }
    });


    $('#TipoSubs').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021 
        if ($('#TipoSubs').val() == 127) {

            $('#PGeneral').show();
            $('#PEmpresa').hide();
            $("#porcentaje_general").show();

        }
        else if ($('#TipoSubs').val() == 128) {

            $('#PEmpresa').show();
            $('#PGeneral').hide();
            $("#porcentaje_general").hide();

        }
        else if ($('#TipoSubs').val() == 0) {

            $('#PEmpresa').hide();
            $('#PGeneral').hide();

        }
    });

}


//SERVICIOS AÑADIDOS/AGREGADOS - Regla de Negocio Comedor
function cargarServiciosAgregadosEditar(RegNegComId) {

    var SesionMovi = {
        IntIdMenu: 'M0306',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    //SERVICIOS AÑADIDOS
    $.post(
        '/Asistencia/ObtenerRegistroReglaNegocioServCom',
        { objSession: SesionMovi, intIdReglaNeg: RegNegComId },
        (response) => {
            console.log(response);


            if (typeof _varTablaServDet !== 'undefined') {
                _varTablaServDet.destroy();
            }

            _varTablaServDet = $('#TablaDetServ').DataTable({
                data: response,
                bFilter: true, 
                bJQueryUI: true,
                bFilter: true,
                bInfo: true,
                columns: [

                    { data: 'strCoServicio' },                            //IntIdReglaNeg  
                    { data: 'strDesServicio' },                           //intIdServicio  
                    { data: 'strDesTipoServicio' },                        //strCoServicio  
                    { data: 'strDesMenu' },                                //strDesServicio 
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            //let intidServicio = item.intidServicio;
                            let intidServicio = item.strCoServicio; //modificado 02.03.2021 para borrar por codigo de servicio.
                            //ventana editar.
                            return `<button onclick='quitarFilaDeTablaServicio(this,"${intidServicio}")' class="btn btn-danger  btn-xs btn-delete" dataidServ="${intidServicio}" ><i class="fa fa-trash-o"></i> Quitar</button>  `;

                        }
                    }

                    //,
                    //{ data: 'intIdServicio' }
                ],
                lengthMenu: [4, 25, 50],
                order: [],//1, 'asc'
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas    
                    {
                        //targets: [5],
                        //visible: false,//true //Inicio y Fin de código para solucionar observación 1.7  HG 24.02.2021
                        //searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });


            class TGREGLANEG_SERVICIO_DET {
                constructor(intidServicio, strcoServicio, strDesServicio, StrTipServ, StrTipMenu) {

                    this.intidServicio = intidServicio
                    this.strcoServicio = strcoServicio
                    this.strDesServicio = strDesServicio
                    this.StrTipServ = StrTipServ
                    this.StrTipMenu = StrTipMenu

                }

            }


            response.forEach(element => {

                var IntIdServ = element.intIdServicio;
                var strCoServ = element.strCoServicio;
                var StrDesServ = element.strDesServicio;
                var strDesTipSer = element.strDesTipoServicio;
                var strDesTipMenw = element.strDesMenu;

                detalleServ.push(new TGREGLANEG_SERVICIO_DET(IntIdServ, strCoServ, StrDesServ, strDesTipSer, strDesTipMenw));

                //alert(IntIdServ);

            });
           

        });


}


//CARGAR SUSIDIOS A EDITAR - Regla de Negocio Comedor
function cargarSubsidiosEditar(RegNegComId) {

    var SesionMovi = {
        IntIdMenu: 'M0306',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    //3.  SUBSIDIOS
    $.post(
        '/Asistencia/ObtenerRegistroReglaNegocioSubsiCom',
        { objSession: SesionMovi, intIdReglaNeg: RegNegComId },
        (response) => {
            console.log(response);

            if (typeof _varTablaSubsiDet !== 'undefined') {
                _varTablaSubsiDet.destroy();
            }
            //dibujando tabla inferior
            _varTablaSubsiDet = $('#TablaDetReg').DataTable({
                data: response,//detalleSubs,
                columns: [

                    { data: 'IntIdEmp' },      //idempresa
                    { data: 'strDeEmpresa' },  //descripcion empresa
                    { data: 'strDeTipoServ' },  //Añadido 'Tipo de Servicios' martes16---revisar sp 
                    { data: 'strDeTipoMenu' }, //descripcion menu
                    { data: 'nmPorcentaje' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdEmp = item.IntIdEmp;
                            let strIdEmp = item.strDeEmpresa;
                            //ventana EDITAR
                            return `<button onclick='quitarFilaDeTablaSubsidio(this,"${strIdEmp}")' class="btn btn-danger  btn-xs btn-delete" dataidServ="${IntIdEmp}"><i class="fa fa-trash-o"></i> Quitar</button>  `;

                        }
                    }

                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas    
                    {
                        targets: [0],
                        visible: false,//true //Inicio y Fin de código para solucionar observación 1.7  HG 24.02.2021
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });

            //DESDE LA BD
            //IntIdReglaNegSubsDet
            //IntIdReglaNeg
            //IntIdEmp
            //strDeEmpresa
            //intidtipoMenu
            //strDeTipoMenu
            //nmPorcentaje
            //intIdTipServ
            //strDeTipoServ

            //llenar objeto array con el objeto "response".        
            var d = new Date();
            var n = d.getTime();

            class TGREGLANEG_SUBSIDIO_DET {
                constructor(IntIdReglaNeg, IntIdEmp, nmPorcentaje, bitFlEliminado, intIdUsuarReg,
                    dttFeReg, intIdUsuarModif, dttFeModif, intidtipoMenu, clave) {

                    this.IntIdReglaNeg  = IntIdReglaNeg      //almacena el IdEmpresa
                    this.IntIdEmp       = IntIdEmp           //Descripcion de la Empresa
                    this.nmPorcentaje   = nmPorcentaje
                    this.bitFlEliminado = bitFlEliminado
                    this.intIdUsuarReg  = intIdUsuarReg      //se almacena idTipoMenu reutilizar
                    this.dttFeReg       = dttFeReg           //this.dttFeReg       = dttFeReg
                    //this.intIdUsuarModif= intIdUsuarModif
                    //this.dttFeModif = dttFeModif
                    this.intIdTipServ   = intIdUsuarModif    //ID TIPO DE SERVICIO      HG 16.03.21
                    this.strDescServi   = dttFeModif         //TEXTO TIPO DE SERVICIO   HG 16.03.21
                    this.intidtipoMenu  = intidtipoMenu      //se almacena la descripcion del TipoMenu
                    this.clave          = n
                } 
            }

            //Martes16.03
            response.forEach(element => {
    
                var IntIdEmp_      = element.IntIdEmp;
                var strDeEmpresa_  = element.strDeEmpresa;
                var intidtipoMenu_ = element.intidtipoMenu;
                var nmPorcentaje_  = element.nmPorcentaje;
                var strDeTipoMenu_ = element.strDeTipoMenu; 
                var intIdServicio_ = element.intIdTipServ;
                var strDeServicio_ = element.strDeTipoServ;

                detalleSubs.push(new TGREGLANEG_SUBSIDIO_DET(IntIdEmp_, strDeEmpresa_, nmPorcentaje_, 0, intidtipoMenu_, d, intIdServicio_, strDeServicio_, strDeTipoMenu_, n));
                //detalleSubs.push(new TGREGLANEG_SUBSIDIO_DET(IntIdEmp_, strDeEmpresa_, nmPorcentaje_, 0, intidtipoMenu_, d, 0, d, strDeTipoMenu_, n));


            });





        });

}


//TABLA DE HORA EXTRAS - Regla de Negocio Comedor
function LlenarTablaHE() {
    validarSession();//AÑADIDO HG 22.04.2021
    var DetalleHorasExtras = new Array();

    class DetalleConfigHoras {
        constructor(intIdRegNegHE, HorarioNorm, HorarioNoct, TipoDia, strHorarioNorm, strHorarioNoct, strTipoDia, TimeConfigHE, clave) {

            this.intIdRegNegHE = intIdRegNegHE
            this.HorarioNorm = HorarioNorm
            this.HorarioNoct = HorarioNoct
            this.TipoDia = TipoDia
            this.strHorarioNorm = strHorarioNorm
            this.strHorarioNoct = strHorarioNoct
            this.strTipoDia = strTipoDia
            this.TimeConfigHE = TimeConfigHE
            this.clave = clave


        }

    }


    var d = new Date();
    var n = d.getTime()

    var IDREGNEG = $('#IdRegNeg').val();

    $.post(
        '/Asistencia/ObtenerRegistroReglaNedocioConfigHE',
        { intIdReglaNeg: IDREGNEG },
        (response) => {

            console.log(response);
            response.forEach(element => {


                DetalleHorasExtras.push(new DetalleConfigHoras(element.intIdRegNegHE, element.intIdConceptoDiurno, element.intIdConceptoNocturno, element.intTipoDia, element.strDesConcepto1, element.strDesConcepto2, element.strTipoDia, element.timeTiempo, n));

                n = n + 2;

                if (typeof _varTablaConfigHECD !== 'undefined') {
                    _varTablaConfigHECD.destroy();
                }

                _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'strTipoDia' },
                        { data: 'strHorarioNorm' },
                        { data: 'strHorarioNoct' },
                        { data: 'TimeConfigHE' },
                        { data: null },
                        { data: 'clave' },

                    ],
                    order: [3, 'asc'],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: 'No hay Items para mostrar',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas                  
                        {
                            targets: [0],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [1],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [2],
                            visible: false,
                            searchable: false
                        },

                        {
                            targets: [7],
                            data: null,
                            defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                        },
                        {
                            targets: [8],
                            visible: false,
                            searchable: false
                        }
                    ],

                });

                if (typeof _varTablaConfigHECDD !== 'undefined') {
                    _varTablaConfigHECDD.destroy();
                }


                _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'TimeConfigHE' },
                        { data: 'intIdRegNegHE' },
                        { data: 'TimeConfigHE' },

                    ],
                    order: [0, 'asc'],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas                  


                        {
                            targets: [5],
                            visible: false,
                            searchable: false
                        }
                    ],

                });


            });


            $('#Config_Detalle_HESSS  tbody').on('click', 'tr input.btn-delete', function () {
                validarSession();//AÑADIDO HG 22.04.2021



                var data = $(this).parents('li').next().html();


                for (var i = 0; i < DetalleHorasExtras.length; i++) {

                    if (DetalleHorasExtras[i].clave == data * 1) {

                        DetalleHorasExtras.splice(i, 1);
                        //var claveInter = DetalleHorasExtras[i].clave;

                        //if (claveInter == detalleHoras[i].clave) {

                        //    detalleHoras.splice(i, 1);

                        //}
                    }

                }





                var data2 = $(this).parents('td').next().html();


                for (var i = 0; i < DetalleHorasExtras.length; i++) {

                    if (DetalleHorasExtras[i].clave == data2 * 1) {

                        DetalleHorasExtras.splice(i, 1);
                        //////var claveInter = n;

                        //////if (claveInter == DetalleHorasExtras[i].clave) {

                        //////    detalleHoras.splice(i, 1);

                        //////}
                    }
                }


                if (typeof _varTablaConfigHECD !== 'undefined') {
                    _varTablaConfigHECD.destroy();
                }


                _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'strTipoDia' },
                        { data: 'strHorarioNorm' },
                        { data: 'strHorarioNoct' },
                        { data: 'TimeConfigHE' },
                        { data: null },
                        { data: 'clave' },


                    ],
                    order: [3, 'asc'],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas                  
                        {
                            targets: [0],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [1],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [2],
                            visible: false,
                            searchable: false
                        },

                        {
                            targets: [7],
                            data: null,
                            defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                        },
                        {
                            targets: [8],
                            visible: false,
                            searchable: false
                        }
                    ],

                });



                if (typeof _varTablaConfigHECDD !== 'undefined') {
                    _varTablaConfigHECDD.destroy();
                }


                _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'TimeConfigHE' },
                        { data: 'intIdRegNegHE' },
                        { data: 'TimeConfigHE' },



                    ],
                    order: [0, 'asc'],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas                  


                        {
                            targets: [5],
                            visible: false,
                            searchable: false
                        }
                    ],

                });




            });



        });

    console.log(DetalleHorasExtras);


    ///Despues de Listado
    $('#UsoTolera').on('change', function () {
        var TipoDiaV = $('#UsoTolera option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'REGNEG', strSubGrupo: 'HE' },
            (response) => {
                $('#strTipoDiaV').empty();
                response.forEach(element => {


                    if (element.intidTipo == TipoDiaV) {

                        $('#strTipoDiaV').val(element.strDeTipo);


                    }


                });

            });
    });

    $('#chck_no_time').on('ifChanged', function () {
        validarSession();//AÑADIDO HG 22.04.2021
        if ($('#chck_no_time').is(':checked') == true) {

            $('#time_config_he').attr('disabled', true);
            $('#time_config_he').val('00:00');

        } else if ($('#chck_no_time').is(':checked') == false) {

            $('#time_config_he').attr('disabled', false);


        }
    });
    var escape_delete = 0;
    $('#btn_save_congig_he').on('click', function () {
        validarSession();//AÑADIDO HG 22.04.2021 

        var HorarioNormV = $('#HorasExtras option:selected').val();
        var HorarioNoctV = $('#HorasExtrase option:selected').val();
        var TipoDiaV = $('#UsoTolera option:selected').val();
        var TimeConfigHEV = $('#time_config_he').val();



        var d = new Date();
        var n = d.getTime()

        if (HorarioNormV == 'Seleccione' || HorarioNoctV == 'Seleccione' || TipoDiaV == 'Seleccione' || TimeConfigHEV == '00:00') {

            if ($('#chck_no_time').is(':checked') == true) {

            } else if ($('#chck_no_time').is(':checked') == false) {

                new PNotify({
                    title: 'Regla de Negocio',
                    text: 'Llene los campos Obligatorios',
                    type: 'info',
                    delay: 1000,
                    styling: 'bootstrap3',
                    addclass: 'dark'

                });
                return;
            }
        }

        if (HorarioNormV == 'Seleccione' || HorarioNoctV == 'Seleccione') {

            new PNotify({
                title: 'Regla de Negocio',
                text: 'Los Horarios no pueden estar vacios',
                type: 'info',
                delay: 1000,
                styling: 'bootstrap3',
                addclass: 'dark'

            });
            return;

        }

        class DetalleConfigHoras {
            constructor(intIdRegNegHE, HorarioNorm, HorarioNoct, TipoDia, strHorarioNorm, strHorarioNoct, strTipoDia, TimeConfigHE, clave) {

                this.intIdRegNegHE = intIdRegNegHE
                this.HorarioNorm = HorarioNorm
                this.HorarioNoct = HorarioNoct
                this.TipoDia = TipoDia
                this.strHorarioNorm = strHorarioNorm
                this.strHorarioNoct = strHorarioNoct
                this.strTipoDia = strTipoDia
                this.TimeConfigHE = TimeConfigHE
                this.clave = clave


            }

        }


        $('#strsalir').empty();


        for (var i = 0; i < DetalleHorasExtras.length; i++) {

            if (DetalleHorasExtras[i].TipoDia == TipoDiaV) {

                if (DetalleHorasExtras[i].TimeConfigHE !== '00:00') {


                } else if (DetalleHorasExtras[i].TimeConfigHE == '00:00') {



                    new PNotify({
                        title: 'Regla de Negocio',
                        text: 'Intervalo anterior Indefinido',
                        type: 'info',
                        delay: 1000,
                        styling: 'bootstrap3'

                    });
                    return;
                }

            }

        }






        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGHEXTRAS', intIdFiltroGrupo: 0, strGrupo: '', strSubGrupo: '' },
            (response) => {


                response.forEach(element => {

                    if (element.intidTipo == HorarioNormV) {

                        $('#strHorarioNormV').val(element.strDeTipo);



                    } if (element.intidTipo == HorarioNoctV) {

                        $('#strHorarioNoctV').val(element.strDeTipo);



                    }

                });




                var strHorarioNormV = $('#strHorarioNormV').val();
                var strHorarioNoctV = $('#strHorarioNoctV').val();
                var strTipoDiaV = $('#strTipoDiaV').val();

                DetalleHorasExtras.push(new DetalleConfigHoras(null, HorarioNormV, HorarioNoctV, TipoDiaV, strHorarioNormV, strHorarioNoctV, strTipoDiaV, TimeConfigHEV, n));




                if (typeof _varTablaConfigHECD !== 'undefined') {
                    _varTablaConfigHECD.destroy();
                }


                _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'strTipoDia' },
                        { data: 'strHorarioNorm' },
                        { data: 'strHorarioNoct' },
                        { data: 'TimeConfigHE' },
                        { data: null },
                        { data: 'clave' },


                    ],
                    order: [3, 'asc'],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas                  
                        {
                            targets: [0],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [1],
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [2],
                            visible: false,
                            searchable: false
                        },

                        {
                            targets: [7],
                            data: null,
                            defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                        },
                        {
                            targets: [8],
                            visible: false,
                            searchable: false
                        }
                    ],

                });



                if (typeof _varTablaConfigHECDD !== 'undefined') {
                    _varTablaConfigHECDD.destroy();
                }


                _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                    data: DetalleHorasExtras,
                    columns: [

                        { data: 'HorarioNorm' },
                        { data: 'HorarioNoct' },
                        { data: 'TipoDia' },
                        { data: 'TimeConfigHE' },
                        { data: 'intIdRegNegHE' },
                        { data: 'TimeConfigHE' },



                    ],
                    order: [0, 'asc'],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas                  


                        {
                            targets: [5],
                            visible: false,
                            searchable: false
                        }
                    ],

                });



            });




        $('#Config_Detalle_HESSS  tbody').on('click', 'tr input.btn-delete', function () {
            validarSession();//AÑADIDO HG 22.04.2021 




            var data = $(this).parents('li').next().html();


            for (var i = 0; i < DetalleHorasExtras.length; i++) {

                if (DetalleHorasExtras[i].clave == data * 1) {

                    DetalleHorasExtras.splice(i, 1);
                    //var claveInter = DetalleHorasExtras[i].clave;

                    //if (claveInter == detalleHoras[i].clave) {

                    //    detalleHoras.splice(i, 1);

                    //}
                }

            }





            var data2 = $(this).parents('td').next().html();


            for (var i = 0; i < DetalleHorasExtras.length; i++) {

                if (DetalleHorasExtras[i].clave == data2 * 1) {

                    DetalleHorasExtras.splice(i, 1);
                    //////var claveInter = n;

                    //////if (claveInter == DetalleHorasExtras[i].clave) {

                    //////    detalleHoras.splice(i, 1);

                    //////}
                }
            }



            if (typeof _varTablaConfigHECD !== 'undefined') {
                _varTablaConfigHECD.destroy();
            }


            _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                data: DetalleHorasExtras,
                columns: [

                    { data: 'HorarioNorm' },
                    { data: 'HorarioNoct' },
                    { data: 'TipoDia' },
                    { data: 'strTipoDia' },
                    { data: 'strHorarioNorm' },
                    { data: 'strHorarioNoct' },
                    { data: 'TimeConfigHE' },
                    { data: null },
                    { data: 'clave' },


                ],
                order: [3, 'asc'],
                sDom: '',
                responsive: true,
                language: {
                    lengthMenu: '',
                    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                    infoEmpty: 'No hay Items para mostrar',
                    search: '',
                    sSearchPlaceholder: '',
                    zeroRecords: '',
                    infoFiltered: '',
                    paginate: {
                        previous: 'Anterior',
                        next: 'Siguiente'
                    }
                },
                columnDefs: [//ocultar y definir columnas                  
                    {
                        targets: [0],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [1],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [2],
                        visible: false,
                        searchable: false
                    },

                    {
                        targets: [7],
                        data: null,
                        defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                    },
                    {
                        targets: [8],
                        visible: false,
                        searchable: false
                    }
                ],

            });



            if (typeof _varTablaConfigHECDD !== 'undefined') {
                _varTablaConfigHECDD.destroy();
            }


            _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                data: DetalleHorasExtras,
                columns: [

                    { data: 'HorarioNorm' },
                    { data: 'HorarioNoct' },
                    { data: 'TipoDia' },
                    { data: 'TimeConfigHE' },
                    { data: 'intIdRegNegHE' },
                    { data: 'TimeConfigHE' },



                ],
                order: [0, 'asc'],
                sDom: '',
                responsive: true,
                language: {
                    lengthMenu: '',
                    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                    infoEmpty: 'No hay Items para mostrar',
                    search: '',
                    sSearchPlaceholder: '',
                    zeroRecords: '',
                    infoFiltered: '',
                    paginate: {
                        previous: 'Anterior',
                        next: 'Siguiente'
                    }
                },
                columnDefs: [//ocultar y definir columnas                  


                    {
                        targets: [5],
                        visible: false,
                        searchable: false
                    }
                ],

            });




        });





    });



    $('#btn-delete-all').on('click', function () {
        validarSession();//AÑADIDO HG 22.04.2021
        if (DetalleHorasExtras.length > 0) {


            swal({
                title: "Eliminar Configuraciones ",
                text: "¿Está seguro de eliminar Todas las Configuraciones'?",
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, eliminar",
                cancelButtonText: "No, cancelar",
            }).then(function (isConfirm) {
                if (isConfirm) {


                    DetalleHorasExtras.length = 0;

                    if (typeof _varTablaConfigHECD !== 'undefined') {
                        _varTablaConfigHECD.destroy();
                    }


                    _varTablaConfigHECD = $('#Config_Detalle_HESSS').DataTable({
                        data: DetalleHorasExtras,
                        columns: [

                            { data: 'HorarioNorm' },
                            { data: 'HorarioNoct' },
                            { data: 'TipoDia' },
                            { data: 'strHorarioNorm' },
                            { data: 'strHorarioNoct' },
                            { data: 'strTipoDia' },
                            { data: 'TimeConfigHE' },
                            { data: null },
                            { data: 'clave' },


                        ],
                        order: [3, 'asc'],
                        sDom: '',
                        responsive: true,
                        language: {
                            lengthMenu: '',
                            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                            infoEmpty: 'No hay Items para mostrar',
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                        columnDefs: [//ocultar y definir columnas                  
                            {
                                targets: [0],
                                visible: false,
                                searchable: false
                            },
                            {
                                targets: [1],
                                visible: false,
                                searchable: false
                            },
                            {
                                targets: [2],
                                visible: false,
                                searchable: false
                            },

                            {
                                targets: [7],
                                data: null,
                                defaultContent: '<input  type="button" class="btn btn-danger btn-xs btn-delete"  value="Quitar" />'
                            },
                            {
                                targets: [8],
                                visible: false,
                                searchable: false
                            }
                        ],

                    });



                    if (typeof _varTablaConfigHECDD !== 'undefined') {
                        _varTablaConfigHECDD.destroy();
                    }


                    _varTablaConfigHECDD = $('#Config_Detalle_HES').DataTable({
                        data: DetalleHorasExtras,
                        columns: [

                            { data: 'HorarioNorm' },
                            { data: 'HorarioNoct' },
                            { data: 'TipoDia' },
                            { data: 'TimeConfigHE' },
                            { data: 'intIdRegNegHE' },
                            { data: 'TimeConfigHE' },



                        ],
                        order: [0, 'asc'],
                        sDom: '',
                        responsive: true,
                        language: {
                            lengthMenu: '',
                            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                            infoEmpty: 'No hay Items para mostrar',
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                        columnDefs: [//ocultar y definir columnas                  


                            {
                                targets: [5],
                                visible: false,
                                searchable: false
                            }
                        ],

                    });


                    return;

                } else {
                    swal("Cancelado", "La Operación fue cancelada", "error");
                }
            });


        } else if (DetalleHorasExtras.length == 0) {

        }

    });





}


//CAMPOS ADICIONALES REGLA DE NEGOCIO - Regla de Negocio Comedor
function CamposAdicionalesReglaNegocio() {
    validarSession();//AÑADIDO HG 22.04.2021
    $.post(
        '/Asistencia/CamposAdicionales',
        { strEntidad: 'TGREGLANEG' },
        (response) => {

            console.log(response);
            $('#DivCamposAdicionalesPeriodo').empty();
            response.forEach(element => {

                $('#DivCamposAdicionalesPeriodo').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');


            });
        });
}


//===============================================================================================
/*      TABLA        :   FORMULARIO     :         METODO           :          ARREGLO 
2.- "#TablaDetReg"   :  Con Subsidio    :  TablarReglaNegComSub()  :  detalleSubs = new Array();*/
function quitarFilaDeTablaSubsidio(e, ide) {
    validarSession();//AÑADIDO HG 22.04.2021
    const FuncionArray = (element) => element.IntIdEmp === ide; //IntIdReglaNeg
    var index = detalleSubs.findIndex(FuncionArray);

    if (index > -1) {
        detalleSubs.splice(index, 1)
        $(e).parents('tr').remove(); //RETIRA LA FILA CON ESE ITEM DE LA TABLA
    } //RETIRA EL ITEM DEL ARRAY

}

//TABLA DE SUBSIDIOS AÑADIDOS ó AGREGADOS - #TablaDetReg con el Objeto "detalleSubs""
var _varTablaSubsiDet;
var detalleSubs = new Array();
function TablarReglaNegComSub() {
    validarSession();//AÑADIDO HG 22.04.2021

    if (typeof _varTablaSubsiDet !== 'undefined') {
        _varTablaSubsiDet.destroy();
    }

    _varTablaSubsiDet = $('#TablaDetReg').DataTable({
        data: detalleSubs,
        columns: [

            { data: 'IntIdReglaNeg' }, //{ data: 'strCoEmp' },
            { data: 'IntIdEmp' },
            { data: 'strDescServi' },  //Añadido 'Tipo de Servicios'
            { data: 'intidtipoMenu' },
            { data: 'nmPorcentaje' },
            {
                sortable: false,
                "render": (data, type, item, meta) => {
                    //let IntIdReglaNeg = item.intIdReglaNeg; //No usado
                    let IntIdEmp = item.IntIdEmp;
                    //ventana nuevo
                    return `<button onclick='quitarFilaDeTablaSubsidio(this,"${IntIdEmp}")' class="btn btn-danger  btn-xs btn-delete" dataidServ="${IntIdEmp}"><i class="fa fa-trash-o"></i> Quitar</button>  `;

                }
            }

        ],
        lengthMenu: [10, 25, 50],
        order: [],//1, 'asc'
        responsive: true,
        language: _datatableLanguaje,
        columnDefs: [//ocultar y definir columnas  

                  {
                        targets: [0],
                        visible: false,
                        searchable: false
                  }


        ],
        dom: 'lBfrtip',
    });

    //Esconde Cabecera de filtros
    $('#TablaDetReg_info').hide();
    $('#TablaDetReg_filter').hide();
    $('#TablaDetReg_length').hide();

    $('#TablaDetReg  tbody').on('click', 'tr button.btn-delete', function () {
        validarSession();//AÑADIDO HG 22.04.2021

        let RegNegComId = $(this).attr("dataid")
        let RegNegComDes = $(this).attr("des_data")

        if (!isNaN(RegNegComId)) {

            intentEliminarRegNegCom(RegNegComId, RegNegComDes)

        }

    });

}


//TABLA DE SERVICIOS A AÑADIR - LISTADO INICIAL - En el Paso Dos - De Título: "ListarServicios"
//===============================================================================================
/*Esta función se encarga de llenar a la tabla "#TablaServ" en el formulario NUEVO/EDITAR, 
al seleccionar SERVICIO. En dicho listado nos cargará de la BD los tipos de servicios, los cuales 
se deben agregar a la Cuarta tabla "TablaDetServ". */
var _varTablaServReg;
var _varTablaServDet;
var detalleServ = new Array();
function TablaRegNegComServ() {
    validarSession();//AÑADIDO HG 22.04.2021 
    var Activorn = 2;
    var Descipciónrn = $('#filtro2').val();
    var TipMenurn = $('#TipMenuRN option:selected').val();         //COMOBO FILTRO 1: Tipo de Menú: Económico, Ejecutivo y Dietético
    var TipServiciorn = $('#TipServicioRN option:selected').val(); //COMOBO FILTRO 2: Tipo de Servicio: desayuno, almuerzo, cena

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/GetTablaServicio',
        //{ objSession: SesionMovi, IntActivoFilter: Activorn, strfilter: Descipciónrn, intfiltrojer1: TipMenurn, intfiltrojer2: TipServiciorn  },
        { objSession: SesionMovi, IntActivoFilter: Activorn, strfilter: Descipciónrn, intfiltrojer1: TipMenurn, intfiltrojer2: TipServiciorn, intfiltroClase: 0, intUso: 1 }, //modificado 18.03.2021
        (response) => {
            console.log(response);

            if (typeof _varTablaServReg !== 'undefined') {
                _varTablaServReg.destroy();
            }

            _varTablaServReg = $('#TablaServ').DataTable({
                data: response,
                columns: [

                    //Boton Añadir Agregar Servicios
                    { data: 'strCoServicio' },
                    { data: 'strDesServicio' },
                    { data: 'strDesTipServicio' },
                    { data: 'strDesTipMenu' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdServ = item.intIdServicio;
                            let strCoServ = item.strCoServicio;
                            let StrDesServ = item.strDesServicio;
                            let strDesTipSer = item.strDesTipServicio;
                            let strDesTipMen = item.strDesTipMenu;

                            return ` <label class="btn btn-primary btn-xs btn-añadir "  dataidServ="${IntIdServ}" ` +   
                                `datacose="${strCoServ}" datadesse="${StrDesServ}" ` +
                                `datadestiser="${strDesTipSer}" datadestipmen="${strDesTipMen}" ` +
                                ` > Agregar </label>`;
                        }
                    }
                    //,
                    //{ data: 'intIdServicio' }
                ],
                lengthMenu: [3, 5, 10],
                order: [1, 'asc'][2, 'asc'],
                responsive: true,
                language: _datatableLanguaje,
                fixedHeader: //true,
                 {
                    header: true,
                    footer: true
                },
                columnDefs: [
                    //{
                    //    targets: [5],
                    //    visible: true,
                    //    searchable: true
                    //}

                ],
                dom: 'lBfrtip',
            });

            //$('#TablaServ_info').hide();
            //$('#TablaServ_filter').hide();
            //$('#TablaServ_length').hide();


        });


}


//BOTON EDITAR - Regla de Negocio 
$('#TablaServ  tbody').on('click', 'tr .btn-añadir', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    //Valida no duplicidad al añadir a la cuarta tabla
    let IntIdServ = $(this).attr("dataidServ")
    let strCoServ = $(this).attr("datacose")

    //console.log(IntIdServ);

    var refTab = document.getElementById("TablaDetServ")
    var ttl;

    //valida versus el codigo de servicio
        /*Loop todas las filas y columnas de la tabla SERVICIO y asignarle 
        alguna condición. Este FOR verifica el contenido de cada celda*/
        for (var i = 0; row = refTab.rows[i]; i++) {
            row = refTab.rows[i];
            for (var j = 0; col = row.cells[j]; j++) {
                var val_en_tabla = col.firstChild.nodeValue //obtener la primera columna
                console.log(val_en_tabla);
                if (val_en_tabla == strCoServ) {

                    new PNotify({
                        title: 'Agregar Servicios',
                        text: 'El Servicio "' + val_en_tabla +'" ya fue agregado a la lista',
                        type: 'info',
                        delay: 3000,
                        styling: 'bootstrap3',
                        addclass: 'dark'
                    });

                    return;
                }
            }
        }


    //Si no encuentra coincidencia de duplicidad permite añadirlo y continua
    let StrDesServ = $(this).attr("datadesse")
    let strDesTipSer = $(this).attr("datadestiser")
    let strDesTipMenw = $(this).attr("datadestipmen")



    class TGREGLANEG_SERVICIO_DET {
        constructor(intidServicio, strcoServicio, strDesServicio, StrTipServ, StrTipMenu) {

            this.intidServicio = intidServicio
            this.strcoServicio = strcoServicio
            this.strDesServicio = strDesServicio
            this.StrTipServ = StrTipServ
            this.StrTipMenu = StrTipMenu

        }

    }

    detalleServ.push(new TGREGLANEG_SERVICIO_DET(IntIdServ, strCoServ, StrDesServ, strDesTipSer, strDesTipMenw));
    TablarReglaNegServDet();


});


//QUITAR FILA DE LA TABLA SERVICIOS
function quitarFilaDeTablaServicio(e, Id) {
    validarSession();//AÑADIDO HG 22.04.2021 
    //onclick='quitarFilaDeTablaServicio(this,"${intidServicio}")'
    //let idServ = $(this).attr("dataidServ")
    //console.log("IDServ_REMOVER");
    //console.log(Id);
    //console.log(detalleServ);

    //var idx = detalleServ.indexOf(Id);
    const FuncionArray = (element) => element.strcoServicio === Id;
    
    var index = detalleServ.findIndex(FuncionArray);
    //console.log(index);
    if (index > -1) {

        detalleServ.splice(index, 1)
        $(e).parents('tr').remove();
    }

}


//SERVICIOS AÑADIDOS/AGREGADOS - LISTADO - Servicio Detalle
//===============================================================================================
//=============================== FUNCION TablaReglaNegServDet() ================================ Regla de Negocio
/*Ésta función TablarReglaNegServDet() se encarga de llenar a la tabla "#TablaDetServ", quien 
recibe los servicios añadidos desde la tabla de listado de servicios "#TablaServ". Ambas tablas 
estan en el formulario de SERVICIOS uno encima del otro. 
Ésta cuarta tabla "#TablaDetServ" de este formulario es cargado desde la otra tabla: "#TablaServ" */
 //var detalleServ1 = new Array();
function TablarReglaNegServDet() {
    validarSession();//AÑADIDO HG 22.04.2021
    if (typeof _varTablaServDet !== 'undefined') {
        _varTablaServDet.destroy();
    }

   
    _varTablaServDet = $('#TablaDetServ').DataTable({
        data: detalleServ,
                //////bFilter: true, //Disable search function
                //////bJQueryUI: true, //Enable smooth theme
                ////////sPaginationType: "full_numbers", //Enable smooth theme
                ////////bJQueryUI: true,
                //////bFilter: true,
                //////bInfo: true,
                ////////sDom: 'lfrtip',
                ////////bPaginate: true,
                ////////sDom: 't',

        columns: [

            { data: 'strcoServicio' },
            { data: 'strDesServicio' },
            { data: 'StrTipServ' },
            { data: 'StrTipMenu' },
            {
                sortable: false,
                "render": (data, type, item, meta) => {
                    //let intidServicio = item.intidServicio;
                    let intidServicio = item.strcoServicio; //modificado 02.03.2021 para borrar por codigo de servicio.
                    //ventana nuevo.
                  return `<button onclick='quitarFilaDeTablaServicio(this,"${intidServicio}")' class="btn btn-danger  btn-xs btn-delete" dataidServ="${intidServicio}" ><i class="fa fa-trash-o"></i> Quitar</button>  `;

                }
            }
            //,
            //{ data: 'intidServicio' }
        ],
        lengthMenu: [4, 25, 50],
        order: [],
        responsive: true,
        language: _datatableLanguaje,
        columnDefs: [//ocultar y definir columnas    
            {
                //targets: [5],
                //visible: false,//true //Inicio y Fin de código para solucionar observación 1.7  HG 24.02.2021
                //searchable: false
            }
        ],
        dom: 'lBfrtip',
    });


    //jueves25
    //$('#TablaDetServ_info').hide();
    //$('#TablaDetServ_filter').hide();
    //$('#TablaDetServ_length').hide();
    //$("#TablaDetServ tr:first").show();//Mostrar siempre  el primer row



    //var table5 = $('#TablaDetServ').DataTable();
    //    table5
    //        //.search(this.value)
    //        .draw();
   



    ////Prueba
    //var table = $('#TablaDetServ').DataTable();

    //table
    //    .column(5)
    //    .data()
    //    .each(function (value, index) {
    //        console.log('Data in index: ' + index + ' is: ' + value);//index=numero de fila
    //        alert(index + ' ' + value );
    //    });

}



$('#segundo_sitch_form').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021 
    var g = 0;

    $('#span_02').click(function () {
        g = 1;
    });

    if (g == 1) {
      
    }

    else {

        //Colorea de NEGRO: #34495E , el otro es VERDE: #1ABB9C //GreenYellow //PLOMO:#73879C
        //$('body').append('<style>.wizard_horizontal ul.wizard_steps li a.selected:before, .step_no {background-color:#1ABB9C;}</style>');

        $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.done:before, ' +
            '.wizard_horizontal ul.wizard_steps li a.done .step_no { ' +
            ' background: #1ABB9C; color: #fff; ' +
            ' }</style >'
        )

        TablaRegNegComServ();   //Sí está implementado ln_38220_js   
    }

    //$('body').append('<style>.wizard_horizontal ul.wizard_steps li a.selected:before, .step_no {background-color:#34495E;}</style>');

});


//===============================================================================================
//=============================== BOTON NUEVO Regla de Negocio ================================== Nuevo Regla de Negocio
$('#btn-new-ReglaNegocioCom').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021 

    //Limpiar tabla  SERVICIOS AGREGADOS y dibujar el html
    var tablaDetServ = $('#TablaDetServ').DataTable();

    tablaDetServ
        .clear()
        .draw();

    ////Limpiar tabla SUBSIDIOS AGREGADOS y dibujar el html
    //var tablaDetSub = $('#TablaDetReg').DataTable();
    //tablaDetSub
    //    .clear()
    //    .draw();

    var SesionMovi = {
        IntIdMenu: 'M0306',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/ObtenerRegistroReglaNedocioDetCom',
        { objSession: SesionMovi, intIdReglaNeg: 0 },
        (response) => {

            response.forEach(element => {

                if (element.strCoReglaDet == 'TIPPERIODO_CONSUMO') {
                    if (element.strValorRegla > 0) {
                        $('#TipControlConsumo').val(element.strPosibValor);
                    }
                }

                if (element.strCoReglaDet == 'NUMCONSUMO_MAXGENERAL') {

                    $('#txtCantConsumo').val(element.strPosibValor);
                }

                if (element.strCoReglaDet == 'TOLERANCIA_CONSUMO') {

                    $('#tiempo_tol').val(element.strPosibValor);
                }

                var ValorTipoSubs = '';
                if (element.strCoReglaDet == 'TIPO_SUBSIDIO_CONSUMO') {
                    $('#TipoSubs').val(element.strPosibValor);
                    if (element.strPosibValor > 0) {

                        $('#ConSubsi').iCheck('check');
                        ValorTipoSubs = element.strValorRegla;

                    } else {
                        $('#ConSubsi').iCheck('uncheck');
                    }
                }

                if ($('#ConSubsi').is(':checked') == true) {
                    $('#Subsidio').show();
                } else {
                    $('#Subsidio').hide();
                }
                if (element.strCoReglaDet == 'PORCENT_SUBSIDIO_CONSUMO') {

                    $('#pocent_general').val(element.strPosibValor);

                }

               
                //evaluar por strcotipo=strValor  asignar intitipo =strPosibValor
                if (ValorTipoSubs == '01') //01	GE	GENERAL	SUBSIDIO
                {
                    $('#PGeneral').show();
                    $('#PEmpresa').hide();
                }
                else if (ValorTipoSubs == '02') //02	ES	POR EMPRESA	SUBSIDIO
                {
                    $('#PEmpresa').show();
                    $('#PGeneral').hide();
                }
                else {
                    $('#PEmpresa').hide();
                    $('#PGeneral').hide();
                }

            });

            $('.form-hide-ReglaNegocio-Comedor').show();
        });

    //fin copia 25.02.2021 -Hebert


    //Puntualiza el form en el primer "a"
    $('#primer_sitch_form').click();
    $('.form-hide-ReglaNegocio-Comedor').hide();
    $('#cambio_estado').html('<label id="texto_activo_inactivo">Activo </label><input type="checkbox" class=" js-switch" id="chk-activo-RegNegCom" checked style="float:right;" />');
    $('#texto_activo_inactivo').css("color", "#949b9a ");

    switcheryLoad();

   //COLOR PLOMO
    $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.done:before, ' +
        '.wizard_horizontal ul.wizard_steps li a.done .step_no { ' +
        ' background: #73879C; color: #fff; ' +
        ' }</style >'

    )


    CamposAdicionalesReglaNegocio();

    $('#notifry_error').val('');
    $('#notifry_errordes').val('');
    $('#btn-update-ReglaNegocioCom').hide();
    $('#btn-save-change-ReglaNegocioCom').show();
    $('#txt_cod_RegNegCom').val('');
    $('#txt_desc_RegNegCom').val('');
    detalleSubs.splice(0, detalleSubs.length);
    detalleServ.splice(0, detalleServ.length);
    detalleServ = [];

    var d = new Date();
    var n = d.getTime();


    //Reubicado HG 25.02.21
    $('#ConSubsi').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021
        if ($('#ConSubsi').is(':checked') == true) {

            $('#Subsidio').show();

        } else if ($('#ConSubsi').is(':checked') == false) {

            $('#Subsidio').hide();

        }

    });

    $('#TipoSubs').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021
        if ($('#TipoSubs').val() == 127) { //GENERAL

            $('#PGeneral').show();
            $('#PEmpresa').hide();
            $("#porcentaje_general").show();

        }
        else if ($('#TipoSubs').val() == 128) {//POR EMPRESA           

            $('#PEmpresa').show();
            $('#PGeneral').hide();
            $("#porcentaje_general").hide(); //Esconde el input porcentaje 

        }
        else if ($('#TipoSubs').val() == 0) {

            $('#PEmpresa').hide();
            $('#PGeneral').hide();

        }
    });


    /*-------------------------------- ini comentado 25.02.21 ln_35611 --------------------------------
    $('#IdEmp').val(127);
    $('#PEmpresa').hide(); //Inicio Fin de código para solucionar observación 1.16  HG 25.02.2021
    //$("#porcentaje_general").show();//comentado ES 25.02.2021
    -------------------------------- fin comentado 25.02.21 ln_35611 --------------------------------*/

    //Constructor - Regla de Negocio - BOTON NUEVO
    class TGREGLANEG_SUBSIDIO_DET {
        constructor(IntIdReglaNeg, IntIdEmp, nmPorcentaje, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif, intidtipoMenu, clave) {

            this.IntIdReglaNeg = IntIdReglaNeg
            this.IntIdEmp = IntIdEmp
            this.nmPorcentaje = nmPorcentaje
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.dttFeModif = dttFeModif
            this.intidtipoMenu = intidtipoMenu
            this.clave = n
        }
    }

    //============================
    detalleSubs = [];
    ListasDeReglas = [];
    ListasDeSubs = [];
    ListasDeServ = [];

    //TablarReglaNeg();//martes23 HG.23.02 Comentado
    //TablarReglaNegCom();//martes23 HG.23.02 Comentado
    //TablaRegNegComServ();//martes23 HG.23.02 Comentado

    //TablarReglaNegServDet();
    ////CombosReglaDeNegociocOM();
    ////init_SmartWizard_RegNegCom();

    $.post(
        '/Proceso/MaestroMaxCaracteres',
        { StrNomMan: 'TGREGLANEG' },
        (response) => {
            response.forEach(element => {

                if (element.NombreColum == 'strCoRegNeg') {
                    $('#' + element.NombreColum + '').empty();
                    $('#' + element.NombreColum + '').append('<label>Código (*)</label><input type = "text" class= "form-control" id = "txt_cod_RegNegCom" placeholder = "Código" maxlength="' + element.intNumero + '" onkeypress="validarCampoCodigo(event)" ><div id="notifry_error" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                    //$('#' + element.NombreColum + '').append('<label>Código (*)</label><input type = "text" class= "form-control" id = "txt_cod_RegNegCom" placeholder = "Código" maxlength="' + element.intNumero + '" onkeypress = "return avoidSpaceInput(event)" onkeyup="this.value=caracteresValidosConEspacios(this.value)" ><div id="notifry_error" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                } else if (element.NombreColum == 'strDesRegNeg') {
                    $('#' + element.NombreColum + '').empty();

                    $('#' + element.NombreColum + '').append('<label>Descripción (*)</label><input type = "text" class= "form-control" id = "txt_desc_RegNegCom" placeholder = "Descripción" maxlength="' + element.intNumero + '"  onkeyup="this.value=caracteresValidosConEspacios(this.value)"><div id="notifry_errordes" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                }

            });

        });


         TablarReglaNegComSub();

    $('#TipMenuRN').on('change', function () {

         TablaRegNegComServ()

    });

    $('#TipServicioRN').on('change', function () {

         TablaRegNegComServ()

    });

    $('#filtro2').keyup(function () {

         TablarReglaNegComSub();

    });


    $('.form-hide-ReglaNegocio-Comedor').show(40);

});



//01 - Caracterwes Validos en campo descripción - Mantenimientos: Servicio, Regla de Negocio  HG 12.04.21
function caracteresValidosConEspacios(string) {
    var out = '';
    var filtro = 'áéíóúabcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMNÑOPQRSTUVWXYZ1234567890-_ ';//Caracteres validos

    for (var i = 0; i < string.length; i++)
        if (filtro.indexOf(string.charAt(i)) != -1)
            out += string.charAt(i);
    return out;
}

//02 - Caracteres Validos sin espacios
function caracteres_sin_espacios_blanco(string) {
    var out = '';
    var filtro = 'abcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMNÑOPQRSTUVWXYZ1234567890&-';

    for (var i = 0; i < string.length; i++)
        if (filtro.indexOf(string.charAt(i)) != -1)
            out += string.charAt(i);
    return out;
}

//03 - Usarlo en el campo como:  onkeypress="validarCampoCodigo(event)"
function validarCampoCodigo(evt) {

    var theEvent = evt || window.event;

    // Handle paste
    if (theEvent.type === 'paste') {
        key = event.clipboardData.getData('text/plain');
    } else {
        // Handle key press
        var key = theEvent.keyCode || theEvent.which;
        key = String.fromCharCode(key);
    }
    var regex = /[0-9]|[a-z]|[A-Z]|\-|\_/;
    if (!regex.test(key)) {
        theEvent.returnValue = false;
        if (theEvent.preventDefault) theEvent.preventDefault();
    }

}



//===============================================================================================
//============================== BOTON AGREGAR SUBSIDIO ========================================= Nuevo Regla de Negocio
$('#Reg_Subs').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var _Empresa = $('#IdEmp').val();
    var _Empresa_txt = $('#IdEmp option:selected').text();
    var _TipoMen = $('#TipoMen').val();
    var _TipoMen_txt = $('#TipoMen option:selected').text();
    var _Servic = $('#TipServiciosRNC').val();
    var _Servic_txt = $('#TipServiciosRNC option:selected').text();

    var _Porcen = $('#txtPorce').val();

    if (_Porcen === '') {

        new PNotify({
            title: 'Agregar Subsidios por Empresa',
            text: 'Tiene que Asignar un Porcentaje de Subsidio',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        return;
    }

    else if (_Empresa == 0 && _Servic == 0 && _TipoMen == 0) {

             new PNotify({
                 title: 'Agregar Subsidios por Empresa',
                 text:  'Debe seleccionar una Empresa ó un Tipo de Servicio ó un Tipo de Menú',
                 type:  'info',
                 delay: 3000,
                 styling: 'bootstrap3',
                 addclass: 'dark'
             });
            
             return;
    }


    //Probar los Casos Posibles, Antes de darle click a AGREGAR
    else if (_Empresa > 0 || _Servic > 0 ||  _TipoMen > 0 ){

        //CASO 01
        if (_Empresa == 0 && _Servic == 0 && _TipoMen > 0) {

            //agregar
        
            //alert('1) Empresa [Todos] + Tipo Servicio [Todos]+ Tipo de Menú [1 seleccionado]');
            
        }
        
        //CASO 02
        else if (_Empresa == 0  && _Servic > 0 && _TipoMen == 0) {
        
            //alert('2) Empresa [Todos] + Tipo Servicio [1 seleccionado]+ Tipo de Menú [Todos] '); 
        
        }

        //CASO 03
        else if (_Empresa == 0 && _Servic > 0 && _TipoMen > 0) {

            //alert('3) Empresa [Todos] + Tipo Servicio [1 seleccionado]+ Tipo de Menú [1 seleccionado]'); 

        }


    //CASO 04, 05, 06 , 07
    else if (_Empresa > 0 ) {


        if (_Servic == 0) {

            //CASO 04
            if (_TipoMen == 0) {

                //alert('4) Empresa [1 Seleccionado] + Tipo Servicio [Todos]+ Tipo de Menú [Todos] ');

            }

            //CASO 05
            else if (_TipoMen > 0) {

                //alert('5) Empresa [1 Seleccionado] + Tipo Servicio [Todos]+ Tipo de Menú [1 seleccionado] ');

            }

        }

        else if (_Servic > 0) {


            //CASO 06
            if (_TipoMen == 0) {

                //alert('6) Empresa [1 Seleccionado] + Tipo Servicio [1 seleccionado]+ Tipo de Menú [Todos]'); 

            }

            //CASO 07
            else  if (_TipoMen > 0) {

                //alert('7) Empresa [1 Seleccionado] + Tipo Servicio [1 seleccionado]+ Tipo de Menú [1 seleccionado]'); 

            }

        }


    }

   }//FIN DEL ELSE
    

    //console.log();
    var d = new Date();
    var n = d.getTime();
  
    //CONSTUCTOR - AGREGAR SUBSIDIO - FORMULARIO NUEVO
    class TGREGLANEG_SUBSIDIO_DET {
        constructor(
            IntIdReglaNeg,
            IntIdEmp,
            nmPorcentaje,
            bitFlEliminado,
            intIdUsuarReg,
            dttFeReg,
            intIdUsuarModif,
            dttFeModif,
            intidtipoMenu,
            clave
        ) {
            this.IntIdReglaNeg = IntIdReglaNeg
            this.IntIdEmp = IntIdEmp
            this.nmPorcentaje = nmPorcentaje
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.intIdTipServ = intIdUsuarModif    //ID TIPO DE SERVICIO      HG 16.03.21
            this.strDescServi = dttFeModif         //TEXTO TIPO DE SERVICIO   HG 16.03.21
            this.intidtipoMenu = intidtipoMenu
            this.clave = n

        }
    }

    //Validamos para que se repita el mismo Subsidio - FORMULARIO NUEVO - Regla de Negocio HG 16.03.21
    for (var i = 0; i < detalleSubs.length; i++) {

        if (detalleSubs[i].IntIdEmp == _Empresa_txt && detalleSubs[i].strDescServi == _Servic_txt && detalleSubs[i].intidtipoMenu == _TipoMen_txt) {

            new PNotify({
                title: 'Agregar Subsidios por Empresa',
                text: 'El Subsidio para :' + '' + _Empresa_txt + '|| ' + _Servic_txt + '|| ' + _TipoMen_txt + '' + ' ya fue agregado',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            return;
        }      

    }

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGEMPRESA', intIdFiltroGrupo: 0, strGrupo: 'TGEMPRESA', strSubGrupo: 'RN' },
        (response) => {
            response.forEach(element => {

                //EL TEXTO DE LA EMPRESA
                if (_Empresa == element.intidTipo) {
                    var _EmpresaDes = element.strDeTipo;

                    var _TipoDeServicio = 
                    //tipo de servicio
                    //tipo de menu

                    $.post(
                        '/Asistencia/LlenarTipoUM',
                        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'RN', strSubGrupo: 'TIPOMENU' }, // HG 13.03.21 - Regla de Negocio
                        (response) => {

                           response.forEach(element2 => {

                                if (_TipoMen == element2.intidTipo) {

                                    var _TipoMenDes = element2.strDeTipo;

                                    detalleSubs.push(new TGREGLANEG_SUBSIDIO_DET(_Empresa, _EmpresaDes, _Porcen, 0, _TipoMen, d, _Servic , _Servic_txt, _TipoMenDes, n));// d, _Servic_txt, d, _TipoMenDes, n));

                                    TablarReglaNegComSub();

                                }

                            });


                            $('#IdEmp').val(0);
                            $('#TipoMen').val(0);
                            $('#TipServiciosRNC').val(0);
                            $('#txtPorce').val('');

                        });

                }



            });

        });


});


//===============================================================================================
//============================== BOTON GUARDAR Regla de Negocio ================================= bgrnec Guardar Regla de Negocio
$('#btn-save-change-ReglaNegocioCom').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021 
    //Datos Cabecera
    var chckactivo = null;
    if ($('#chk-activo-RegNegCom').is(':checked') == false) {
        chckactivo = 0;
    } if ($('#chk-activo-RegNegCom').is(':checked') == true) {
        chckactivo = 1;
    }

    var _UnidadOrg = 0 // 0;
    var _Codigo = $('#txt_cod_RegNegCom').val();
    var _Descripcion = $('#txt_desc_RegNegCom').val();
    var _strRegNegCampo1 = null;
    var _strRegNegCampo2 = null;
    var _strRegNegCampo3 = null;
    var _strRegNegCampo4 = null;
    var _strRegNegCampo5 = null;


    //HG 0.03.21 lunes01
    if ($('#ConSubsi').is(':checked') == true) {

        if ($('#TipoSubs').val() == 0) {
            new PNotify({
                title: 'Nueva Regla de Negocio',
                text: 'Seleccione un Tipo de Subsidio',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            return;
        }

    }


    //HG 0.03.21 lunes01
    if ($('#TipControlConsumo').val() == 2) {

        new PNotify({
            title: 'Nueva Regla de Negocio',
            text: 'Seleccione un Tipo de Control de Consumo',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        return;

    }


    //Constructor Regla de Negocio - BOTON GUARDAR
    class TGREGNEG_DET {

        constructor(intIdRegNegDet, intIdReglaNeg, strCoReglaDet, strDesReglaDet, strValorRegla, strPosibValor, bitFlActivo) {

            this.intIdRegNegDet = intIdRegNegDet
            this.intIdReglaNeg = intIdReglaNeg
            this.strCoReglaDet = strCoReglaDet
            this.strDesReglaDet = strDesReglaDet
            this.strValorRegla = strValorRegla
            this.strPosibValor = strPosibValor
            this.bitFlActivo = bitFlActivo


        }
    }

    var ListasDeReglas = new Array();
    var ListasDeSubsi = new Array();
    var ListasDeServ = new Array();

    //Datos Servicio 1.1
    var _tipConsu = $('#TipControlConsumo').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPPERIODO_CONSUMO', null, _tipConsu, _tipConsu, true));

    var _cantconsu = $('#txtCantConsumo').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'NUMCONSUMO_MAXGENERAL', null, _cantconsu, _cantconsu, true));

    var _tiemptol1 = $('#tiempo_tol').val();//strPosibValor  "00:07"
    var _tiemptol2 = _tiemptol1; 

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TOLERANCIA_CONSUMO', null, _tiemptol2, _tiemptol1, true));

    //Inicio de código para solucionar observación 1.10  HG 25.02.2021
    var TipoSubs = $('#TipoSubs').val();

    if ($('#ConSubsi').is(':checked') == true) {

        TipoSubs = TipoSubs;
    }

    else {

        TipoSubs = 0 ;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPO_SUBSIDIO_CONSUMO', null, TipoSubs, TipoSubs, true));
    //Fin de código para solucionar observación 1.10  HG 25.02.2021

    var porcent_G = $('#pocent_general').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PORCENT_SUBSIDIO_CONSUMO', null, porcent_G, porcent_G, true));

    n = new Date();
    //Año
    y = n.getFullYear();
    //Mes
    m = n.getMonth() + 1;
    //Día
    d = n.getDate();

    //Lo ordenas a gusto.
    var DiadeHoy = y + "/" + m + "/" + d;


    //Constructor - Regla de Negocio - BOTON GUARDAR
    class TGREGLANEG_SUBSIDIO_DET {
        constructor(

            IntIdReglaNegSubsDet,  //                  IntIdReglaNegSubsDet] [int]
            IntIdReglaNeg,         //IntIdReglaNeg,    IntIdReglaNeg       ] [int] NULL,
            IntIdEmp,              //IntIdEmp,         IntIdEmp            ] [int] NULL,
            nmPorcentaje,          //nmPorcentaje,     nmPorcentaje        ] [decimal](18,
            intidtipoMenu,         //bitFlEliminado,   intidtipoMenu       ] [int] NULL,
            bitFlEliminado,        //intIdUsuarReg,    bitFlEliminado      ] [bit] NULL,
            intIdUsuarReg,         //dttFeReg,         intIdUsuarReg       ] [int] NULL,
            dttFeReg,              //intIdUsuarModif,  dttFeReg            ] [datetime] NULL,
            intIdUsuarModif,       //dttFeModif,       intIdUsuarModif     ] [int] NULL ---------- Se utilizará este campo para llegar a la tabla Typo
            dttFeModif             //intidtipoMenu,    dttFeModif          ] [datetime] NULL
         )                         //clave

         {
            this.IntIdReglaNegSubsDet = IntIdReglaNegSubsDet
            this.IntIdReglaNeg        = IntIdReglaNeg
            this.IntIdEmp             = IntIdEmp
            this.nmPorcentaje         = nmPorcentaje
            this.intidtipoMenu        = intidtipoMenu
            this.bitFlEliminado       = bitFlEliminado
            this.intIdUsuarReg        = intIdUsuarReg
            this.dttFeReg             = dttFeReg
            this.intIdUsuarModif      = intIdUsuarModif
            this.dttFeModif           = dttFeModif

        }
    }

    for (var i = 0; i < detalleSubs.length; i++) { 

        var intidEmp  = detalleSubs[i].IntIdReglaNeg;
        var Porcent   = detalleSubs[i].nmPorcentaje;
        var _TipoMen  = detalleSubs[i].intIdUsuarReg;
        var _TipoServ = detalleSubs[i].intIdTipServ; //  this.intIdTipServ   = intIdUsuarModif

        ListasDeSubsi.push(new TGREGLANEG_SUBSIDIO_DET(0, 0, intidEmp, Porcent, _TipoMen, 0, idUsuar, DiadeHoy, _TipoServ, null));

    }
    
    //console.log(ListasDeSubsi);

    //Constructor 03 - Regla de Negocio - BOTON GUARDAR
    class TGREGLANEG_SERV_DET {

        constructor(IntIdReglaNeg, intIdServicio, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif) {

            this.IntIdReglaNeg = IntIdReglaNeg
            this.intIdServicio = intIdServicio
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.intIdUsuarModif = intIdUsuarModif
            this.dttFeModif = dttFeModif
        }
    }
    for (var i = 0; i < detalleServ.length; i++) {
        var idServ = detalleServ[i].intidServicio;
        ListasDeServ.push(new TGREGLANEG_SERV_DET(0, idServ, 0, idUsuar, n, null, null));//71,0,0,1,NULL,NULL,NULL

            }
     

    //Validar CAMPOS EN BLACO
    if (_Codigo === '' || _Descripcion === '' || _tipConsu === '' || _cantconsu === '') {

        new PNotify({
            title: 'Nueva Regla de Negocio',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        //Manda de regreso al primer form(#primer_sitch_form)
        $('#primer_sitch_form').click(); //Intercambiar Forms Comedor(#primer_sitch_form)/Servicio(#segundo_sitch_form)
        //Colorea de NEGRO: #34495E , el otro es VERDE: #1ABB9C //GreenYellow //PLOMO:#73879C
        $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.selected:before, .step_no {background-color:#34495E ;}</style>');
        return;
    }


    if (detalleServ.length == 0) {
    //if ($('#TablaDetServ tr').length == 0) { //Si tabla servicios añadidos esta vacio     
        $('#segundo_sitch_form').click();  // Envíase y habilitese el segundo form

        new PNotify({
            title: 'Nueva Regla de Negocio',
            text: 'Añadir al menos un Servicio',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if ($('#TipoSubs').val() == 128 && detalleSubs.length == 0) {
        new PNotify({
            title: 'Agregar Subsidios por Empresa',
            text: 'Añadir al menos un Subsidio',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    var ReglaNegocio = {
        strCoRegNeg: _Codigo,
        strDesRegNeg: _Descripcion,
        IntIdUniOrg: _UnidadOrg,
        bitFlInterna: 0,
        strRegNegCampo1: _strRegNegCampo1,
        strRegNegCampo2: _strRegNegCampo2,
        strRegNegCampo3: _strRegNegCampo3,
        strRegNegCampo4: _strRegNegCampo4,
        strRegNegCampo5: _strRegNegCampo5,
        bitFlActivo: chckactivo
    }

    var SesionMovi = {
        IntIdMenu: 'M0306',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }


   // ListasDeServ.splice(0, 1);
    console.log(ListasDeSubsi);
 
    $.post(
        '/Asistencia/IUReglaCom',
        { intTipoOperacion: 1, objSession: SesionMovi, ObjReglaNeg: ReglaNegocio, listaReglaNegDet: ListasDeReglas, listaDetSubsi: ListasDeSubsi, listaDetServ: ListasDeServ },
        (response) => {
            console.log(response);
            if (response.type !== ''){
                if (response.type === 'success'){
                    new PNotify({
                        title: 'Registro de Nueva Regla de Negocio',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    TablarReglaNegCom();
                    $('.form-hide-ReglaNegocio-Comedor').hide();
                    $('#txtCantConsumo').val('');
                    return;
                }
                else{
                    if(response.type === 'info') {
                        var nomMantemiento = 'Regla de Negocio';
                        var campo = 'txt_cod_RegNegCom';//HGM Añadido 12.04.21 //txt_codigo_RN
                        //Prueba
                        //var msj='El Codigo ya existe';
                        var msj = response.message;
                        var response = response.type;
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }
                    else {
                        if (response.type === 'error') {
                            var nomMantemiento = 'Regla de Negocio';
                            var campo = 'txt_desc_RegNegCom';//HGM Añadido 12.04.2 //txt_descripcion_RN';
                            var msj = response.message;
                            var response = 'info';
                            var deta = 'notifry_errordes';
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                        }
                        else {
                            if (response.type === 'alert') {
                                var nomMantemiento = 'Regla de Negocio';
                                var campo = 'txt_codPla_Var';
                                var msj = response.message;
                                var response = 'info';
                                var deta = 'notifry_errorpla';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                                return;
                            }
                            else if (response.type === 'externo') {
                                var nomMantemiento = 'Jornada';
                                var campo = 'txt_codExte_Var';
                                var msj = response.message;
                                var response = 'info';
                                var deta = 'notifry_errorext';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                                return;
                            } else if (response.type === 'errorInt') {
                                new PNotify({
                                    title: 'Nueva Regla de Negocio',
                                    text: 'Ocurrió un Error y el registro no se grabó.',
                                    type: 'info',
                                    delay: 3000,
                                    styling: 'bootstrap3',
                                    addclass: 'dark'
                                });
                                $('#notifry_error').html('');
                                $('#notifry_errordes').html('');

                                return;
                            } else {
                                new PNotify({
                                    title: 'Nueva Regla de Negocio',
                                    text: message,//'El Regisro fue insertado correctamente',
                                    type: 'info',
                                    delay: 6000,
                                    styling: 'bootstrap3',
                                    addclass: 'blue'
                                });
                                $('#notifry_error').html('');
                                $('#notifry_errordes').html('');
                                return;
                            }
                        }
                    }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});


//===============================================================================================
//============================== BOTON CANCELAR Regla de Negocio ================================ Cancelar Regla de Negocio
$('#btn-cancel-ReglaNegocioCom').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021 
    $('.form-hide-ReglaNegocio-Comedor').hide();
});


//===============================================================================================
//============================== BOTON ACTUALIZAR Regla de Negocio ============================== Actualizar Regla de Negocio
$('#btn-update-ReglaNegocioCom').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021

    var ListasDeReglas = new Array();
    var ListasDeSubsi = new Array();
    var ListasDeServ = new Array();

    $('#span_02').click();//Se debe mostrar las tablas
    //$('#segundo_sitch_form').click();

    //Datos Cabecera
    var chckactivo = true;
    if ($('#chk-activo-RegNegCom').is(':checked') == false) {

        chckactivo = false;

    }

    if ($('#chk-activo-RegNegCom').is(':checked') == true) {

        chckactivo = true;

    }

    var _UnidadOrg = 0;
    var _Codigo = $('#txt_cod_RegNegCom').val();
    var _Descripcion = $('#txt_desc_RegNegCom').val();
    var _strRegNegCampo1 = null;
    var _strRegNegCampo2 = null;
    var _strRegNegCampo3 = null;
    var _strRegNegCampo4 = null;
    var _strRegNegCampo5 = null;
    var _IdRegla = $('#IdRegNegCom').val();


    //HG 0.03.21 lunes01
    if ($('#ConSubsi').is(':checked') == true) {       

            if ($('#TipoSubs').val() == 0) {
            new PNotify({
                title: 'Nueva Regla de Negocio',
                text: 'Seleccione un Tipo de Subsidio',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            return;
        }

    }


    //HG 0.03.21 lunes01
    if ($('#TipControlConsumo').val() == 2 ) {       

            new PNotify({
                title: 'Nueva Regla de Negocio',
                text: 'Seleccione un Tipo de Control de Consumo',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            return;
       
    }


    //HG 0.03.21 lunes01
    if ($('#ConSubsi').is(':checked') == false) {

        ListasDeSubsi = [];

    }
    
    if (detalleServ.length == 0) {
     
        $('#segundo_sitch_form').click();  // Envíase y habilitese el segundo form

        new PNotify({
            title: 'Nueva Regla de Negocio',
            text: 'Añadir al menos un Servicio',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }


    if ( $('#TipoSubs').val() == 128 && detalleSubs.length == 0) {

        //$('#segundo_sitch_form').click();  // Envíase y habilitese el segundo form

        new PNotify({
            title: 'Agregar Subsidios por Empresa',
            text: 'Añadir al menos un Subsidio',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    //Constructor - BOTON ACTUALIZAR 
    class TGREGNEG_DET {

        constructor(intIdRegNegDet, intIdReglaNeg, strCoReglaDet, strDesReglaDet, strValorRegla, strPosibValor, bitFlActivo) {

            this.intIdRegNegDet = intIdRegNegDet
            this.intIdReglaNeg = intIdReglaNeg
            this.strCoReglaDet = strCoReglaDet
            this.strDesReglaDet = strDesReglaDet
            this.strValorRegla = strValorRegla
            this.strPosibValor = strPosibValor
            this.bitFlActivo = bitFlActivo


        }
    }
    

    //Datos Servicio 1.1
    var _tipConsu = $('#TipControlConsumo').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPPERIODO_CONSUMO', null, _tipConsu, _tipConsu, true));

    var _cantconsu = $('#txtCantConsumo').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'NUMCONSUMO_MAXGENERAL', null, _cantconsu, _cantconsu, true));

    //Inicio de código para solucionar observación 1.9 HG 25.02.2021 
    var _tiemptol1 = $('#tiempo_tol').val();//strPosibValor  "00:07"
    var _tiemptol2 = _tiemptol1;
    //Fin de código para solucionar observación 1.9 HG 25.02.2021

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TOLERANCIA_CONSUMO', null, _tiemptol2, _tiemptol1, true));

    //Inicio de código para solucionar observación 1.10  HG 25.02.2021
    var TipoSubs = $('#TipoSubs').val();

    if ($('#ConSubsi').is(':checked') == true) {

        TipoSubs = TipoSubs;
    }

    else {

        TipoSubs = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPO_SUBSIDIO_CONSUMO', null, TipoSubs, TipoSubs, true));
    //Fin de código para solucionar observación 1.10  HG 25.02.2021

    var porcent_G = $('#pocent_general').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PORCENT_SUBSIDIO_CONSUMO', null, porcent_G, porcent_G, true));

    n = new Date();
    //Año
    y = n.getFullYear();
    //Mes
    m = n.getMonth() + 1;
    //Día
    d = n.getDate();

    //Lo ordenas a gusto.
    var DiadeHoy = y + "/" + m + "/" + d;

  
    //Constructor - Regla de Negocio - BOTON ACTUALIZAR
    class TGREGLANEG_SUBSIDIO_DET1 {
        constructor(

            IntIdReglaNegSubsDet,  //IntIdReglaNegSubsDet] [int]
            IntIdReglaNeg,         //IntIdReglaNeg       ] [int] NULL,
            IntIdEmp,              //IntIdEmp            ] [int] NULL,
            nmPorcentaje,          //nmPorcentaje        ] [decimal](18,
            intidtipoMenu,         //intidtipoMenu       ] [int] NULL,
            bitFlEliminado,        //bitFlEliminado      ] [bit] NULL,
            intIdUsuarReg,         //intIdUsuarReg       ] [int] NULL,
            dttFeReg,              //dttFeReg            ] [datetime] NULL,
            intIdUsuarModif,       //intIdUsuarModif     ] [int] NULL ---------- Se utilizará este campo para llegar a la tabla Typo
            dttFeModif             //dttFeModif          ] [datetime] NULL
         )                         

         {
            this.IntIdReglaNegSubsDet = IntIdReglaNegSubsDet //1
            this.IntIdReglaNeg        = IntIdReglaNeg        //2
            this.IntIdEmp             = IntIdEmp             //3
            this.nmPorcentaje         = nmPorcentaje         //4
            this.intidtipoMenu        = intidtipoMenu        //5
            this.bitFlEliminado       = bitFlEliminado       //6
            this.intIdUsuarReg        = intIdUsuarReg        //7
            this.dttFeReg             = dttFeReg             //8 
            this.intIdUsuarModif      = intIdUsuarModif      //9 --Campo utilizado como "Tipo de Servicio"
            this.dttFeModif           = dttFeModif           //10

        }
    }

    for (var i = 0; i < detalleSubs.length; i++) { //martes16

        var intidEmp  = detalleSubs[i].IntIdReglaNeg;
        var Porcent   = detalleSubs[i].nmPorcentaje;
        var _TipoMen  = detalleSubs[i].intIdUsuarReg;
        var _TipoServ = detalleSubs[i].intIdTipServ; //  this.intIdTipServ   = intIdUsuarModif

        ListasDeSubsi.push(new TGREGLANEG_SUBSIDIO_DET1(0, 0, intidEmp, Porcent, _TipoMen, 0, idUsuar, DiadeHoy, _TipoServ, null));

    }


    //---------------------------------------------------------------------------------------------------------
    //class TGREGLANEG_SUBSIDIO_DET {
    //    constructor(IntIdReglaNegSubsDet, IntIdReglaNeg, IntIdEmp, nmPorcentaje,
    //        intidtipoMenu, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif) {
    //        this.IntIdReglaNegSubsDet = IntIdReglaNegSubsDet 
    //        this.IntIdReglaNeg = IntIdReglaNeg
    //        this.IntIdEmp = IntIdEmp
    //        this.nmPorcentaje = nmPorcentaje
    //        this.intidtipoMenu = intidtipoMenu
    //        this.bitFlEliminado = bitFlEliminado
    //        this.intIdUsuarReg = intIdUsuarReg
    //        this.dttFeReg = dttFeReg
    //        this.intIdUsuarModif = intIdUsuarModif
    //        this.dttFeModif = dttFeModif
    //    }
    //}
    //for (var i = 0; i < detalleSubs.length; i++) {
    //    var intidEmp = detalleSubs[i].IntIdReglaNeg;
    //    var Porcent = detalleSubs[i].nmPorcentaje;
    //    var _TipoMen = detalleSubs[i].intIdUsuarReg;
    //    ListasDeSubsi.push(new TGREGLANEG_SUBSIDIO_DET(0, 0, intidEmp, Porcent, _TipoMen, 0, idUsuar, DiadeHoy, null, null));
    //}
    //---------------------------------------------------------------------------------------------------------


    //SERVICIOS AÑADIDOS
    class TGREGLANEG_SERV_DET {

        constructor(IntIdReglaNeg, intIdServicio, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif) {

            this.IntIdReglaNeg = IntIdReglaNeg
            this.intIdServicio = intIdServicio
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.intIdUsuarModif = intIdUsuarModif
            this.dttFeModif = dttFeModif
        }
    }
    for (var i = 0; i < detalleServ.length; i++) {
        var idServ = detalleServ[i].intidServicio;
        ListasDeServ.push(new TGREGLANEG_SERV_DET(0, idServ, 0, idUsuar, n, null, null));

    }


    ///Validar CAMPOS EN Blanco
    if (_Codigo === '' || _Descripcion === '' || _tipConsu === '' || _cantconsu === '') {

        new PNotify({
            title: 'Nueva Regla de Negocio',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    //OBJETO REGLA - BOTON NUEVO 
    var ReglaNegocio = {

        strCoRegNeg: _Codigo,
        strDesRegNeg: _Descripcion,
        IntIdUniOrg: _UnidadOrg,
        bitFlInterna: 0,
        strRegNegCampo1: _strRegNegCampo1,
        strRegNegCampo2: _strRegNegCampo2,
        strRegNegCampo3: _strRegNegCampo3,
        strRegNegCampo4: _strRegNegCampo4,
        strRegNegCampo5: _strRegNegCampo5,
        bitFlActivo: chckactivo,
        intIdReglaNeg: _IdRegla
    }

    var SesionMovi = {
        IntIdMenu: 'M0306',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }


    $.post(
        '/Asistencia/IUReglaCom',
        { intTipoOperacion: 2, objSession: SesionMovi, ObjReglaNeg: ReglaNegocio, listaReglaNegDet: ListasDeReglas, listaDetSubsi: ListasDeSubsi, listaDetServ: ListasDeServ },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Actualizar Regla de Negocio',
                        text: 'El Registro se Actualizó Correctamente', // response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });
                    TablarReglaNegCom();
                    $('.form-hide-ReglaNegocio-Comedor').hide();

                    //Añadido HG 02.03.21 07:55AM
                    detalleServ = [];
                    detalleSubs = [];

                }

                else {

                    if (response.type === 'info') {
                        var nomMantemiento = 'Regla de Negocio';
                        var campo = 'txt_codigo_RN';
                        var msj = response.message;
                        var response = response.type;
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;

                    }

                    else {

                        if (response.type === 'error') {

                            var nomMantemiento = 'Regla de Negocio';
                            var campo = 'txt_descripcion_RN';
                            var msj = response.message;
                            var response = 'info';
                            var deta = 'notifry_errordes';
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);

                            return;
                        }

                        else {
                            if (response.type === 'alert') {

                                var nomMantemiento = 'Regla de Negocio';
                                var campo = 'txt_codPla_Var';
                                var msj = response.message;
                                var response = 'info';
                                var deta = 'notifry_errorpla';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                                return;

                            }

                            else if (response.type === 'externo') {

                                var nomMantemiento = 'Jornada';
                                var campo = 'txt_codExte_Var';
                                var msj = response.message;
                                var response = 'info';
                                var deta = 'notifry_errorext';
                                INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            }

                            else {

                                new PNotify({
                                    title: 'Actualizar Regla de Negocio',
                                    text: 'El Registro se Actualizó Correctamente', // response.message,
                                    type: response.type,
                                    delay: 3000,
                                    styling: 'bootstrap3'
                                });
                                TablarReglaNegCom();
                                $('.form-hide-ReglaNegocio-Comedor').hide();

                            }
                        }

                    }
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});

function init_SmartWizard_RegNegCom() {

    if (typeof ($.fn.smartWizard) === 'undefined') { return; }
    //console.log('init_SmartWizard_RegNegCom');

    $('#wizardCom').smartWizard({
        selected: 0,
        enableFinishButton: true,
        enableAllSteps: true
    });

    $('#wizard_verticle').smartWizard({
        transitionEffect: 'slide'
    });

    $('.buttonNext').hide();//.addClass('btn btn-success');
    $('.buttonPrevious').hide();//.addClass('btn btn-primary');
    $('.buttonFinish').hide();//.addClass('btn btn-default');

};

/********************** Fin de Mantenimiento Regla de Negocio *****************//*Ln_39862*/












/*************************************************/
/******** Mantenimiento Toma de Consumos *********/
/*************************************************/
/*
 ===============================================================================================
 =============================== MANTENIMIENTO TOMA DE CONSUMO =================================mtcon
 ===============================================================================================
*/


var CantTotalSC; var TotalSC; var CantTotalS; var TotalS; var Confi; //Variables de Carrito de Compras

function traerComboMarcadorDeTipoDni() {
    validarSession()//AÑADIDO 07.04.2021
    $.post( //traer el ID(PK) del Marcador llamado DNI -->Usar al momento de grabar el consumo.
        '/Personal/ListarCombos',
        {
            intIdMenu : 0,
            strEntidad: 'TGMARCADOR',
            intIdFiltroGrupo: 0, // intIdUniOrg,
            strGrupo : 'INTERNO',
            strSubGrupo: 'DNI',
        },
        response => {
            $('#txt_NumeroDeMarcadorDeTipoDni').empty();
            $('#int_NumeroDeMarcadorDeTipoDni').empty();
            response.forEach(element => {
                $('#txt_NumeroDeMarcadorDeTipoDni').append(element.strDeTipo);
                $('#int_NumeroDeMarcadorDeTipoDni').append(element.intidTipo);
            })
        })

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post( //traer el ID(PK) del Marcador llamado DNI -->Usar al momento de grabar el consumo.
        '/Personal/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_TEMPORIZADOR_TOMACONSUMO',
        },
        response => {
            Confi = response.strValorConfi;
            //RESULTADO: El valor está expresado en Si=1 y No=0.
        })

    CantTotalSC = 0; TotalSC = 0; CantTotalS = 0; TotalS = 0;
}


//===============================================================================================
//================================ MODAL MARCADOR ===============================================
//===============================================================================================

var NumeroMarcadorVisor; // 07.04.2021 variable global
function modalIngreseMarcador() {
    validarSession();//AÑADIDO 07.04.2021
    $.post(
        '/LoginSiscop/getNumMarcadorTomaConsumo',
        {},
        (response) => {
            console.log(response);
            NumeroMarcadorVisor = response;

            if (parseInt(NumeroMarcadorVisor) === 0) {//añadido 07/04/2021
                $('#seleccioneUnMarcador').empty();
                $('#seleccioneUnMarcador').append('Tiene que Seleccionar un Marcador');
                modal.style.display = "block";
            } else {
                modal.style.display = "none";
                NewValidaPreModal(NumeroMarcadorVisor);
            }
        });
    // Get the modal
    var modal = document.getElementById("myModal");
    // Get the button that opens the modal
    var btn = document.getElementById("myBtn");
    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    // When the user clicks the button, open the modal
    //btn.onclick = function () {

    //}
    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    //01.-  COMBO EMPRESA
    var intidUniOrg = 0;//166;// $(this).val()
    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: intidUniOrg,
            strGrupo: 'EMPRESA',
            strSubGrupo: ''
        },
        response => {
            $('#cboEmpresa').empty()
            $('#cboEmpresa').attr('disabled', false)
            $('#cboEmpresa').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#cboEmpresa').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
            })
        })

    //Configuración de Impresión
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_IMPR_TICKET_COMEDOR',
        },
        response => {
            ConfiImpr = response.strValorConfi;
            //RESULTADO: El valor está expresado en Si=1 y No=0.
        })
}

//03.- COMBO MARCADOR 
$("#cboLocal").change(function () {
    validarSession()//AÑADIDO 07.04.2021
    var intIdUniOrg = $(this).val();

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGMARCADOR',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGMARCADOR',
            strSubGrupo: 'TOMACONSUMO',
        },
        response => {
            $('#cboMarcador').empty()
            $('#cboMarcador').append('<option value="0" selected>Seleccione</option>')
            response.forEach(element => {
                $('#cboMarcador').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
            })
        })

})

//2.- COMBO LOCAL
$("#cboEmpresa").change(function () {
    validarSession()//AÑADIDO 07.04.2021
    var intid = $(this).val()

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: intid,
            strGrupo: 'LOCAL',
            strSubGrupo: ''
        },
        response => {
            $('#cboLocal').empty()
            $('#cboLocal').attr('disabled', false)
            $('#cboLocal').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#cboLocal').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
            })
        })

})

//VALIDAR CAMPO DNI
$("#dni_Empleado_input").keyup(function (event) {
    validarSession()//AÑADIDO 07.04.2021
    if (event.keyCode === 13) {
        if (($("#dni_Empleado_input").val().length) < 8) {
            $('#dni_Empleado_input_error').empty();
            $('#dni_Empleado_input_error').append('EL DNI DEBE CONTENER 8 CARACTERES');
            $('#dni_Empleado_input_error').css('color', 'red');

            var $body = jQuery('#dni_Empleado_input_error')
            $body.fadeOut(300, function () {
                $body.fadeIn(300);
            });
        }
        else {
            $('#dni_Empleado_input_error').empty();
            $('#dni_Empleado_input_error').append('SE COMPLETÓ LOS 8 CARACTERES');
            $('#dni_Empleado_input_error').css('color', 'green');
            $("#btn-insertar-marcacion-con-dni").click();
        }
    }
});

//KEYUP KEYDOWN
$("#dni_Empleado_input").keypress(function () {
    validarSession()//AÑADIDO 07.04.2021
    if (($("#dni_Empleado_input").val().length) < 8) {
        $('#dni_Empleado_input_error').empty();
        $('#dni_Empleado_input_error').append('EL DNI DEBE CONTENER 8 CARACTERES');
        $('#dni_Empleado_input_error').css('color', 'red');

        var $body = jQuery('#dni_Empleado_input_error')
        $body.fadeOut(300, function () {
            $body.fadeIn(300);
        });
        return;
    }
    else {
        $('#dni_Empleado_input_error').empty();
        $('#dni_Empleado_input_error').append('SE COMPLETÓ LOS 8 CARACTERES');
        $('#dni_Empleado_input_error').css('color', 'green');
     }
});

//===============================================================================================
//=============================== BOTON INGRESAR CON DNI ========================================
//===============================================================================================
$('#btn-insertar-marcacion-con-dni').on('click', function () { 
    validarSession()//AÑADIDO 07.04.2021
    $('#dni_Empleado_input_error').empty();

    if (($("#dni_Empleado_input").val().length) == 0 || $("#dni_Empleado_input").val() == null) {
        swal({
            title: "Toma de Consumos",
            text: "Tiene que ingresar el número de DNI",
            timer: 2000,
        });
        return;
    }
    else {
         if (($("#dni_Empleado_input").val().length) < 8) {
             $('#dni_Empleado_input_error').empty();
             $('#dni_Empleado_input_error').append('EL DNI DEBE CONTENER 8 CARACTERES');
             $('#dni_Empleado_input_error').css('color', 'red');
         
             var $body = jQuery('#dni_Empleado_input_error')
             $body.fadeOut(300, function () {
                 $body.fadeIn(300);
             });
             return;
         }
         else {
             $('#dni_Empleado_input_error').empty();
             $('#dni_Empleado_input_error').append('SE COMPLETÓ LOS 8 CARACTERES');
             $('#dni_Empleado_input_error').css('color', 'green');
         }
    }
    
    var _intIdAsistencia = 0;
    var _strNumDocumento = $('#dni_Empleado_input').val();   

    var _intNumTerminalRelac = $('#numeroMarcadorDelVisor').text();//Numero de DNI numeroMarcadorDelVisor
    var _dttFechaMarca = moment().format('DD/MM/YYYY HH:mm:ss')

    var MarcacionConDni = {
         intIdAsistencia     : _intIdAsistencia 
        ,strNumDocumento     : _strNumDocumento 
        ,dttFechaMarca       : _dttFechaMarca
        ,intNumTerminalRelac : _intNumTerminalRelac 
        ,bitMarcaDNI         : true//_bitMarcaDNI  
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    //return;
    $.post(
        '/Personal/RegistrarMarcacionConDni',
        { ObjEmpleadoConDni: MarcacionConDni, intTipoOperacion: 1, objSession: SesionMovi },
        (response) => {
            if (response.type !== '') {
                if (response.type === 'success') {
                    $('#dni_Empleado_input').val(''); 
                    $('#dni_Empleado_input_error').empty();
                } else if (response.type === 'info')
                {
                    swal({
                        title: "Estimado Empleado",
                        text: response.message,
                    });
                    $('#dni_Empleado_input').val('');
                    $('#dni_Empleado_input_error').empty();
                }
                else {
                }
            }
        }

    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-update-marcadorToma').on('click', function () {

    validarSession()//AÑADIDO 22.04.2021 HG
    var modal = document.getElementById("myModal");
    var btn = document.getElementById("myBtn");
    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    // When the user clicks the button, open the modal
    //btn.onclick = function () {

    //}
    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    //01.-  COMBO EMPRESA
    var intidUniOrg = 0;//166;// $(this).val()
    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: intidUniOrg,
            strGrupo: 'EMPRESA',
            strSubGrupo: ''
        },
        response => {
            $('#cboEmpresa').empty()
            $('#cboEmpresa').attr('disabled', false)
            $('#cboEmpresa').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#cboEmpresa').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
            })
        })

    //Configuración de Impresión
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_IMPR_TICKET_COMEDOR',
        },
        response => {
            ConfiImpr = response.strValorConfi;
            //RESULTADO: El valor está expresado en Si=1 y No=0.
        })

    $('#seleccioneUnMarcador').empty();
    modal.style.display = "block";
    return;
});

//===============================================================================================
//================================ ON CLICK idEmpleadoConsumo ===================================
//===============================================================================================
function esconder_pantalla_modo_espera() {
    validarSession();//AÑADIDO 22.04.2021 HG
    $("#contenedor_superior_top_nav").hide(); //Menu de opcion Salir del sistema
    $('#pantalla_bienvenida_modo_espera').fadeOut('slow').delay(5000).hide(); //HIDE TIENE QUE IR DE LA MANO CON FADEOUT
    $('#table-lista-servicios-disponibles').hide();
    $('#TbServiciosDiv').hide();//añadido 20.03.2021
    //añadido 19.03.2021
    $('#table-lista-servicios-complementarios').hide();
    $('#TbcomplementariosDiv').hide(); //añadido 20.03.2021
    //fin
    $('#Contenedor_Toma_Consumos').show();//modificado 26.03.2021
    $('#idTemporizador').hide();//añadido 20.03.2021
    $('#contenedor_padre_datos_comensal').show();
    $('#contenedor_padre_datos_comensal').appendTo('#contenedor_superior_top_nav2');

    CantTotalSC = 0; TotalSC = 0; CantTotalS = 0; TotalS = 0;
}

////===============================================================================================
////================================ FUNCION boton_trigger_visor() ================================ modo de espera visor
////===============================================================================================
function boton_trigger_visor() {
    validarSession(); //AÑADIDO 07.04.2021
    var idEmpleadoConsumo_ = $('#input_idAsistencia').val();
    $('#input_idAsistencia').empty();// Añadido/HGM  13.04.21
    $('#input_idAsistencia').val('0');// Añadido/HGM  13.04.21
    //añadido 14/04/2021 ES
    console.log("==========================================");
    //var idEmpleadoConsumo_ = mi_variable_global_;
    console.log("Variable global :");
    console.log(mi_variable_global_);
    console.log("==========================================");


    //Código Del Marcador Impreso en el Label Que Usa el WebObserver 
    var txt_codigo_marcador_observer = $('#codigo_marcador').text();
    var TxtNumeroMarcadorEnVisor = $('#numeroMarcadorDelVisor').text();

    if (txt_codigo_marcador_observer == TxtNumeroMarcadorEnVisor) {
        if (!isNaN(idEmpleadoConsumo_)) {
            DatosEmpleadoTomaConsumoVisor(idEmpleadoConsumo_);
        }
    } else {
        $('#idTemporizador').hide();//modificado 26.03.2021
    }

};

//=============================================================================================== 
//================================ MODAL PARA LA INSERCION DEL NUMERO DEL MARCADOR ==============
//===============================================================================================

function NewValidaPreModal(NumeroMarcadorVisor) {
    validarSession()//AÑADIDO 07.04.2021
    var modal = document.getElementById("myModal");
    var ventana_modo_espera = document.getElementById("abrir_ventana_modo_espera");

            //Verifica si en el modal se ha elegido un marcador o no
            if (NumeroMarcadorVisor == '0' || NumeroMarcadorVisor == null) {
                $('#seleccioneUnMarcador').empty();
                $('#seleccioneUnMarcador').append('Tiene que Seleccionar un Marcador');
                modal.style.display = "block";
                return;
            }

            if (NumeroMarcadorVisor != '0' && NumeroMarcadorVisor != null) {
                $('#numeroMarcadorDelVisor').empty();
                $('#numeroMarcadorDelVisor').append(NumeroMarcadorVisor);
                $('#numeroMarcadorDeLaMarcacion').empty();
                $('#numeroMarcadorDeLaMarcacion').append(NumeroMarcadorVisor);
                $('#lbl_NumMarcadorRelacionado').empty();//añadido 19.03.2021 (general)
                $('#lbl_NumMarcadorRelacionado').append(NumeroMarcadorVisor); //añadido 19.03.2021 (general)
                $('#pantalla_bienvenida_modo_espera').fadeIn('slow').delay(50).show();
                $('#idTemporizador').hide();//26.03.2021
                modal.style.display = "none";
            }

}


$('#abrir_ventana_modo_espera').on('click', function () {
    validarSession()//AÑADIDO 07.04.2021
    var modal = document.getElementById("myModal");
    var ventana_modo_espera = document.getElementById("abrir_ventana_modo_espera");
    NumeroMarcadorVisor = $('#cboMarcador').val(); //comentado var

    //enviar el marcador a la sesion 07/04/2021
    $.post(
        '/LoginSiscop/setNumMarcadorTomaConsumo',
        { numMarcador: NumeroMarcadorVisor },
        (response) => {
            console.log(response);

            //Verifica si en el modal se ha elegido un marcador o no
            if (NumeroMarcadorVisor == '0' || NumeroMarcadorVisor == null) {
                $('#seleccioneUnMarcador').empty();
                $('#seleccioneUnMarcador').append('Tiene que Seleccionar un Marcador');
                modal.style.display = "block";
                return;
            }

            if (NumeroMarcadorVisor != '0' && NumeroMarcadorVisor != null) {
                $('#numeroMarcadorDelVisor').empty();
                $('#numeroMarcadorDelVisor').append(NumeroMarcadorVisor);
                $('#numeroMarcadorDeLaMarcacion').empty();
                $('#numeroMarcadorDeLaMarcacion').append(NumeroMarcadorVisor);
                $('#lbl_NumMarcadorRelacionado').empty();//añadido 19.03.2021 (general)
                $('#lbl_NumMarcadorRelacionado').append(NumeroMarcadorVisor); //añadido 19.03.2021 (general)
                $('#pantalla_bienvenida_modo_espera').fadeIn('slow').delay(50).show();
                $('#idTemporizador').hide();//26.03.2021
                modal.style.display = "none";
            }
        });



});

//=============================================================================================== 
//================================ FUNCION limpieza() =========================================== Controles de Texto
//=============================================================================================== Limpiar limpieza toma consumo
function limpieza() {
    $('#lblNombre').empty();
    $('#lblFotocheck').empty();
    $('#lbl_intIdReglaNeg').empty();
    $('#txt_dttFecha').empty();
    $('#txt_dttFechaHora').empty();
    $('#TipMenuTomaConsumo').val('0');
    $('#TipServicioTomaConsumo').empty()
    CantTotalSC = 0; TotalSC = 0; CantTotalS = 0; TotalS = 0;
}

$('#boton_limpiar').on('click', function () {
    validarSession()//AÑADIDO 07.04.2021
    limpieza();
});

//===============================================================================================46515
//=================================== FUNCION DatosEmpleadoTomaConsumoVisor() ===================mdetc ftdetc
//===============================================================================================get datos toma consumo
/*  Esta función trae los datos que se mostrarán en la vista de la persona que marcó. Esos datos son traidos 
 *  desde el sp TSP_TAASISTENCIA_CONSUMO_Q01. La marca entra a esta función como un parámetro "idEmpleadoConsumo" y
 *  fue recibido por el Websocket al momento que se insertó una marcación en la tabla TAASISTENCIA.
 */
var bitTodosTS_ = 0;
function DatosEmpleadoTomaConsumoVisor(idEmpleadoConsumo) { /*este parametro es traido de...*/
    validarSession()//AÑADIDO 07.04.2021
    swal.close();
    CantTotalSC = 0; TotalSC = 0; CantTotalS = 0; TotalS = 0;
    var SesionMovi = {
        IntIdMenu: 'M0314',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/ObtenerEmpleadoTomaConsumo',
        { IntIdAsistencia: idEmpleadoConsumo, objSession: SesionMovi },
        (response) => {
            console.log(response);
            console.log(Confi);//prueba de impresion 29.03.2021
            $('#table-lista-servicios-disponibles').hide();
            $('#TbServiciosDiv').hide();//añadido 20.03.2021
            $('#table-lista-servicios-complementarios').hide();
            $('#TbcomplementariosDiv').hide(); //añadido 20.03.2021
            $('#Contenedor_Toma_Consumos').hide();//modificado 26.03.2021
            $('#idTemporizador').hide();//26.03.2021
            //fin
            response.forEach(element => {
                var dttFechaHora_slice_fecha = (element.dttFechaHora).slice(0, 10);//Se esta recortando la fecha ('2020-11-26') 
                var salidaFecha = formato(dttFechaHora_slice_fecha);
                var salidaFechaMostrar = formato1(dttFechaHora_slice_fecha);
                /**
                 * Convierte un texto de la forma 2017-01-10 a la forma
                 * 10/01/2017
                 *
                 * @param {string} texto Texto de la forma 2017-01-10
                 * @return {string} texto de la forma 10/01/2017
                 *
                 */
                //INVERTIR EL FORMATO DE LA FECHA PARA USARLO EN EL new Date(salidaFecha)
                function formato(dttFechaHora_slice_fecha) {
                    return dttFechaHora_slice_fecha.replace(/^(\d{4})-(\d{2})-(\d{2})$/g, '$2/$3/$1');
                }

                //INVERTIR EL FORMATO DE LA FECHA PARA MOSTRARLO EN LA VISTA
                function formato1(dttFechaHora_slice_fecha) {
                    return dttFechaHora_slice_fecha.replace(/^(\d{4})-(\d{2})-(\d{2})$/g, '$3/$2/$1');
                }

                //FECHA HORA DIA
                var today = new Date(salidaFecha); //Debe estar llegar aquí con el formato: MM/DD/YY
                var hoy = today.getDay();
                var eldia;//lunes, martes;...
                if (hoy == 0) { eldia = 'Domingo'; }
                if (hoy == 1) { eldia = 'Lunes'; }
                if (hoy == 2) { eldia = 'Martes'; }
                if (hoy == 3) { eldia = 'Miércoles'; }
                if (hoy == 4) { eldia = 'Jueves'; }
                if (hoy == 5) { eldia = 'Viernes'; }
                if (hoy == 6) { eldia = 'Sábado'; }

                $('#lblNombre').empty();
                $('#lblNombre').append(element.strNombresCompletos); //strNombresCompletos
                $('#lblFotocheck').empty();
                $('#lblFotocheck').append(element.strFotocheck);
                $('#lbl_intIdReglaNeg').empty();
                $('#lbl_intIdReglaNeg').append(element.intIdReglaNeg);
                $('#txt_dttFecha').empty();
                $('#txt_dttFecha').append(eldia + ', ' + salidaFechaMostrar);
                var dttFechaHora_slice_hora = (element.dttFechaHora).slice(11);//Se esta recortando la fecha
                $('#txt_dttFechaHora').empty();
                $('#txt_dttFechaHora').append(dttFechaHora_slice_hora);
                $('#txt_dttFechaHora_completa').empty();
                $('#txt_dttFechaHora_completa').append(element.dttFechaHora);
                $('#txt_intIdServicio').val(element.intIdServicio);
                $('#div_intIdPersonal').empty();
                $('#div_intIdPersonal').append('<label id="lbl_intIdPersonal">' + element.intIdPersonal + '</label>');
                $('#div_intIdServicio').empty();
                $('#div_intIdServicio').append('<label id="lbl_intIdServicio">' + element.intIdServicio + '</label>');
                $('#div_intIdAsistencia').empty();
                $('#div_intIdAsistencia').append('<label id="lbl_intIdAsistencia">' + element.intIdAsistencia + '</label>');
                $('#div_dttFechaHora').empty();
                $('#div_dttFechaHora').append('<label id="lbl_dttFechaHora">' + element.dttFecha + '</label>');//revisar este caso
                $('#div_intCantidad').empty();
                $('#div_intCantidad').append('<label id="lbl_intCantidad">' + element.intCantidad + '</label>');
                $('#lblstrTipoServicio').empty();
                $('#lblstrTipoServicio').append(element.strTipoServicio.toUpperCase());
                $('#lblintCantMaxRN').empty();
                $('#lblintCantMaxRN').append(element.intTipoPeriodoConsumo);
                $('#lblintCantMaxConsumo').empty();
                $('#lblintCantMaxConsumo').append(element.intCantMaxConsumo);
                //AÑADIDOS 07.04.2021
                $('#lblstrHorarioAtencion').empty();
                $('#lblstrHorarioAtencion').append(element.strHorarioAtencion);

                //añadido 09.04.2021
                CantTotalS = element.CantS;
                CantTotalSC = element.CantC;
                var Simb_ = element.Sim;
                //añadido 12.04.2021
                bitTodosTS_ = element.bitTodosTS;

                //añadidos 22.03.2021
                $('#lblCantServ').empty();
                $('#SplblCantServ').empty();
                $('#lblTotalServ').empty();

                $('#lblCantServC').empty();
                $('#SplblCantServC').empty();
                $('#lblTotalServC').empty();

                $('#lblCantServAnt').empty();
                $('#lblCantServCAnt').empty();
                //añadido 09.04.2021

                if (CantTotalS > 0) {
                    $('#lblCantServAnt').show();
                    TotalS = parseFloat(element.TotalS).toFixed(2);
                    if (CantTotalS == 1) {
                        $('#lblCantServAnt').append(CantTotalS.toString() + " Servicio Solicitado");
                    } else {
                        $('#lblCantServAnt').append(CantTotalS.toString() + " Servicios Solicitados");
                    }
                }
                if (CantTotalSC > 0) {
                    $('#lblCantServCAnt').show();
                    TotalSC = parseFloat(element.TotalC).toFixed(2);

                    if (CantTotalSC == 1) {
                        $('#lblCantServCAnt').append(CantTotalSC.toString() + " Servicio Solicitado");
                    } else {
                        $('#lblCantServCAnt').append(CantTotalSC.toString() + " Servicios Solicitados");
                    }
                }

                CantTotalS = 0;
                CantTotalSC = 0;
                //$('#SplblCantServ').append(CantTotalS.toString());
                $('#lblTotalServ').append(Simb_ + " " + TotalS.toString());
                //$('#SplblCantServC').append(CantTotalSC.toString());
                $('#lblTotalServC').append(Simb_ + " " + TotalSC.toString());


                //viernes19
                if (element.bitMarcaDNI == true ) {
                    var txtDNI= $('#txt_NumeroDeMarcadorDeTipoDni').text();
                    $('#numeroMarcadorDeLaMarcacion').empty();
                    $('#numeroMarcadorDeLaMarcacion').append(txtDNI);
                } else {
                     $('#numeroMarcadorDeLaMarcacion').empty();
                    $('#numeroMarcadorDeLaMarcacion').append('N°  '+$('#lbl_NumMarcadorRelacionado').text());//modificado 07.04.2021
                }

                Imagen_GC(element.imgFoto, "TomaConsumo");//añadido 26.03.2021

                //===============================================================================================
                //=============================== SECCION QUE TRAE LA IMAGEN ====================================
                //===============================================================================================
                //$('#contenedor_imagen_empleado').html('<img src = ' + '/DirEmpleadosRuta/' + element.imgFoto + ' style="width:100%; max-width:220px;border-radius:2%;"  />');
                //$('#contenedor_imagen_empleado').html('<img src = ' + '/DirEmpleadosRuta/' + element.imgFoto + ' style="width:100%; max-width:220px;border-radius:50%;border: 5px solid white;"  />');
                var ServicioId = element.intIdServicio;
                esconder_pantalla_modo_espera();
            });

            $('#TipServicioTomaConsumo').empty();
            $('#TipServicioTomaConsumo_Horario').empty();

            // despues de llenarse este label lbl_intIdReglaNe ejecutaremos  la sigt funcion:
            //ID ASISTENCIA OBTENIDO EN ESTE POST IRA COMO PARAMETRO EN LA FUNCION "TraerListaDeTablaRegNegDet" 
            //PARA LUEGO TRAER LA LISTA DE SERVICIOS QUE LE CORRESPONDE A ESE ID
            var id_intIdAsistencia = $('#lbl_intIdAsistencia').text(); //texto intIdAsistencia en el label
            var id_strNombresCompletos = $('#lblNombre').text();

            TraerListaDeTablaRegNegDet(id_intIdAsistencia, id_strNombresCompletos);

        });
}

//===============================================================================================
//=================================== FUNCION fechaHoraTomaConsumo() ============================fecha hora toma consumo
//===============================================================================================
//Funcion utilizada para el html y mostrar el dia, fecha, hora y minuto actual en el VISOR
function fechaHoraTomaConsumo() {

    function checkTime(i) {
        if (i < 10) {
            i = "0" + i;
        }
        return i;
    }

    function startTime() {

        var today = new Date();

        var hoy = today.getDay();
        var hoydia;
        if (hoy == 0) { hoydia = 'Domingo'; }
        if (hoy == 1) { hoydia = 'Lunes'; }
        if (hoy == 2) { hoydia = 'Martes'; }
        if (hoy == 3) { hoydia = 'Miércoles'; }
        if (hoy == 4) { hoydia = 'Jueves'; }
        if (hoy == 5) { hoydia = 'Viernes'; }
        if (hoy == 6) { hoydia = 'Sábado'; }

        var strDay = today.getDate();
        var strMonth = today.getMonth() + 1;
        var strYear = today.getFullYear();

        var h = today.getHours();
        var m = today.getMinutes();
        var s = today.getSeconds();

        var ampm = 'AM'
        if (h >= 13 && h <= 23) {
            ampm = ''; //no debe tener formato AM o PM
        } else {
            if (h < 12) { ampm = 'AM'; }
            if (h >= 12) { ampm = 'PM'; }
        }


        // agregar cero delante de numeros<10
        m = checkTime(m);
        s = checkTime(s);

        if (strDay == 1 || strDay == 2 || strDay == 3 || strDay == 4 || strDay == 5 || strDay == 6 || strDay == 7 || strDay == 8 || strDay == 9) {
            strDay = "0" + strDay;
        }

        if (strMonth == 1 || strMonth == 2 || strMonth == 3 || strMonth == 4 || strMonth == 5 || strMonth == 6 || strMonth == 7 || strMonth == 8 || strMonth == 9) {
            strMonth = "0" + strMonth;
        }

        //Si se comenta genera en la consola el error de: Uncaught TypeError: Cannot set property 'innerHTML' of null
        document.getElementById('time').innerHTML = hoydia + "  " + strDay + "/" + strMonth + "/" + strYear + " <br />  " + h + ":" + m + ":" + s + " " + ampm;


        t = setTimeout(function () {
            startTime()
        }, 500);
    }
    startTime();
}

//===============================================================================================Tabla Toma Consumos
//============================= FUNCION TraerListaDeTablaRegNegDet() ============================servicios disponibles 
//===============================================================================================
var _varTabla
var _varTablaRNS
var _varTablaSC
function TraerListaDeTablaRegNegDet(intIdAsistencia_, strNombresCompletos_) {
    validarSession()//AÑADIDO 07.04.2021
    Reloj();
    $('#idTemporizador').show();

    var SesionMovi = {
        IntIdMenu: 'M0314',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTablaComplementarios',
        { objSession: SesionMovi, intIdAsistencia: intIdAsistencia_ },
        (response) => {
            if (response.type == 'error') { //Cuando el response no sea una lista sino Cadena de Caracteres(un mensaje)
                //añadido 19.03.2021
                $('#table-lista-servicios-complementarios').hide();
                $('#TbcomplementariosDiv').hide(); //añadido 20.03.2021
                //fin
                if (response.type === 'error') {
                    swal({
                        title: "Estimado(a): " + strNombresCompletos_,
                        text: response.message,
                    });

                    //añadido 19.03.2021
                    $('#table-lista-servicios-complementarios').hide();
                    $('#TbcomplementariosDiv').hide(); //añadido 20.03.2021
                    //fin
                }
            } else {
                response.forEach(element => {
                    if (typeof _varTablaSC !== 'undefined') {
                        _varTablaSC.destroy();
                    }

                    _varTablaSC =
                        $('#table-lista-servicios-complementarios').DataTable({
                            data: response,
                            'sDom': 't',
                            columns: [
                                { data: 'intIdServicio' },
                                { data: 'strDesServicio' },
                                { data: 'strCategoria' },
                                { data: 'monCostoServ' },
                                { data: 'strCoMoneda' },
                                { data: 'dcTipoCambio' },
                                { data: 'simbolo' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {
                                        let intIdServicio_ = item.intIdServicio;
                                        let monCostoServ_ = item.monCostoServ;
                                        let Simb_ = item.simbolo;//añadido 20.03.2021

                                        var fecha = new Date();
                                        var hora = fecha.getHours();
                                        //btn btn-success btn-xs btn-edit
                                        return `<button class="btn btn-info btn-xs" dataidServC="${intIdServicio_}" onclick='fnAgregarComplemento(this,"${intIdServicio_}","${monCostoServ_}", "${Simb_}")'> AGREGAR </button>  ` +
                                            `<button class="btn btn-danger btn-xs"  dataidServC="${intIdServicio_}" onclick='fnAnularComplemento(this,"${intIdServicio_}","${monCostoServ_}", "${Simb_}")' hidden><i class="fa fa-trash-o"></i> ANULAR </button>  `+
                                            `<button class="btn btn-success btn-xs" style="font-size: 11px;" hidden ><i class="fa fa-check"></i> ATENDIDO </button>`;
                                    }
                                },
                            ],
                            lengthMenu: [10, 25, 50],
                            order: [],
                            responsive: true,
                            language: _datatableLanguaje,
                            columnDefs: [//ocultar y definir columnas                  
                                {
                                    targets: [0],  //Columna numero "cero"
                                    visible: false,//Columna no visible pero programable
                                    searchable: true
                                },
                                {
                                    targets: [3],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [5],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [6],//
                                    visible: false,
                                    searchable: true
                                }

                            ],
                            dom: 'lBfrtip',
                        });
                    $('#table-lista-servicios-complementarios').show();
                    $('#contenedor-table-lista-complementarios').show();
                    $('#TbcomplementariosDiv').show();
                });
            }  
        });


    $.post(
        '/Personal/GetTablaReglaNegocioServicio',
        { objSession: SesionMovi, intIdAsistencia: intIdAsistencia_ },
        (response) => {

            if (response.type == 'error') { //Cuando el response no sea una lista sino Cadena de Caracteres(un mensaje)
                $('#table-lista-servicios-disponibles').hide();
                $('#TbServiciosDiv').hide();

                if (response.type === 'error') {
                    swal({
                        title: "Estimado(a): " + strNombresCompletos_,
                        text: response.message,
                    });

                    $('#table-lista-servicios-disponibles').hide(); //martes05
                    $('#TbServiciosDiv').hide();
                }
            } else {
                response.forEach(element => {

                    if (typeof _varTablaRNS !== 'undefined') {
                        _varTablaRNS.destroy();
                    }

                    _varTablaRNS =
                        $('#table-lista-servicios-disponibles').DataTable({
                            data: response,
                            'sDom': 't',
                            columns: [
                                { data: 'IntIdReglaNeg' },
                                { data: 'intIdServicio' },//----Necesario al guardar
                                { data: 'strDesServicio' },
                                { data: 'intIdTipServ' },
                                { data: 'intIdTipoMenu' },
                                { data: 'monCostoServ' },//---- Necesario al guardar
                                { data: 'strCoMoneda' },
                                { data: 'dcTipoCambio' },
                                { data: 'simbolo' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let IntIdReglaNeg_ = item.IntIdReglaNeg;
                                        let intIdServicio_ = item.intIdServicio;
                                        let monCostoServ_ = item.monCostoServ;
                                        let intIdTipServ_ = item.intIdTipServ;
                                        let intIdTipoMenu_ = item.intIdTipoMenu;
                                        let Simb_ = item.simbolo;//añadido 20.03.2021
                                        var fecha = new Date();
                                        var hora = fecha.getHours();

                                        return `<button class="btn btn-primary btn-xs btn-edit" style="font-size: 12px;" dataidServ="${intIdServicio_}" onclick='BotonSeleccionarServicioRegistrado(this,"${intIdServicio_}","${monCostoServ_}","${intIdTipServ_}", "${Simb_}")'> SELECCIONAR </button>  ` +
                                            `<button class="btn btn-danger btn-xs"  dataidServ="${intIdServicio_}" onclick='BotonDeshacerServicioRegistrado(this,"${intIdServicio_}","${monCostoServ_}", "${Simb_}")' hidden><i class="fa fa-trash-o"></i> ANULAR </button>  ` +
                                            `<button class="btn btn-success btn-xs" style="font-size: 11px;" hidden ><i class="fa fa-check"></i> ATENDIDO </button>`;
                                    }
                                },

                            ],
                            lengthMenu: [10, 25, 50],
                            order: [],
                            responsive: true,
                            language: _datatableLanguaje,
                            columnDefs: [//ocultar y definir columnas                  
                                {
                                    targets: [0],  //Columna numero "cero"
                                    visible: false,//Columna no visible pero programable
                                    searchable: true
                                },
                                {
                                    targets: [1],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [5],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [7],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [8],//
                                    visible: false,
                                    searchable: true
                                }
                            ],
                            dom: 'lBfrtip',
                        });

                    $('#table-lista-servicios-disponibles').show();
                    $('#contenedor-table-lista-servicios').show();  //martes05
                    $('#TbServiciosDiv').show();

                    swal({
                        title: "Estimado(a): " + strNombresCompletos_,
                        text: 'Tiene los siguientes SERVICIOS', //'Tiene los siguientes servicios disponibles',
                    });


                        
                });
            } //fin del else   
        });

}

function Reloj() {
    if (Confi === '1') {
        $('#start').click();
        $('#reset').click();
        $('#titulo').empty();
        $('#titulo').append(" LA VENTANA DE TOMA DE CONSUMOS SE CERRARÁ EN: ");
        $('#btn-refresh').show();
        $('#hours').show();
        $('#minutes').show();
        $('#h_').show();
        $('#m_').show();
        $('#seconds').show();
    } else {
        $('#titulo').empty();
        $('#titulo').append(" TOMA DE CONSUMOS ");
        $('#btn-refresh').hide();
        $('#hours').hide();
        $('#minutes').hide();
        $('#h_').hide();
        $('#m_').hide();
        $('#seconds').hide();
    }
}

//===============================================================================================
//================================ FUNCION countdown, tiempo de espera, timer =================== countdown temporizador timer
//===============================================================================================
//El countdown_07 se pasó al consumo.html
function AnularConsumoTrue(anulado) {
    return anulado = true
}

//===============================================================================================
//=============================== BOTON TERMINAR Toma de Consumo ================================
//===============================================================================================
$('#btn-refresh').on('click', function () {

    $('#start').click();
    $('#reset').click();
});

$('#btn-salir-toma-consumo-comensal').on('click', function () {
    validarSession()//AÑADIDO 07.04.2021
    swal({
        title: "Finalizar Toma de Consumo",
        text: "Estimado Usuario, ¿Desea finalizar el proceso de atención de su Consumo?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí",
        cancelButtonText: "No",
        allowOutsideClick: false, //añadido 25/03/2021
    }).then(function (isConfirm)
        {
        if (isConfirm)
        {
                $('#contenedor_superior_top_nav').fadeIn('slow').delay(2000).show();
                $('#pantalla_bienvenida_modo_espera').fadeIn('slow').delay(3000).show();
                $('#contenedor_padre_datos_comensal').fadeOut('slow').delay(3000).hide();
                $('#idTemporizador').hide();
                $('#TbServiciosDiv').hide();
                $('#TbcomplementariosDiv').hide();
                $('#contenedor-table-lista-complementarios').hide();
                $('#contenedor-table-lista-servicios').hide();
                $('#table-lista-servicios-disponibles').hide();
                $('#table-lista-servicios-complementarios').hide();            
                $('#stop').click();

                Selec = [];//nueva instancia
                SelecSC = [];//nueva instancia
                CantTotalSC = 0;
                TotalSC = 0;
                CantTotalS = 0;
                TotalS = 0;

            //IMPRIMIR SI LA CONFIGURACION: Generar Ticket desde Servicio de Comensal (imprimir ticket completo al finalizar TOMA)
            console.log("Configuracion de Impresora:");
            console.log(ConfiImpr);
            if (ConfiImpr == 2) {//chck_2_
                var SesionMovi = {
                    IntIdMenu: 'M0314',
                    intIdUsuario: idUsuar,
                    intIdSoft: idSoftw,
                    intIdSesion: intIdSe
                }
                var intIdAsistencia_ = $('#lbl_intIdAsistencia').text(); //texto intIdAsistencia en el label
                var evento_ = 2;
                dataCheckGC = [];// enviar el objeto vacío solo para trabajar con el mismo método.
                ImprimirTicket_Comedor(SesionMovi, parseInt(intIdAsistencia_,10), dataCheckGC, evento_)

                swal({
                    title: "Ticket de Consumos",
                    text: "No olvide recoger su ticket impreso",
                    timer: 3500,
                });
            }

            mi_variable_global_ = 0; //añadido 14.04.2021 Limpiar
        }
        },function (dismiss) {
            if (dismiss === 'cancel') { // you might also handle 'close' or 'timer' if you used those
                Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores
            } if (dismiss === 'overlay') {
                //ignorar
            }
            else {
                throw dismiss;
            }
        }
  );

});

//===============================================================================================
//============================= FUNCION traer pk del consumo registrado  ======================== esta usando un metodo listar
//===============================================================================================
$('#TablaEmpresa  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()//AÑADIDO 07.04.2021
    //ESTAS LINEAS TIENEN QUE IR DEBAJO DEL OBTENER PK
    let EmpresaId = $(this).attr("dataid")  //Donde esta ete atributo de ese div cogerlo para tener ese

    let Descripcion = $(this).attr("des_data")
    if (!isNaN(EmpresaId)) {
        intentEliminarEmpresa(EmpresaId, Descripcion)
    }

});

//===============================================================================================
//=================================== FUNCION TraerIdRegistroParaEliminar() ===================== 
//=============================================================================================== eliminar toma consumo
function TraerIdRegistroParaEliminar() {
    validarSession()//AÑADIDO 07.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0314',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetIdConsumoParaEliminar',
        { objSession: SesionMovi },
        (response) => {
            console.log(response);
            response.forEach(element => {
                $('#div_intIdConsumo, #div_intIdConsumo_2').empty();
                $('#div_intIdConsumo, #div_intIdConsumo_2').append('<label id="lbl_intIdConsumo">' + element.intIdConsumo + '</label>');
            });
        });
}

//VALOR INICIAL CERO
var cantidad_inicial = 0;
//===============================================================================================
//==================== DESHABILITAR BOTON SELECCIONAR valor 'int_Valida' ===============
//===============================================================================================
function deshabilitarBtnSelecionar(intIdServicio_, this_, intValida_, bt_) {

    var tablaServiciosD = $('#table-lista-servicios-disponibles').DataTable();

    tablaServiciosD.rows().every(function (rowIdx, tableLoop, rowLoop) {

        var cell = tablaServiciosD.cell({ row: rowIdx, column: 9 }).node(); //9 es el número de columna de la tabla según HTML

        if (intValida_ == 0) {
            $('button:eq(0)', cell).prop("disabled", true);//.html(' ');//.prop('value', 'Registrado');;
        }

        if (intValida_ >= 1) { //modificado 07.04.2021 (intValida_ == 1)
            $('button:eq(0)', cell).prop("disabled", false);
        }
    });


    if (bt_ > 0) {// bt_= 0, cuando proviene del botón seleccionar.
        var filaRowId = $(this_).closest("tr");//.parents('tr');//[0];

        $('button:eq(1)', filaRowId).prop("disabled", false);
        $('button:eq(1)', filaRowId).toggle(true);
    }


}
function deshabilitarBtnAgregarSC(intIdServicio_, this_, intValida_, bt_) {

    var tablaServiciosC = $('#table-lista-servicios-complementarios').DataTable();

    tablaServiciosC.rows().every(function (rowIdx, tableLoop, rowLoop) {
        var cell = tablaServiciosC.cell({ row: rowIdx, column: 7 }).node();

        if (intValida_ == 0) {
            $('button:eq(0)', cell).prop("disabled", true);//.html(' ');//.prop('value', 'Registrado');;
        }

        if (intValida_ >= 1) { //modificado 07.04.2021 (intValida_ == 1)
            $('button:eq(0)', cell).prop("disabled", false);
        }
    });


    if (bt_ > 0) {// bt_= 0, cuando proviene del botón seleccionar.
        var filaRowId = $(this_).closest("tr");//.parents('tr');//[0];

        $('button:eq(1)', filaRowId).prop("disabled", false);
        $('button:eq(1)', filaRowId).toggle(true);
    }


}

//===============================================================================================
//==================== DESHABILITAR BOTON ANULAR SEGUN valor 'int_Valida' ====================
//===============================================================================================
function deshabilitarBtnAnular(this_, intIdServicio_a, Cont) {
    var filaRowId = $(this_).parents('tr');
    $('button:eq(1)', filaRowId).toggle(false);
}
function deshabilitarBtnAnularSC(this_, intIdServicio_a, Cont) {
    var filaRowId = $(this_).parents('tr');
    $('button:eq(1)', filaRowId).toggle(false);
}
function habEstadoAtendido(this_, intIdServicio_a, Cont) {
    var filaRowId = $(this_).closest("tr");
    $('button:eq(2)', filaRowId).prop("disabled", false);
    $('button:eq(2)', filaRowId).toggle(true);//26.03.2021 prueba
 }


//===============================================================================================
//============================ BOTON SELCCIONAR (e Insertar Toma Consumo) ======================= 
//===============================================================================================
var Selec = new Array(); //declarar
var SelecSC = new Array(); //declarar

function BotonSeleccionarServicioRegistrado(this_, intIdServicio_p, monCostoServ_p, intIdTipServ_p, Simb_) {
    validarSession()//AÑADIDO 07.04.2021
    var _intIdServicio = intIdServicio_p;
    var _intIdAsistencia = $('#lbl_intIdAsistencia').text();
    var _intCantidad = 1
    var _strObservacion = '';

    var CONSUMO_OBJ = {
        intIdServicio: _intIdServicio      //52
        , intIdAsistencia: _intIdAsistencia  //12
        , intCantidad: _intCantidad          //2
        , strObservacion: _strObservacion    //Ya se esta controlando en el sp 
    }

    var servicio_seleccionado = $(this_).parents('tr').find('td').eq(1).text();
    var menu_seleccionado = $(this_).parents('tr').find('td').eq(2).text();

    swal({

        title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
        text: "¿Está seguro de Registrar el Consumo del Servicio Seleccionado?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Registrar",
        cancelButtonText: "Cancelar",
        allowOutsideClick: false, //añadido 25/03/2021
    }).then(function (isConfirm) {

        if (isConfirm) {
            var SesionMovi = {
                IntIdMenu: 'M0314',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Personal/RegistrarTomaConsumo',
                { ObjConsumo: CONSUMO_OBJ, objSession: SesionMovi, intTipoOperacion: 1, tipo: 'S', bitTodosTS : bitTodosTS_},
                //{ ObjConsumo: CONSUMO_OBJ, objSession: SesionMovi, intTipoOperacion: 1, tipo: 'S'},
                (response) => {

                    var longitudMsg = response.message.length;
                    var Indice = response.message.indexOf("|");    // indice inicial es 0
                    var Longitud = (longitudMsg - Indice)*(-1)
                    var response_Valida = parseInt(response.message.slice(Longitud + 1));

                    $('#lblintValida').empty();
                    $('#lblintValida').append(response_Valida);

                    //Actualizando el contador
                    $('#lblintCantMaxConsumo').empty();
                    $('#lblintCantMaxConsumo').append(response_Valida);


                    if (response.type !== '') {
                        if (response.type === 'success') {
                            var responseMessage = response.message.slice(-0, Longitud);
                            var mensaje_ = responseMessage + ' <input type="checkbox" checked="checked" style="border: none; pointer-events: none; background: transparent; outline: none !important;" >';

                            swal({
                                title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
                                text: mensaje_,
                            });

                            $('#btn-seleccionar-insertar-toma-consumo').prop('disabled', true); // $("#step-two").prop("disabled", true)
                            $('#btn-cancelar-toma-consumo-comensal').prop('disabled', false);
                            $('#btn-salir-toma-consumo-comensal').prop('disabled', false);

                            ////////CUANDO EL COMENSAL YA REGISTRÓ LO SELECCIONADO  //jueves11.03.21 comentado
                            var btn = document.createElement("button");
                            var y = document.createTextNode("REGISTRADO");
                            btn.style.color = '#fff';
                            btn.disabled;
                            btn.style.background = "#1abb9c";
                            btn.appendChild(y);
                            btn.className = 'btn_registrado';

                            //Arreglo "Selec" de uso interno
                            //----------------------------------------------------
                            console.log(Selec);
                            var Cont = 1;
                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === _intIdServicio; var index = Selec.findIndex(FuncionArray);
                            console.log(index);

                            if (index > -1) {
                                function es(f)
                                { return f.IntId1 === _intIdServicio; }
                                console.log(Selec.find(es).Contador);
                                Cont = Selec.find(es).Contador + 1
                                Selec.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            // Añadir Servicio Seleccionado al arreglo
                            class General {
                                constructor(IntId1, Contador) {
                                    this.IntId1 = IntId1 //almacena el IdEmpresa
                                    this.Contador = Contador //Descripcion de la Empresa
                                }
                            }
                            //if (Cont>1)
                            Selec.push({ IntId1: _intIdServicio, Contador: Cont })
                            console.log(Selec);

                            //Utilizando una funcion para deshabilitar todos los botones 'Seleccionar':
                            deshabilitarBtnSelecionar(_intIdServicio, this_, response_Valida, 1)

                            //Carrito Servicios 20.03.2021
                            var Cantidad = parseInt(CantTotalS);
                            var Total = 0;

                            Cantidad += 1;
                            Total = parseFloat(monCostoServ_p) + parseFloat(TotalS);

                            CantTotalS = Cantidad;
                            TotalS = parseFloat(Total).toFixed(2);

                            $('#lblCantServ').empty();
                            $('#SplblCantServ').empty();

                            if (Cantidad == 1) {
                                $('#lblCantServ').append(CantTotalS.toString() + " Servicio Seleccionado");
                            } else {
                                $('#lblCantServ').append(CantTotalS.toString() + " Servicios Seleccionados");
                            }
                            
                            $('#SplblCantServ').append(CantTotalS.toString());
                            $('#lblTotalServ').empty();
                            $('#lblTotalServ').append(Simb_ + " " + TotalS.toString());

                            //Actualizar el Máximo de Consumo 20.03.2021
                            var UltMax = parseInt($('#lblintCantMaxConsumo').text()) - 1;
                            //$('#lblintCantMaxConsumo').empty();//COMENTADO 07.04.2021
                            //$('#lblintCantMaxConsumo').append(UltMax);//COMENTADO 07.04.2021

                            //Ampliar Tiempo de Cierre.
                            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores

                        } else
                        {  //Cuando el servicio ya no esta disponible: se terminó ese menú,
                            if (response.type === 'error') {
                                var mensaje_ = '<span style="color:#00c292; font-weight: bold; font-size:16px;">' + response.message + '</span>';
                                swal({
                                    title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
                                    text: mensaje_,
                                });
                            } else
                            { }
                        }
                    }
                }).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
        }else {
            swal("Cancelled", "", "error");
        }
    });
}

function fnAgregarComplemento(this_, intIdServicio_p, monCostoServ_p, Simb_) {
    validarSession()//AÑADIDO 07.04.2021
    var _intIdServicio = intIdServicio_p;
    var _intIdAsistencia = $('#lbl_intIdAsistencia').text();
    var _intCantidad = 1
    var _strObservacion = '';

    var CONSUMO_OBJ = {
        intIdServicio: _intIdServicio      //52
        , intIdAsistencia: _intIdAsistencia  //12
        , intCantidad: _intCantidad          //2
        , strObservacion: _strObservacion    //Ya se esta controlando en el sp 
    }

    var servicio_seleccionado = $(this_).parents('tr').find('td').eq(1).text();
    var menu_seleccionado = $(this_).parents('tr').find('td').eq(2).text();

    swal({

        title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
        text: "¿Está seguro de Agregar el Complemento Seleccionado?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Registrar",
        cancelButtonText: "Cancelar",
        allowOutsideClick: false, //añadido 25/03/2021
    }).then(function (isConfirm) {
        if (isConfirm) {
            var SesionMovi = {
                IntIdMenu: 'M0314',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Personal/RegistrarTomaConsumo',
                { ObjConsumo: CONSUMO_OBJ, objSession: SesionMovi, intTipoOperacion: 1, tipo: 'C', bitTodosTS: bitTodosTS_},
                (response) => {
                     //var response_Valida = parseInt(response.message.slice(-1));
                    var longitudMsg = response.message.length;
                    var Indice = response.message.indexOf("|");    // indice inicial es 0
                    var Longitud = (longitudMsg - Indice) * (-1)
                    var response_Valida = parseInt(response.message.slice(Longitud + 1));

                    $('#lblintValida').empty();
                    $('#lblintValida').append(response_Valida);
                    //Los complementos no actualizan el Contador lblintCantMaxConsumo

                    if (response.type !== '') {
                        if (response.type === 'success') {
                            //var responseMessage = response.message.slice(-0, -2);
                            var responseMessage = response.message.slice(-0, Longitud);

                            var mensaje_ = responseMessage + ' <input type="checkbox" checked="checked" style="border: none; pointer-events: none; background: transparent; outline: none !important;" >';
                            swal({
                                title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
                                text: mensaje_,
                            });

                            $('#btn-seleccionar-insertar-toma-consumo').prop('disabled', true); // $("#step-two").prop("disabled", true)
                            $('#btn-cancelar-toma-consumo-comensal').prop('disabled', false);
                            $('#btn-salir-toma-consumo-comensal').prop('disabled', false);

                            ////////CUANDO EL COMENSAL YA REGISTRÓ LO SELECCIONADO  //jueves11.03.21 comentado
                            var btn = document.createElement("button");
                            var y = document.createTextNode("REGISTRADO");
                            btn.style.color = '#fff';
                            btn.disabled;
                            btn.style.background = "#1abb9c";
                            btn.appendChild(y);
                            btn.className = 'btn_registrado';

                            //Arreglo "Selec" de uso interno
                            //----------------------------------------------------
                            console.log(SelecSC);
                            var Cont = 1;
                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === _intIdServicio; var index = SelecSC.findIndex(FuncionArray);
                            console.log(index);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === _intIdServicio; }
                                console.log(SelecSC.find(es).Contador);
                                Cont = SelecSC.find(es).Contador + 1
                                SelecSC.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            // Añadir Servicio Seleccionado al arreglo
                            class General {
                                constructor(IntId1, Contador) {
                                    this.IntId1 = IntId1 //almacena el IdEmpresa
                                    this.Contador = Contador //Descripcion de la Empresa
                                }
                            }
                            //if (Cont>1)
                            SelecSC.push({ IntId1: _intIdServicio, Contador: Cont })
                            console.log(SelecSC);

                            //Utilizando una funcion para deshabilitar todos los botones 'Agregar':
                            deshabilitarBtnAgregarSC(_intIdServicio, this_, response_Valida, 1)

                            //Carrito Complementarios 20.03.2021
                            var Cantidad = parseInt(CantTotalSC);
                            var Total = 0;
                 
                            Cantidad += 1;
                            Total = parseFloat(monCostoServ_p) + parseFloat(TotalSC);

                            CantTotalSC = Cantidad;
                            TotalSC = parseFloat(Total).toFixed(2);

                            $('#lblCantServC').empty();
                            $('#SplblCantServC').empty();

                            if (Cantidad == 1) {
                                $('#lblCantServC').append(CantTotalSC.toString() + " Complemento Agregado");
                            } else {
                                $('#lblCantServC').append(CantTotalSC.toString() + " Complementos Agregados");
                            }
                            
                            $('#SplblCantServC').append(CantTotalSC.toString());
                            $('#lblTotalServC').empty();
                            $('#lblTotalServC').append(Simb_ + " " + TotalSC.toString());

                            //Ampliar Tiempo de Cierre.
                            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores

                        } else {  //Cuando el servicio ya no esta disponible: se terminó ese menú,
                            if (response.type === 'error') {
                                var mensaje_ = '<span style="color:#00c292; font-weight: bold; font-size:16px;">' + response.message + '</span>';

                                swal({
                                    title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
                                    text: mensaje_,
                                });

                            } else { }

                        }

                    }
                }).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
        }
        else {
            swal("Cancelled", "", "error");
        }
    });
}

//===============================================================================================
//=============================== BOTON ANULAR(eliminar) un Servicio Registrado ================= eliminar toma de consumo
//===============================================================================================
function BotonDeshacerServicioRegistrado(this_, intIdServicio_a, monCostoServ_p, Simb_) {
    validarSession()//AÑADIDO 07.04.2021
    swal({
        title: "Anular Consumo",
        text: "¿Está Seguro que desea Anular el Servicio Consumido?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí",
        cancelButtonText: "No",
        allowOutsideClick: false, //añadido 25/03/2021
        //closeOnClickOutside: false,//añadido 25/03/2021
        //closeOnEsc: false,//añadido 25/03/2021
    }).then(function (isConfirm) {
        if (isConfirm) {
            var intIdAsistencia_ = $('#lbl_intIdAsistencia').text();
            var intIdServicio_ = intIdServicio_a;

            var SesionMovi = {
                IntIdMenu: 'M0314',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Personal/EliminarAnularServicioRegistrado',//EliminarTomaConsumo
                { objSession: SesionMovi, intIdAsistencia: intIdAsistencia_, intIdServicio: intIdServicio_ , tipo: 'S'},
                (response) => {
                    //jueves11.03 HG
                   // var response_valida = parseInt(response.message.slice(-1));
                   // var responseMessage = response.message.slice(-0, -2);

                    var longitudMsg = response.message.length;
                    var Indice = response.message.indexOf("|");    // indice inicial es 0
                    var Longitud = (longitudMsg - Indice) * (-1)
                    var response_Valida = parseInt(response.message.slice(Longitud + 1));
                    var responseMessage = response.message.slice(-0, Longitud);

                    //Actualizando el contador
                    $('#lblintCantMaxConsumo').empty();
                    $('#lblintCantMaxConsumo').append(response_Valida);

                    if (response.type !== '') {
                        var tipo = 'ANULADO';

                        //REGISTRO NO SE PUDO ELIMINAR
                        if (response.type === 'error') {
                            tipo = 'CONSUMO NO ANULABLE';

                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === intIdServicio_a;
                            var index = Selec.findIndex(FuncionArray);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === intIdServicio_a; }
                                Cont = 0
                                Selec.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            //QUITAR EL BOTÓN ANULAR Y COLOCAR UN ESTADO
                            deshabilitarBtnAnular(this_, intIdServicio_a, Cont);
                            habEstadoAtendido(this_, intIdServicio_a, Cont);
                        }
                        else if (response.type === 'success') {
                            //Arreglo "Selec" de uso interno
                            //----------------------------------------------------
                            console.log(Selec);
                            var Cont = 1;
                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === intIdServicio_a;
                            var index = Selec.findIndex(FuncionArray);
                            console.log(index);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === intIdServicio_a; }
                                console.log(Selec.find(es).Contador);
                                Cont = Selec.find(es).Contador - 1
                                Selec.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            if (Cont > 0) {
                                // Añadir Servicio Seleccionado al arreglo pero reducido en una unidad.
                                class General {
                                    constructor(IntId1, Contador) {
                                        this.IntId1 = IntId1 //almacena el IdEmpresa
                                        this.Contador = Contador //Descripcion de la Empresa
                                    }
                                }
                                //if (Cont>1)
                                Selec.push({ IntId1: intIdServicio_a, Contador: Cont })
                                console.log(Selec);
                            } else {
                                deshabilitarBtnAnular(this_, intIdServicio_a, Cont);
                            }

                            deshabilitarBtnSelecionar(intIdServicio_a, this_, response_Valida, 0)

                            //Carrito Servicios 20.03.2021
                            var Cantidad = parseInt(CantTotalS);
                            var Total = 0;

                            Cantidad -= 1;
                            Total = parseFloat(TotalS) - parseFloat(monCostoServ_p);

                            if (Cantidad < 0) {
                                CantTotalS = ""; //para no permitir negativos
                                TotalS = "";//para no permitir negativos
                            } else {
                                CantTotalS = Cantidad;
                                TotalS = parseFloat(Total).toFixed(2);
                            }

                            $('#lblCantServ').empty();
                            $('#SplblCantServ').empty();

                            if (CantTotalS == "") {
                                $('#lblCantServ').append("");
                                $('#SplblCantServ').append("");
                            } else {

                                if (Cantidad == 1) {
                                    $('#lblCantServ').append(CantTotalS.toString() + " Servicio Seleccionado");
                                } else {
                                    $('#lblCantServ').append(CantTotalS.toString() + " Servicios Seleccionados");
                                }
                                
                                $('#SplblCantServ').append(CantTotalS.toString());
                            }

                            $('#lblTotalServ').empty();
                            $('#lblTotalServ').append(Simb_ + " " + TotalS.toString());

                            //Actualizar el Máximo de Consumo 20.03.2021
                            var UltMax = parseInt($('#lblintCantMaxConsumo').text()) + 1;
                            //$('#lblintCantMaxConsumo').empty(); //COMENTADO 07.04.2021
                            //$('#lblintCantMaxConsumo').append(UltMax);//COMENTADO 07.04.2021

                            //Ampliar Tiempo de Cierre.
                            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores
                            //$('#start').click();
                            //$('#reset').click();
                        }
                        swal(tipo, responseMessage, response.type);
                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });

        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function fnAnularComplemento(this_, intIdServicio_a, monCostoServ_p, Simb_) {
    validarSession()//AÑADIDO 07.04.2021
    swal({
        title: "Anular Consumo",
        text: "¿Está Seguro que desea Anular el Complemento?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí",
        cancelButtonText: "No",
        allowOutsideClick: false, //añadido 25/03/2021
    }).then(function (isConfirm) {
        if (isConfirm) {
            var intIdAsistencia_ = $('#lbl_intIdAsistencia').text();
            var intIdServicio_ = intIdServicio_a;

            var SesionMovi = {
                IntIdMenu: 'M0314',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Personal/EliminarAnularServicioRegistrado',//EliminarTomaConsumo
                { objSession: SesionMovi, intIdAsistencia: intIdAsistencia_, intIdServicio: intIdServicio_, tipo: 'C' },
                (response) => {
                    //var response_valida = parseInt(response.message.slice(-1));
                    //var responseMessage = response.message.slice(-0, -2);
                    var longitudMsg = response.message.length;
                    var Indice = response.message.indexOf("|");    // indice inicial es 0
                    var Longitud = (longitudMsg - Indice) * (-1)
                    var response_Valida = parseInt(response.message.slice(Longitud + 1));
                    var responseMessage = response.message.slice(-0, Longitud);

                    if (response.type !== '') {
                        var tipo = 'ANULADO';

                        //REGISTRO NO SE PUDO ELIMINAR
                        if (response.type === 'error') {
                            tipo = 'CONSUMO NO ANULABLE';

                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === intIdServicio_a;
                            var index = SelecSC.findIndex(FuncionArray);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === intIdServicio_a; }
                                Cont = 0
                                SelecSC.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            //QUITAR EL BOTÓN ANULAR Y COLOCAR UN ESTADO
                            deshabilitarBtnAnularSC(this_, intIdServicio_a, Cont);
                            habEstadoAtendido(this_, intIdServicio_a, Cont);//26.03.2021

                        }
                        else if (response.type === 'success') {
                            //var responseMessage = response.message.slice(-0, -2);//COMENTADO 07.04.2021

                            //Arreglo "Selec" de uso interno
                            //----------------------------------------------------
                            console.log(SelecSC);
                            var Cont = 1;
                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === intIdServicio_a;
                            var index = SelecSC.findIndex(FuncionArray);
                            console.log(index);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === intIdServicio_a; }
                                console.log(SelecSC.find(es).Contador);
                                Cont = SelecSC.find(es).Contador - 1
                                SelecSC.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            if (Cont > 0) {
                                // Añadir Servicio Seleccionado al arreglo pero reducido en una unidad.
                                class General {
                                    constructor(IntId1, Contador) {
                                        this.IntId1 = IntId1 //almacena el IdEmpresa
                                        this.Contador = Contador //Descripcion de la Empresa
                                    }
                                }
                                //if (Cont>1)
                                SelecSC.push({ IntId1: intIdServicio_a, Contador: Cont })
                                console.log(SelecSC);
                            } else {
                                deshabilitarBtnAnularSC(this_, intIdServicio_a, Cont);
                            }

                            deshabilitarBtnAgregarSC(intIdServicio_a, this_, response_Valida, 0)

                            //Carrito Complementos 20.03.2021
                            var Cantidad = parseInt(CantTotalSC);
                            var Total = 0;

                            Cantidad -= 1;
                            Total = parseFloat(TotalSC) - parseFloat(monCostoServ_p);

                            if (Cantidad < 0) {
                                CantTotalSC = ""; //para no permitir negativos
                                TotalSC = "";//para no permitir negativos
                            } else {
                                CantTotalSC = Cantidad;
                                TotalSC = parseFloat(Total).toFixed(2);
                            }

                            $('#lblCantServC').empty();
                            $('#SplblCantServC').empty();

                            if (CantTotalSC == "") {
                                $('#lblCantServC').append("");
                                $('#SplblCantServC').append("");
                            } else {

                                if (Cantidad == 1) {
                                    $('#lblCantServC').append(CantTotalSC.toString() + " Complemento Agregado");
                                } else {
                                    $('#lblCantServC').append(CantTotalSC.toString() + " Complementos Agregados");
                                }
                               
                                $('#SplblCantServC').append(CantTotalSC.toString());
                            }
                            $('#lblTotalServC').empty();
                            $('#lblTotalServC').append(Simb_ + " " + TotalSC.toString());

                            //Ampliar Tiempo de Cierre.
                            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores
                            //$('#start').click();
                            //$('#reset').click();
                        }

                        swal(tipo, responseMessage, response.type);

                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });

        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
            //AQUI SE DEBERIA LLAMAR A LA PANTALLA MODO ESPERA
        }

    });

}


























/**------------------------------------------------------*//*ln_37945_all*/
/**30. Mantenimiento Gestión de Consumos (desde sisfood) */
/**------------------------------------------------------*//*ln_00000_all*/
/*================================================================================================
============================ MANTENIMIENTO GESTION DE CONSUMO ====================================
==================================================================================================
*/

var ConfiImpr;
var _varTablaGestionConsumo;

function getDateRangePickerConsumo() {
    const idRange = ".rangedatepickergeneral";
    const fechaInicio = $(idRange).data('daterangepicker').startDate.format('DD/MM/YYYY');
    const fechaFin = $(idRange).data('daterangepicker').endDate.format('DD/MM/YYYY');
    return { fInicio: fechaInicio, fFin: fechaFin }
}

//FILTRO RANGO DE FECHAS
$('.rangedatepickergeneral').on('apply.daterangepicker', function (ev, picker) {
    const date = getDateRangePickerConsumo();
    TablaGestionConsumo(date.fInicio, date.fFin)
});

function CombosFiltros() {
    validarSession();//AÑADIDO 22.04.2021 HG
    //---------------------------COMBO EMPRESA 01
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGPERSONAL', intIdFiltroGrupo: 0, strGrupo: 'EMPRESA', strSubGrupo: '' }, //modificado 22.03.2021
        (response) => {
            $('#intIdEmpCombo').empty();
            $('#intIdEmpCombo').append('<option value="0" selected>Todos</option>');

            response.forEach(element => {
                $('#intIdEmpCombo').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

    //---------------------------COMBO TIPO SERVICIO(Desayuno, Almuerzo, Cena)
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR_FILTRO', strSubGrupo: 'TIPOSERV' }, // HG 13.03.21 //modificado 12.04.2021
        (response) => {
            $('#intTipoServCombo').empty();
            $('#intTipoServCombo').append('<option value="0">Todos</option>');
            response.forEach(element => {
                $('#intTipoServCombo').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });

        });

    //Configuración de Impresión
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post( 
        '/Personal/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_IMPR_TICKET_COMEDOR',
        },
        response => {
            ConfiImpr = response.strValorConfi;
            //RESULTADO: El valor está expresado en Si=1 y No=0.
        })
}

//FILTRO INPUT BUSCAR
$('#strDesInput').keyup(function () {
    ejecutarTablaConParamFechas();
});

//FILTRO ESTADO
$('#boolEstadoCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//FILTRO SERVICIOS
$('#intTipoServCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//FILTRO MENU
$('#intClaseCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//FILTRO EMPRESA
$('#intIdEmpCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//FILTRO MARCADOR
$('#intMarcadorCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//===============================================================================================
//=================================== FUNCION TablaGestionConsumos() ============================
//===============================================================================================

//let dataCheck = [];
let dataConsumoGlobal; //añadido 09.04.2021
let dataConsumoGlobal_tmp;
var responseFiltrado;
function TablaGestionConsumo(filtrojer_ini_var = null, filtrojer_fin_var = null) {
    validarSession();//AÑADIDO 22.04.2021 HG
    var SesionMovi = {
        IntIdMenu: 'M0315',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }
    let filtroFech_ini = filtrojer_ini_var ? filtrojer_ini_var : null;//filtro_ini ? filtro_ini : null;
    let filtroFech_fin = filtrojer_fin_var ? filtrojer_fin_var : null;//filtro_fin ? filtro_fin : null;
    var descipcionFiltro = $('#strDesInput').val();
    var boolEstadoFiltro = $('#boolEstadoCombo  option:selected').val(); //FILRO ESTADO
    var intTipoServFiltro = $('#intTipoServCombo option:selected').val(); //FILRO TIPO SERVICIO
    //var intTipoMenuFiltro = $('#intTipoMenuCombo option:selected').val(); //FILRO TIPO MENU
    var intTipoMenuFiltro = $('#intClaseCombo option:selected').val(); //FILTRO CLASE DE SERVICIO
    var intIdEmpFiltro = $('#intIdEmpCombo    option:selected').val(); //FILRO EMPRESA
    var intIdMarFiltro = $('#intMarcadorCombo option:selected').val(); //FILRO MARCADOR 

    $.post(
        '/Personal/GetTablaGestionConsumo',
        {
            objSession: SesionMovi,
            dttFiltroFchI: filtroFech_ini,
            dttFiltroFchF: filtroFech_fin,
            strDescripcion: descipcionFiltro,
            intConsumido: boolEstadoFiltro,
            intTipoServ: intTipoServFiltro,
            intTipoMenu: intTipoMenuFiltro,
            IntIdEmp: intIdEmpFiltro,
            intIdMarcador: intIdMarFiltro
        },
        (response) => {

            responseFiltrado = [];
             responseFiltrado = response.filter(function (e) {
                return e.bitFlConsumido == 0;
            });

            //dataConsumoGlobal = responseFiltrado;
            dataConsumoGlobal_tmp = response;

            if (typeof _varTablaGestionConsumo !== 'undefined') {
                _varTablaGestionConsumo.destroy();
            }
            _varTablaGestionConsumo = $('#tabla-gestion-consumo').DataTable({
                data: response,
                columns: [
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {

                            let intIdConsumo = item.intIdConsumo;
                            let bitFlConsumido = item.bitFlConsumido;

                            if (bitFlConsumido == 0) {
                                return `<input type="checkbox" 
                                           class="ClassChecksSolicitados"  
                                           id="Chck${intIdConsumo}"
                                           data_intId="${intIdConsumo}"
                                           data_bit="${bitFlConsumido}" 
                                           onChange="CheckedItemDeTablaConsumo(${intIdConsumo}, ${bitFlConsumido})"                                           
                                        >`;
                            }

                            if (bitFlConsumido == 1 || bitFlConsumido == 2) {
                                return '<span class="ClassChecksConsumidos"   ></span>';
                            }
                        }
                    },
                    {
                        data: 'strFotocheck',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' style="background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;  " dataidServ= "${intIdConsumo}" >` + data + `</span>`;
                        }
                    },
                    {
                        data: 'strNombresCompletos',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' style="background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;  " dataidServ= "${intIdConsumo}" >` + data + `</span>`;
                        }
                    },
                    {
                        data: 'strNumDoc',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' style="background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;  " dataidServ= "${intIdConsumo}" >` + data + `</span>`;
                        }
                    },
                    {
                        data: 'strDescripcion',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' style="background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;  " dataidServ= "${intIdConsumo}" >` + data + `</span>`;
                        }
                    }, // TIPO SERVICIO
                    {
                        data: 'strCantidad', //'strDesTipMenu'
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            let data_ = data //.slice(0,3);
                            return `<span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' 
                                          style      = "background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;" 
                                          dataidServ = "${intIdConsumo}" >` + data_ + `</span>`;
                        }
                    }, // TIPO MENU
                    {
                        data: 'bitFlConsumido',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            if (data == 0) {
                                return `<center><span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' class="badge bg-orange" dataidServ = "${intIdConsumo}" >SOLICITADO</span></center>`;
                            }

                            if (data == 1) {
                                return `<center><span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' class="badge bg-green" dataidServ = "${intIdConsumo}" >CONSUMIDO</span></center>`;
                            }
                            if (data == 2) {
                                return `<center><span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' class="badge bg-red" dataidServ = "${intIdConsumo}" >ANULADO</span></center>`;
                            }
                        }
                    },
                    {
                        data: 'dttFechaHora',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            
                            let fecha_en_YYYYMMDD = data.slice(0, 10); //llega como: '2017-01-10';
                            let hh_mm_ss = data.slice(11, 19);
                            let fecha_en_DDMMYYYY = convertDateFormat(fecha_en_YYYYMMDD); //se invierte a: '10-01-2017';
                            function convertDateFormat(string) {
                                var info = string.split('-');
                                return info[2] + '-' + info[1] + '-' + info[0];//Se mantiene los guiones
                            }
                            return `<span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' 
                                          style      = "background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;" 
                                          dataidServ = "${intIdConsumo}" >` + fecha_en_DDMMYYYY +' '+ hh_mm_ss + `</span>`;//data
                        }
                    }, // FECHA Y HORA(Marca)
                    {
                        data: 'strDesEmp',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' 
                                          style      = "background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;" 
                                          dataidServ = "${intIdConsumo}" >` + data + `</span>`;
                        }
                    }, // EMPRESA
                    {
                        data: 'strDesMarcador',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' 
                                          style      = "background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;" 
                                          dataidServ = "${intIdConsumo}" >` + data + `</span>`;
                        }
                    },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let intIdAsistencia = item.intIdConsumo;
                            let bitFlConsumido = item.bitFlConsumido;
                            let cant = item.intCantidad;
                            let strNombre = '';
                            if (bitFlConsumido == 0) {
                                return `<button class="btn btn-primary btn-xs btn-atender" dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" ><i class="fa fa-check"></i> Atender </button>
                                        <button class="btn btn-danger btn-xs btn-anular"  dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" ><i class="fa fa-trash-o"></i> Anular </button>`;
                            }
                            if (bitFlConsumido == 1) {
                                return `<button class="btn btn-primary btn-xs btn-atender" dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" disabled="true"><i class="fa fa-check"></i> Atender </button>
                                        <button class="btn btn-danger btn-xs btn-anular"  dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" ><i class="fa fa-trash-o"></i> Anular </button> `;
                            }
                            if (bitFlConsumido == 2) {
                                return `<button class="btn btn-primary btn-xs btn-atender" dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" disabled="true"><i class="fa fa-check"></i> Atender </button>
                                        <button class="btn btn-danger btn-xs btn-anular"  dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" disabled="true"><i class="fa fa-trash-o"></i> Anular </button> `;
                            }                            
                        }
                    },
                    { data: 'imgFoto' }  // No se visualizará. Esta como string y solo se usa como ruta
                    ,
                    { data: 'strHorarioAtencion' }  // No se visualizará. AÑADIDO 07.04.2021
                ],

                lengthMenu: [10, 25, 50],
                order: [],//Ordenar esta columna  //order: [1, 'asc'],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [11],//14
                        visible: false,
                        searchable: true
                    },
                ],
                dom: 'lBfrtip',
            });

            var table = $('#tabla-gestion-consumo').DataTable();
            $('#tabla-gestion-consumo tbody').on('click', 'tr', function () {

                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }

            });

            //Linea necesaria para desckheckear cada vez que se carga la tabla
            $('#select_consumos_TODOS').iCheck('uncheck');

            dataConsumoGlobal = [];
            console.log(response.length);

            if (response.length > 0) {
                $("#select_consumos_TODOS").attr("disabled", false)
            } else { $("#select_consumos_TODOS").attr("disabled", true) }

       });
}

//***************************** SELECCIONAR TODO *********************************************************************
$('#select_consumos_TODOS').on('change', function () {
    validarSession();//AÑADIDO 22.04.2021 HG
    var allPagesGc = _varTablaGestionConsumo.cells().nodes();
    //let all_filter = _varTablaGestionConsumo.cells({ order: 'index', search: 'applied' }).nodes();
    let all_filter_ = _varTablaGestionConsumo.cells({ order: 'index', search: 'applied' }).nodes();
    let all_filter = _varTablaGestionConsumo.cells({ order: 'index', search: 'applied' }).nodes().to$().find(':checkbox');

    console.log("Filas: " + _varTablaGestionConsumo.rows().count());

    if ($('#select_consumos_TODOS').is(':checked')) {
        $('#btn-atencion-masiva').attr('disabled', false);

        dataConsumoGlobal = [];
        all_filter.toArray().forEach(x => {
            let ival = $(x).attr('data_intId');
            dataConsumoGlobal.push({ intIdConsumo: ival})
        })

        $(all_filter_).find('input[type="checkbox"]').prop('checked', true);

        $('#lbl_cantChecksAtender').empty();
        $('#lbl_cantChecksAtender').append('<span>' + dataConsumoGlobal.length + '</span>');

    } else {
        dataConsumoGlobal = []; //Se limpia el array
        $('#btn-atencion-masiva').attr('disabled', true);
        $(allPagesGc).find('input[type="checkbox"]').prop('checked', false);
    }

    console.log(dataConsumoGlobal);
    let total = _varTablaGestionConsumo.rows().nodes().length
    let totalFilter = _varTablaGestionConsumo.rows({ order: 'index', search: 'applied' }).nodes().length
    let select = _varTablaGestionConsumo.rows().nodes().to$().find('input:checked').length
    $("#seleccionados").html(select)

});

//***************************** SELECCIONAR UNO X UNO *********************************************************************
function CheckedItemDeTablaConsumo(intIdConsumo_p, bitFlConsumido_p) {
    validarSession();//AÑADIDO 22.04.2021
    if (dataConsumoGlobal_tmp == null) {
        return false;
    }
    console.log("Filas: " + _varTablaGestionConsumo.rows().count());
    console.log(dataConsumoGlobal.length);

    //--------TABLAS--------------
    var allPagesGc = _varTablaGestionConsumo.cells().nodes();
    let all_filter = _varTablaGestionConsumo.cells({ order: 'index', search: 'applied' }).nodes();

    //---------- FILAS-----------------------------------------------------------------------------------------
    let total = _varTablaGestionConsumo.rows().count()
    let totalFilter = _varTablaGestionConsumo.rows({ order: 'index', search: 'applied' }).count()

    //---------------------------------------------------------------------------------------------------
    //let totalSolicitado = responseFiltrado.length;
    let totalSolicitado = allPagesGc.to$().find(':checkbox').length; //solo checkboxes
    //let chk_ = all_filter.rows().nodes().to$().find('input:checked').length
    //let totalSolicitadoFilter = all_filter.rows().nodes().to$().find(':checkbox').length;
    let totalSolicitadoFilter = all_filter.to$().find(':checkbox').length;//solo checkboxes filtrados
    //---------------------------------------------------------------------------------------------------

    if ($('#Chck' + intIdConsumo_p + '').is(':checked') == true) {
        if (dataConsumoGlobal_tmp.find(e => e.intIdConsumo == intIdConsumo_p)) {
            let position = dataConsumoGlobal_tmp.findIndex(e => e.intIdConsumo == intIdConsumo_p);
            if (!isNaN(position)) {
                dataConsumoGlobal.push(dataConsumoGlobal_tmp[position]);
            }
        }
    } else if ($('#Chck' + intIdConsumo_p + '').is(':checked') == false) {
        if (dataConsumoGlobal.find(e => e.intIdConsumo == intIdConsumo_p)) {
            let position = dataConsumoGlobal.findIndex(e => e.intIdConsumo == intIdConsumo_p);
            if (!isNaN(position)) {
                dataConsumoGlobal.splice(position, 1);
            }
        }
    }
    $('#lbl_cantChecksAtender').empty();
    $('#lbl_cantChecksAtender').append('<span>' + dataConsumoGlobal.length + '</span>');

    if (totalSolicitado === total) {
        //Validar que todos los registros de la tabla tienen checkbox
        if (total === totalFilter) {
            //evaluar check todos
            if (dataConsumoGlobal.length == total) {
                $('#select_consumos_TODOS').prop('checked', true);
             }
            if (dataConsumoGlobal.length == 0) {
                $('#select_consumos_TODOS').prop('checked', false);
            }
        }
        else {
            if (dataConsumoGlobal.length == totalFilter) {
                $('#select_consumos_TODOS').prop('checked', true);
            }
            if (dataConsumoGlobal.length == 0) {
                $('#select_consumos_TODOS').prop('checked', false);
            }
        }
    } else {
        //Si hay menos registros con checkbox contarlos.
        if (totalSolicitado === totalSolicitadoFilter) {
            //evaluar check todos
            if (dataConsumoGlobal.length == totalSolicitado) {
                $('#select_consumos_TODOS').prop('checked', true);
            }
            if (dataConsumoGlobal.length == 0) {
                $('#select_consumos_TODOS').prop('checked', false);
              }
        }
        else {
            if (dataConsumoGlobal.length == totalSolicitadoFilter) {
                $('#select_consumos_TODOS').prop('checked', true);
            }
            if (dataConsumoGlobal.length == 0) {
                $('#select_consumos_TODOS').prop('checked', false);
            }
        }

    }

    if (dataConsumoGlobal.length > 0) {
        $('#btn-atencion-masiva').attr('disabled', false);
    } else {
        $('#btn-atencion-masiva').attr('disabled', true);
    }
    //let selectFilter = _tableReporte.rows({ search: 'applied' }).nodes().to$().find('input:checked').length
    let select = _varTablaGestionConsumo.rows().nodes().to$().find('input:checked').length
    $("#seleccionados").html(select)
}

//=============================== BOTON ELIMINAR (Seleccionar Fila) =============================
$('#tabla-gestion-consumo  tbody').on('click', 'tr button.btn-atender', function () {
    validarSession();//AÑADIDO 22.04.2021
    let Id = $(this).attr("dataid")
    let StrDes = $(this).attr("des_data")
    if (!isNaN(Id)) {
        class GeneralGC {
            constructor(intIdConsumo, bitFlConsumido, intCantidad) {
                this.intIdConsumo = intIdConsumo //idConsumo
                this.bitFlConsumido = bitFlConsumido
                this.intCantidad = intCantidad //cantidad
            }
        }
        dataCheckGC.push({ intIdConsumo: Id, bitFlConsumido: 0, intCantidad: 0 })
        console.log(dataCheckGC);
        registrarAtencionIndividual(1, 0)//1:atender,0:viene de la pantalla principal
    }
});

//=============================== BOTON ELIMINAR (Seleccionar Fila) =============================
$('#tabla-gestion-consumo  tbody').on('click', 'tr button.btn-anular', function () {
    validarSession();//AÑADIDO 22.04.2021
    let Id = $(this).attr("dataid")
    let StrDes = $(this).attr("des_data")
    if (!isNaN(Id)) {
        class GeneralGC {
            constructor(intIdConsumo, bitFlConsumido, intCantidad) {
                this.intIdConsumo = intIdConsumo //idConsumo
                this.bitFlConsumido = bitFlConsumido
                this.intCantidad = intCantidad //cantidad
            }
        }
        dataCheckGC.push({ intIdConsumo: Id, bitFlConsumido: 0, intCantidad: 0 })
        console.log(dataCheckGC);
        registrarAtencionIndividual(0, 0)//1:atender,0:viene de la pantalla principal
    }
});

/************************************************************************************************
                                 REGION ACTUALIZACION MASIVA 
*************************************************************************************************/
let catidadCkecked = arrayCheckedConsumos.length; //jueves14.01/7Falta contar
$('#btn-atencion-masiva').on('click', function () {
    validarSession();//AÑADIDO 22.04.2021
    var cantidadActualizar = $('#lbl_cantChecksAtender').text();

    swal({
        title: "ATENCIÓN MASIVA DE CONSUMOS",
        text: "¿Está seguro que desea atender los  " + "<label style='color: #21dcb8; font-weight: bold;'> (" + cantidadActualizar + ") </label>" + " registros seleccionados?", //catidadCkecked 
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, Atender",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            guardarAtencionMasivo();
            //swal("Atendido!", "Los registros fueron actualizados correctamente", "success");
            //AÑADIDO 09.04.2021 para refrescar la Lista principal
            //const date = getDateRangePickerConsumo();
            //TablaGestionConsumo(date.fInicio, date.fFin)
        } else {
            swal("Cancelado", "La operacion fue cancelada : )", "error");
        }
    });

});

function guardarAtencionMasivo() {
    validarSession();//AÑADIDO 22.04.2021
    arrayCheckedConsumos = [];
    arrayCheckedConsumos = dataCheckConsumos.slice();


    var listConsumos = [];   //var listConsumos = ["1081", "1078", "1082"]; //Prueba de datos en duro
    //arrayCheckedConsumos.forEach(element => {
    //    listConsumos.push(element.intIdConsumo)
    //});

    //AÑADIDO 09.04.2021
    dataConsumoGlobal.forEach(element => {
        listConsumos.push(element.intIdConsumo)
    });

    var SesionMovi = {
        IntIdMenu: 'M0315',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/ActualizarGestionMasivoConsumo',
        {
            //ObjConsumo: GestionConsumo 
            listPersonal: listConsumos
            , objSession: SesionMovi
            , intTipoOperacion: 2
        },

        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {

                    //ejecutarTablaConParamFechas(); //comentado 07.04.2021
                    //listado Principal
                    const date = getDateRangePickerConsumo();
                    TablaGestionConsumo(date.fInicio, date.fFin)

                    listConsumos = [];

                    while (listConsumos.length > 0)
                        listConsumos.pop();

                    //limpiar array gestion consumo
                    dataCheckConsumos = [];

                    $('#lblEstado').empty()
                    $('#lblEstado').append('<span style = " color:white; font-size:18px; background-color:#1abb9c;" >Consumido<span>');
                    $('#boton-atender-gestion-consumo-individual').hide()
                    $('#boton-deshacer-gestion-consumo').show();

                    swal({
                        title: "GESTIÓN DE CONSUMO",
                        text: response.message,
                        timer: 3500,
                    });

                }

                else {
                    if (response.type === 'error') {
                        var nomMantemiento = 'Empresa';
                        var campo = 'txt_cod_Empresa';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_error';
                        document.getElementById("txt_cod_Empresa").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }
                    else {

                        swal({
                            title: "GESTIÓN DE CONSUMO",
                            text: 'Consumo No Actualizado',
                            timer: 3500,
                        });
                    }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

}

//===============================================================================================
//FUNCIÓN ENCARGADA DE LA IMPRESIÓN DE TICKETS
function ImprimirTicket_Comedor(SesionMovi, intId_, dataCheckGC, evento_) {
    validarSession();//AÑADIDO 22.04.2021
    $.post(//tipo = 0 : Atención Individual
        '/Personal/Imp_Consumos',
        { objSession: SesionMovi, intIdConsumo: intId_, tipo: evento_, listaConsumoSelects: dataCheckGC },
        (response) => {
            console.log(response.message);
        });
}


//===============================================================================================
//=================================== MODAL GESTION CONSUMO =====================================
//===============================================================================================
var cerrar = document.getElementById('CerrarX');
function mostrarDatosEnModal(this_, idConsumo_, imgFoto_) {
    validarSession();//AÑADIDO 22.04.2021
    var modal = document.getElementById("myModalGC");
    modal.style.display = "block";
    //// Get the button that opens the modal
    //var btn = document.getElementById("myBtn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    //var cerrar = document.getElementById('cerrarModal');
    //var cerrar = document.getElementById('CerrarX');

    //// When the user clicks the button, open the modal
    //btn.onclick = function () {
    //    modal.style.display = "block";
    //}

    // When the user clicks on <span> (x), close the modal
    cerrar.onclick = function () {
        modal.style.display = "none";
        $('#X').show();
        const date = getDateRangePickerConsumo();
        TablaGestionConsumo(date.fInicio, date.fFin)
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            //modal.style.display = "none";
        }
    }

    var lblIdConsumo_ = idConsumo_
    $('#X').hide();
    //===============================================================================================
    //================================== SECCION IMAGEN EMPLEADO ====================================
    //===============================================================================================
    var imgImagenEmpleado = imgFoto_;
    var txtFechaCompleta = $(this_).parents('tr').find('td').eq(7).text();
    var fechaInvertir = txtFechaCompleta.slice(0, 10);////llega como: DD-MM-YY    //Resultado bota en formato YY/MM/DD. Se tiene que invertirlo
    var salidaFechaInvertida = formato(fechaInvertir);
    var salidaFechaInvertida2 = formato2(fechaInvertir.replace('-', '/').replace('-', '/'));
  
    /**
     * Convierte un texto de la forma 2017-01-10 a la forma 10/01/2017
     * @param {string} fechaInvertir Texto de la forma 2017-01-10
     * @return {string} fechaInvertir de la forma  10/01/2017
     */
    function formato(fechaInvertir) {
        return fechaInvertir.replace(/^(\d{4})-(\d{2})-(\d{2})$/g, '$2/$3/$1');//Convirtio de a 
    }

    function formato2(fechaInvertir) {
        return fechaInvertir.replace(/^(\d{4})-(\d{2})-(\d{2})$/g, '$3/$2/$1');//Convirtio de a 
    }


    //INVERTIR PARA LOS DIAS DE LA SEMANA(lun, mart, mierc)
    var fecha_en_DDMMYYYY  = txtFechaCompleta.slice(0, 10);////llega como: DD-MM-YY //---- data.slice(0, 10); //llega como: '2017-01-10';
    var fecha_en_YYYYMMDD = convertDateFormatDias(fecha_en_DDMMYYYY); //se invierte a: '10-01-2017';
    function convertDateFormatDias(string) {
        var info = string.split('-');
        return info[2] + '/' + info[1] + '/' + info[0];//Se mantiene los guiones
    }

    var today = new Date(fecha_en_YYYYMMDD); //Debe estar llegar aquí con el formato: YYYY/MM/DD tipo: 2021/03/09
    //alert(fecha_en_YYYYMMDD);
    var hoy = today.getDay();
    var eldia;//lunes, martes;...
    if (hoy == 0) { eldia = 'Domingo'; }
    if (hoy == 1) { eldia = 'Lunes'; }
    if (hoy == 2) { eldia = 'Martes'; }
    if (hoy == 3) { eldia = 'Miércoles'; }
    if (hoy == 4) { eldia = 'Jueves'; }
    if (hoy == 5) { eldia = 'Viernes'; }
    if (hoy == 6) { eldia = 'Sábado'; }

    var txtHoraMarca = txtFechaCompleta.slice(11, 21);
    //var today = new Date(salidaFechaInvertida); //Debe estar llegar aquí con el formato: MM/DD/YY

    //
    var txtNombreApellido = $(this_).parents('tr').find('td').eq(2).text();
    var txtTipoMenu = 'Menú' + ' ' + $(this_).parents('tr').find('td').eq(5).text();//MENU ECONOMICO
    var txtTipoServicio = $(this_).parents('tr').find('td').eq(4).text();
    var txtEstado = $(this_).parents('tr').find('td').eq(6).text();
    var Hatencion = $(this_).parents('tr').find('td').eq(11).text();
    //alert(txtEstado);
    $('#lblNombreApellido').empty()
    $('#lblTipoMenu').empty()
    $('#lblTipoServicio').empty()
    $('#lblEstado').empty()
    $('#lblHatencion').empty()
    $('#lblDiaFecha').empty()
    $('#lblNombreApellido').append('<span>' + txtNombreApellido + '<span>')
    $('#lblTipoMenu').append('<span>' + ' ' + txtTipoMenu + '<span>')
    var txtTipoServicio_ = txtTipoServicio.toUpperCase();
    $('#lblTipoServicio').append('<span>' + txtTipoServicio_ + '<span>')
    $('#lblDiaFecha').append('<span>' + eldia + ' ' + salidaFechaInvertida2  + '<span>');
    $('#lblHora_spliced').empty();
    $('#lblHora_spliced').append('<span>' + txtHoraMarca + '<span>');
    $('#lblHatencion').append('<span style = "font-size:25px; font-weight: 900; color:#337AB7;">' + Hatencion.toUpperCase() + '<span>');

    if (txtEstado == 'SOLICITADO') {
        $('#lblEstado').append('<span style="font-size:25px; font-weight: 900; color:#990000;">' + txtEstado.toUpperCase() + '<span>')
        $('#boton-atender-gestion-consumo-individual').attr('disabled', false);
        $('#boton-deshacer-gestion-consumo').attr('disabled', false);
        $('#select_GC_TODOS').attr('disabled', false);
        $('#boton-atender-gestion-consumo-individual').show();
    }

    if (txtEstado == 'CONSUMIDO') {
        $('#lblEstado').append('<span style = "font-size:25px; font-weight: 900; color:#337AB7;">' + txtEstado.toUpperCase() + '<span>');
        $('#boton-atender-gestion-consumo-individual').attr('disabled', true);
        $('#boton-deshacer-gestion-consumo').attr('disabled', true);
        $('#select_GC_TODOS').attr('disabled', true);
        //$('#select_GC_TODOS').hide();
    }
    if (txtEstado == 'ANULADO') {
        $('#lblEstado').append('<span style = "font-size:25px; font-weight: 900; color:#3b567d;" >' + txtEstado.toUpperCase() + '<span>');
        $('#boton-atender-gestion-consumo-individual').attr('disabled', true);
        $('#boton-deshacer-gestion-consumo').attr('disabled', true);
        $('#select_GC_TODOS').attr('disabled', true);
        //$('#boton-atender-gestion-consumo-individual').hide()
    }

    $('#lblIdConsumo').empty()
    $('#lblIdConsumo').append('<span id="idConsumoSpan"style = "font-size:40px;" >' + lblIdConsumo_ + '<span>');

    //AÑADIDO 22.03.2021 - LISTAR CONSUMOS POR ASISTENCIA
    ListarConsumosXmodalGC(idConsumo_);
    Imagen_GC(imgFoto_,"GestionConsumo");//añadido 26.03.2021
}
//añadido 26.03.2021
function Imagen_GC(imgFoto_, ventana) {
    validarSession();//AÑADIDO HG 22.04.2021
    var directorio_ = "Empleado";
    if(ventana === "UO"){
        directorio_ = "UnidOrg";
    }

    $.post(
        '/Personal/IMG',
        { img_: imgFoto_, directorio: directorio_},
        (response) => {
            var rutaCompleta = response;
            if (ventana == "GestionConsumo") {
                $('#imagen_empleado_gest_consmo').html('<img src = "' + rutaCompleta + '" style="width:100%; max-width:220px;border-radius:2%;" />');
            }
            if (ventana == "TomaConsumo") {
                $('#contenedor_imagen_empleado').html('<img src = "' + rutaCompleta + '" style="width:100%; max-width:220px;border-radius:2%;"  />');
            }
            if (ventana == "Empleado") {
                $('#VistaPrevia').html('<img id="imgCarga"  src= "' + rutaCompleta + '" class="img-rounded img-logo-empleado"/>');
            }
            if (ventana == "UO") {
                   $('#ViewPreview').html('<img id="imgCarga" src=' + rutaCompleta + ' style="width:100px;height:100px" />');
            }
        }
    )
    
  }

//añadido 22.03.2021--------------------------------------------------------------------------
let dataCheckGC = [];
//let dataGC = [];
let dataCheckGC_tmp;
var _varTablaGC;
let chk_;
function ListarConsumosXmodalGC(intId) {
    validarSession();//AÑADIDO 22.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTablaGC',
        { objSession: SesionMovi, intId: intId },
        (response) => {
            console.log(response);
            //nuevo
            dataCheckGC_tmp = response;

            if (typeof _varTablaGC !== 'undefined') {
                _varTablaGC.destroy();
            }
            _varTablaGC = $('#DataTableConsumoDet').DataTable({
                data: response,
                columns: [
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let bitFlConsumido = item.bitFlConsumido;
                            let FlCancelado = item.FlCancelado;
                            let cant = item.intCantidad;
                            //No Anulado o Solicitado
                            if (bitFlConsumido == 0) {
                                if (FlCancelado == 0) {
                                    return `<input type="checkbox" 
                                           class="ClassChecksPendiente"  
                                           id="Chck${intIdConsumo}"
                                           data_intId="${intIdConsumo}" 
                                           onChange="CheckedItemDeTablaGC(${intIdConsumo}, ${bitFlConsumido}, ${cant}, ${intId})">`;//modificado 23.03.2021
                                }
                                else {
                                    return `<span> </span>`;//modificado 25.03.2021
                                }
                            }
                            if (bitFlConsumido == 1) {
                                return `<span> </span>`;//modificado 25.03.2021
                            }
                        }
                    },
                    { data: 'intIdConsumo' },
                    { data: 'intCantidad' },
                    { data: 'strDescripcion' },
                    { data: 'strClase' },
                    { data: 'strPrecio' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdC = item.intIdConsumo;
                            let IntCant = item.intCantidad;
                            let strDes = item.strDescripcion;
                            let bitFlConsumido = item.bitFlConsumido;
                            let FlCancelado = item.FlCancelado;
                            let clase = item.strClase;
                            if (FlCancelado == 1) {
                                return '<center><span class="badge bg-red"> ANULADO </span></center>';
                            } else {
                                if (bitFlConsumido == 0) {
                                    return '<center><span class="badge bg-orange" > SOLICITADO </span></center>';
                                }
                                if (bitFlConsumido == 1) {
                                    return '<center><span class="badge bg-green"> CONSUMIDO </span ></center>';
                                }
                            }

                        }
                    }
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [1],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });

            //*****************************************
            //Linea necesaria para desckheckear cada vez que se carga la tabla
            $('#select_GC_TODOS').iCheck('uncheck');
            var allPagesTodasLasCeldasGC = _varTablaGC.cells().nodes(); //":contains('SOLICITADO')"
            //******************************************

            let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes().to$().find(':checkbox');
            if (all_filter.length > 0) {
                $("#select_GC_TODOS").attr("disabled", false)
                $('#boton-atender-gestion-consumo-individual').attr('disabled', false);
                $('#boton-deshacer-gestion-consumo').attr('disabled', false);

            } else {
                $("#select_GC_TODOS").attr("disabled", true)
                $('#boton-atender-gestion-consumo-individual').attr('disabled', true);
                $('#boton-deshacer-gestion-consumo').attr('disabled', true);
            }

            dataCheckGC = [];
            console.log(response.length);
        });

}

//***************************** SELECCIONAR TODOS ******************************************************************
$('#select_GC_TODOS').on('change', function () {
    validarSession();//AÑADIDO 22.04.2021
    var allPagesGc = _varTablaGC.cells().nodes();
    //let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes();
    let all_filter_ = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes();
    let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes().to$().find(':checkbox');

    console.log("Filas: " + _varTablaGestionConsumo.rows().count());

    if ($('#select_GC_TODOS').is(':checked')) {
        //FILTRADO OPCION B
        dataCheckGC = [];
        all_filter.toArray().forEach(x => {
            let ival = $(x).attr('data_intId');
            dataCheckGC.push({ intIdConsumo: ival })
        })

        $(all_filter_).find('input[type="checkbox"]').prop('checked', true);

    } else {
        dataCheckGC = []; //Se limpia el array
        $(allPagesGc).find('input[type="checkbox"]').prop('checked', false);
    }

    console.log(dataCheckGC);
    let total = _varTablaGC.rows().nodes().length
    let totalFilter = _varTablaGC.rows({ order: 'index', search: 'applied' }).nodes().length
    let select = _varTablaGC.rows().nodes().to$().find('input:checked').length
    $("#seleccionadosGC").html(select)
});

//============================== SELECCIONAR UNO X UNO =============================================================
function CheckedItemDeTablaGC(intIdConsumo_p, _bitFlConsumido, _cant, intId) {
    validarSession();//AÑADIDO 22.04.2021
    class GeneralGC {
        constructor(intIdConsumo, bitFlConsumido, intCantidad) {
            this.intIdConsumo = intIdConsumo //idConsumo
            this.bitFlConsumido = bitFlConsumido
            this.intCantidad = intCantidad //cantidad
        }
    }
    //dataCheckGC.push({ intIdConsumo: _intIdConsumo, bitFlConsumido: _bitFlConsumido, intCantidad: _cant })//ENVIAR EL IDASISTENCIA EN LUGAR DE LA CANTIDAD

    //--------TABLAS--------------
    var allPagesGc = _varTablaGC.cells().nodes();
    let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes();

    //---------- FILAS-----------------------------------------------------------------------------------------
    let total = _varTablaGC.rows().count()
    let totalFilter = _varTablaGC.rows({ order: 'index', search: 'applied' }).count()

    //---------------------------------------------------------------------------------------------------
    let totalSolicitado = allPagesGc.to$().find(':checkbox').length; //solo checkboxes
    let totalSolicitadoFilter = all_filter.to$().find(':checkbox').length;//solo checkboxes filtrados
    //---------------------------------------------------------------------------------------------------


    if ($('#Chck' + intIdConsumo_p + '').is(':checked') == true) {
        if (dataCheckGC_tmp.find(e => e.intIdConsumo == intIdConsumo_p)) {
            let position = dataCheckGC_tmp.findIndex(e => e.intIdConsumo == intIdConsumo_p);
            if (!isNaN(position)) {
                //dataCheckGC.push(dataCheckGC_tmp[position]);
                dataCheckGC.push({ intIdConsumo: intIdConsumo_p, bitFlConsumido: _bitFlConsumido, intCantidad: _cant })//ENVIAR EL IDASISTENCIA EN LUGAR DE LA CANTIDAD
            }
        }
    } else if ($('#Chck' + intIdConsumo_p + '').is(':checked') == false) {
        if (dataCheckGC.find(e => e.intIdConsumo == intIdConsumo_p)) {
            let position = dataCheckGC.findIndex(e => e.intIdConsumo == intIdConsumo_p);
            if (!isNaN(position)) {
                dataCheckGC.splice(position, 1);
            }
        }
    }

    console.log(dataCheckGC);

    if (totalSolicitado === total) {
        //Validar que todos los registros de la tabla tienen checkbox
        if (total === totalFilter) {
            //evaluar check todos
            if (dataCheckGC.length == total) {
                $('#select_GC_TODOS').prop('checked', true);
            }
            if (dataCheckGC.length == 0) {
                $('#select_GC_TODOS').prop('checked', false);
            }
        }
        else {
            if (dataCheckGC.length == totalFilter) {
                $('#select_GC_TODOS').prop('checked', true);
            }
            if (dataCheckGC.length == 0) {
                $('#select_GC_TODOS').prop('checked', false);
            }
        }
    } else {
        //Si hay menos registros con checkbox contarlos.
        if (totalSolicitado === totalSolicitadoFilter) {
            //evaluar check todos
            if (dataCheckGC.length == totalSolicitado) {
                $('#select_GC_TODOS').prop('checked', true);
            }
            if (dataCheckGC.length == 0) {
                $('#select_GC_TODOS').prop('checked', false);
            }
        }
        else {
            if (dataCheckGC.length == totalSolicitadoFilter) {
                $('#select_GC_TODOS').prop('checked', true);
            }
            if (dataCheckGC.length == 0) {
                $('#select_GC_TODOS').prop('checked', false);
            }
        }

    }

    //let selectFilter = _tableReporte.rows({ search: 'applied' }).nodes().to$().find('input:checked').length
    let select = _varTablaGC.rows().nodes().to$().find('input:checked').length
    $("#seleccionadosGC").html(select)

    //let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes(); 

    //let total = _varTablaGC.rows().count()
    //let totalFilter = all_filter.rows().count()
    //let chk_ = all_filter.rows().nodes().to$().find(':checkbox').length;
   

    ////Validar que todos los registros de la tabla tienen checkbox
    //if (chk_ === totalFilter) {
    //    if (total === totalFilter) {
    //        //evaluar check todos
    //        if (dataCheckGC.length == total) {
    //            $('#select_GC_TODOS').prop('checked', true);
    //        }
    //        if (dataCheckGC.length == 0) {
    //            $('#select_GC_TODOS').prop('checked', false);
    //        }
    //    }
    //    else {
    //        if (dataCheckGC.length == totalFilter) {
    //            $('#select_GC_TODOS').prop('checked', true);
    //        }
    //        if (dataCheckGC.length == 0) {
    //            $('#select_GC_TODOS').prop('checked', false);
    //        }
    //    }
    //} else {
    //    if (totalFilter === chk_) {
    //        //evaluar check todos
    //        if (dataCheckGC.length == totalFilter) {
    //            $('#select_GC_TODOS').prop('checked', true);
    //        }
    //        if (dataCheckGC.length == 0) {
    //            $('#select_GC_TODOS').prop('checked', false);
    //        }
    //    }
    //    else {
    //        if (dataCheckGC.length == chk_) {
    //            $('#select_GC_TODOS').prop('checked', true);
    //        }
    //        if (dataCheckGC.length == 0) {
    //            $('#select_GC_TODOS').prop('checked', false);
    //        }
    //    }
    //}



}

//=================================== ATENCION INDIVIDUAL ==================================== ATENCION
function registrarAtencionIndividual(bit_, evento_) {
    validarSession();//AÑADIDO 22.04.2021
    //Si evento_ = 0 viene de Lista principal, evento_=1 viene del modal
    var idConsumo_v = $('#lblIdConsumo').text();
    if (bit_ === 1) {
        var bitFlConsumido_ = 1;//ESTADO  atendido/consumido=1
        var strMsg_ = "Atender Consumo";
    }
    if (bit_ === 0) {
        var bitFlConsumido_ = 0;//Estado cancelado
        var strMsg_ = "Anular Consumo";
    }

    var GestionConsumo = {
        intIdConsumo: idConsumo_v,
        bitFlConsumido: bitFlConsumido_,
    }

    var SesionMovi = {
        IntIdMenu: 'M0315',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    if (dataCheckGC.length > 0) {
        if (bit_ === 0) {
            if (dataCheckGC.length > 1) {
                var Msge = "¿Está seguro de anular los Consumos seleccionados?";
            } else {
                var Msge = "¿Está seguro de anular el Consumo seleccionado?";
            }

            swal({
                title: "Anular Consumo",
                text: Msge,
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, anular",
                cancelButtonText: "No, cancelar",
            }).then(function (isConfirm) {
                if (isConfirm) {
                    $.post(
                        '/Personal/UpConsumoGC',
                        { ObjConsumo: GestionConsumo, intTipoOperacion: 2, listaConsumoSelects: dataCheckGC, bitFlConsumido: bit_, evento: evento_ },
                        (response) => {
                            console.log(response);
                            if (response.type !== '') {
                                if (response.type === 'success') {
                                    swal({
                                        title: strMsg_,
                                        text: response.message,
                                        timer: 3500,
                                    });

                                    dataCheckGC.length = 0; //vaciando array luego de grabar. 23.03.2021
                                    if (evento_ == 1) {
                                        //listar detalle en Modal
                                        ListarConsumosXmodalGC(idConsumo_v);
                                    }
                                    if (evento_ == 0) {
                                        //listado Principal
                                        const date = getDateRangePickerConsumo();
                                        TablaGestionConsumo(date.fInicio, date.fFin)
                                    }
                                } else {
                                    new PNotify({
                                        title: strMsg_,
                                        text: response.message,
                                        type: 'info',
                                        delay: 3000,
                                        styling: 'bootstrap3'
                                    });
                                }

                            }
                        }
                    ).fail(function (result) {
                        alert('ERROR ' + result.status + ' ' + result.statusText);
                    });
                } else {
                    swal("Cancelado", "La Operación fue cancelada", "error");
                }
            });
        } else {
            $.post(
                '/Personal/UpConsumoGC',
                { ObjConsumo: GestionConsumo, intTipoOperacion: 2, listaConsumoSelects: dataCheckGC, bitFlConsumido: bit_, evento: evento_ },
                (response) => {
                    console.log(response);
                    if (response.type !== '') {
                        if (response.type === 'success') {
                            swal({
                                title: strMsg_,
                                text: response.message,
                                timer: 3500,
                            });
                            //IMPRIMIR SI LA CONFIGURACION: Generar Ticket desde Atención de Concesionaria
                            console.log("Configuracion de Impresora:");
                            console.log(ConfiImpr);
                            if (ConfiImpr == 3) {
                                ImprimirTicket_Comedor(SesionMovi, 0, dataCheckGC, evento_)
                            }

                            if (evento_ == 1) {
                                //listar detalle en Modal
                                ListarConsumosXmodalGC(idConsumo_v);
                            }
                            if (evento_ == 0) {
                                //listado Principal
                                const date = getDateRangePickerConsumo();
                                TablaGestionConsumo(date.fInicio, date.fFin)
                            }
                            dataCheckGC.length = 0; //vaciando array luego de grabar. 23.03.2021
                        } else {
                            new PNotify({
                                title: strMsg_,
                                text: response.message,
                                type: 'info',
                                delay: 3000,
                                styling: 'bootstrap3'
                            });
                        }
                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });
        }
    } else {
        new PNotify({
            title: strMsg_,
            text: "Seleccione al menos un consumo",
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3'
        });
    }
}
//=============================================================================================

//=============================== otros =============================
$('#btnExportPDF').on('click', function () {
    $('.buttonsToHide_pdfHtml5').click();
});

$('#btnExportEXCEL').on('click', function () {
    $('.buttonsToHide_excel').click();
});
/************************************************************************************************
                                 GESTION DE CONSUMO - FIN
*************************************************************************************************/







/************************************************************************************************
               MINI MANTENIMIENTO TIPOS - PARA EL MANTENIMIENTO SERVICIOS
*************************************************************************************************/
//===============================================================================================
//===================================== TablaTipoGrupo() ========================================

$('#tabla-listar-tipo-grupo-icono, #tabla-listar-tipo-grupo-icono-palabra').on('click', function () {
   listarTablaTipoGrupo();
});


var _varTablaTipoGrupo;
function listarTablaTipoGrupo() {
    validarSession();//AÑADIDO HG 22.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/GetTablaTipo',
        { objSession: SesionMovi, strGrupo: 'COMEDOR', strSubGrupo: '', IntIdTipo: 0 },
        (response) => {

            if (typeof _varTablaTipoGrupo !== 'undefined') {
                _varTablaTipoGrupo.destroy();
            }
            _varTablaTipoGrupo = $('#DataTableTipoGrupo').DataTable({
                data: response,
                columns: [
                    { data: 'IntIdTipo' },
                    { data: 'strCoTipo' },
                    { data: 'strDeTipo' },//------DESCRIPCION
                    { data: 'strAbreviatura' },//---DESCIPCION
                    { data: 'DeSubGrupo' },
                    {
                        data: 'strDesEmp',
                        render: function (data, type, row) {

                            var dato = 0;

                            if (data === 'TIPOMENU') {

                                 dato = 2
                            }
                            if (data === 'TIPOSERV') {

                                 dato = 1
                            }
                            return '<span style="color:blue;">' + dato + '</span>';
                        }

                    },

                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdTipoGrupo = item.IntIdTipo;
                            let strDesTipo = item.strDeTipo;
                            return `<button class="btn btn-success btn-xs btn-edit"   dataid="${IntIdTipoGrupo}" ><i class="fa fa-pencil"></i> Editar </button> 
                                    <button class="btn btn-primary btn-xs btn-delete" dataid="${IntIdTipoGrupo}" des_data="${strDesTipo}" data="${item}" ><i class="fa fa-trash-o"></i> Eliminar </button>`;
                        }
                    }


                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [0],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [3],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });
        });

}

//===============================================================================================
//=============================== BOTON ELIMINAR (Seleccionar Fila) =============================
$('#DataTableTipoGrupo  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    let IdTipoGrupo = $(this).attr("dataid")
    let StrDesTipo  = $(this).attr("des_data")
    if (!isNaN(IdTipoGrupo)) {

        intentEliminarTipoGrupo(IdTipoGrupo, StrDesTipo);
    }

});

//===============================================================================================
//=============================== FUNCION intentEliminarTipoGrupo() =============================
function intentEliminarTipoGrupo(IdTipoGrupo, StrDesTipo) {
    swal({
        title: "Eliminar Tipo",
        text: "¿Está seguro de eliminar el Tipo ''<strong>" + StrDesTipo + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            yesEliminaTipoGrupo(IdTipoGrupo);
        } else {
            swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

//===============================================================================================
//=============================== FUNCION ELIMINAR TIPO GRUPO ===================================
function yesEliminaTipoGrupo(IdTipoGrupo) {
    validarSession();//AÑADIDO HG 22.04.2021 
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/EliminarTGTipo',
        { objSession: SesionMovi, intId: IdTipoGrupo },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    swal(tipo, response.message, response.type);
                    listarTablaTipoGrupo();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

//===============================================================================================
//================================ BOTON EDITAR (Seleccionar Fila) ==============================
$('#DataTableTipoGrupo  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession();//AÑADIDO HG 22.04.2021 
    let intIdTipo_ed = $(this).attr("dataid")
    if (!isNaN(intIdTipo_ed)) {
        CargarDatosTipoGrupo(intIdTipo_ed)
    }

});

//===============================================================================================
//====================== CARGAR DATOS A EDITAR (de la Fila Seleccionada) ========================
function CargarDatosTipoGrupo(intIdTipo_ed) {
    validarSession();//AÑADIDO HG 22.04.2021 
    CargarComboTipoSubGrupo();
    $('#x_title_nuevo').hide();
    $('#x_title_editar').show();
    $('.btn-nuevo').hide();
    $('.btn-actualizar').show()
    $('#cboSubGrupoTipo_ne').val(0);
    $('#txtDescripcion_ne').val('');
    $('#lblIntIdTipo').empty();
    $('#txtAbreviatura_ne').val('');
    $('#myModal_ne').modal('toggle');
    $('#notifry_error1').html('');
    $('#notifry_info_abreviatura').html('');
    document.getElementById("txtDescripcion_ne").style.borderColor = "#CCCCCC";
    document.getElementById("txtAbreviatura_ne").style.borderColor = "#CCCCCC";

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }     

    $.post(
        '/Asistencia/GetTablaTipo',
        { objSession: SesionMovi, strGrupo: 'COMEDOR', strSubGrupo: '', IntIdTipo: intIdTipo_ed },
        (response) => {
            response.forEach(element => {
                var element_strSubGrupo = element.strSubGrupo;
                var elementStrSubGrupo = 0;
                if ( element_strSubGrupo === 'TIPOMENU') {
                   elementStrSubGrupo = 2
                }
                if (element_strSubGrupo === 'TIPOSERV') {
                    elementStrSubGrupo = 1
                }

                $('#cboSubGrupoTipo_ne').val(elementStrSubGrupo);
                $('#txtDescripcion_ne').val(element.strDeTipo);
                $('#txtAbreviatura_ne').val(element.strAbreviatura);
                $('#lblIntIdTipo').append(element.IntIdTipo);

            });

        });
}

//===============================================================================================
//==================================== BOTON NUEVO ==============================================
$('#btn-nuevo-tipo-grupo').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    CargarComboTipoSubGrupo();
    $('#cboSubGrupoTipo_ne').val(0);
    $('#txtDescripcion_ne').val('');
    $('#txtAbreviatura_ne').val('');
    $('#x_title_nuevo').show();
    $('#x_title_editar').hide();
    $('.btn-nuevo').show();
    $('.btn-actualizar').hide()
    $('#myModal_ne').modal('toggle');

    $('#notifry_error1').html('');
    $('#notifry_info_abreviatura').html('');
    document.getElementById("txtDescripcion_ne").style.borderColor = "#CCCCCC";
    document.getElementById("txtAbreviatura_ne").style.borderColor = "#CCCCCC";

});

//===============================================================================================
//==================================== BOTON GUARDAR ============================================
$('#btn-guardar-tipo-grupo').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var _IntIdTipo       =  ''; //$('#cboSubGrupoTipo_ne option:selected').val();  
    var _strCoTipo       =  ''; //$('#').val();
    var _strDeTipo       =  $('#txtDescripcion_ne').val();
    var _strAbreviatura  =  $('#txtAbreviatura_ne').val();
    var _strGrupo        =  ''; //Tipo de Menú ó Tipo de Servicio, Lo que viene en el combo
    var _strSubGrupo = $('#cboSubGrupoTipo_ne option:selected').val(); //TIPOMENU ó TIPOSERV

    $('#notifry_error1').html('');
    $('#notifry_info_abreviatura').html('');
    document.getElementById("txtDescripcion_ne").style.borderColor = "#CCCCCC";
    document.getElementById("txtAbreviatura_ne").style.borderColor = "#CCCCCC";


    if (_strDeTipo === '' || _strAbreviatura === '' || _strSubGrupo == 0 ) {
        new PNotify({
            title: 'Nuevo Tipo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error1').html('');
        $('#notifry_info_abreviatura').html('');

        return;
    }

    var ObjetoTGTipo = {
         IntIdTipo       : _IntIdTipo
        ,strCoTipo       : _strCoTipo
        ,strDeTipo       : _strDeTipo
        ,strAbreviatura  : _strAbreviatura
        ,strGrupo        : _strGrupo
        ,strSubGrupo     : _strSubGrupo
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    } 

    $.post(
        '/Asistencia/IUTGTipo',
        { Objeto: ObjetoTGTipo, intTipoOperacion: 1, objSession: SesionMovi},
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Tipo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    listarTablaTipoGrupo();
                    $('#myModal_ne').modal('toggle');

                }

                else {  

                    if (response.type === 'info') { // ==============================Descripción (*) EXISTENTE

                        var nomMantemiento = 'Tipo';
                        var campo = 'txtDescripcion_ne';
                        var msj = (response.message).slice(-0, -14);
                        var response = "info";
                        var deta = 'notifry_error1';
                        //Pintar el borde del textbox del error en cuestion (del codigo)
                        document.getElementById("txtDescripcion_ne").style.borderColor = "#3498dbe0";
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;

                    }

                    else if (response.type === 'info') {                        

                        var nomMantemiento = 'Tipo';

                            var campo = 'txtDescripcion_ne';
                            var msj = response.message;
                            var response = "info";
                            var deta = 'notifry_errordes';
                            //Pintar el borde del textbox del error en cuestion (la razon social)
                            document.getElementById("txtDescripcion_ne").style.borderColor = "#3498dbe0";

                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                    }

                    else if (response.type === 'info') {

                        var nomMantemiento = 'Tipo';

                        var campo = 'txtAbreviatura_ne';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_errordes';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtAbreviatura_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }



                    else { // ==============================Abreviatura (*) EXISTENTE
                            var nomMantemiento = 'Tipo';
                            var campo = 'txtAbreviatura_ne';
                            var msj = (response.message).slice(-0, -14);
                            var response = "info";
                            var deta = 'notifry_info_abreviatura';
                            //Pintar el borde del textbox del error en cuestion (la razon social)
                            document.getElementById("txtAbreviatura_ne").style.borderColor = "#3498dbe0";

                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                         }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});

//===============================================================================================
//==================================== BOTON ACTUALIZAR =========================================
$('#btn-actualizar-tipo-grupo').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var _IntIdTipo = $('#lblIntIdTipo').text(); // ''; 
    var _strCoTipo = ''; 
    var _strDeTipo = $('#txtDescripcion_ne').val();
    var _strAbreviatura = $('#txtAbreviatura_ne').val();
    var _strGrupo = ''; //Tipo de Menú ó Tipo de Servicio, Lo que viene en el combo
    var _strSubGrupo = $('#cboSubGrupoTipo_ne option:selected').val(); //TIPOMENU ó TIPOSERV

    $('#notifry_error1').html('');
    $('#notifry_info_abreviatura').html('');
    document.getElementById("txtDescripcion_ne").style.borderColor = "#CCCCCC";
    document.getElementById("txtAbreviatura_ne").style.borderColor = "#CCCCCC";

    if (_strDeTipo === '' || _strAbreviatura === '' || _strSubGrupo == 0) {
        new PNotify({
            title: 'Actualizar Tipo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error1').html('');
        $('#notifry_info_abreviatura').html('');
        return;
    }


    var ObjetoTGTipo = {
          IntIdTipo      : _IntIdTipo
        , strCoTipo      : _strCoTipo
        , strDeTipo      : _strDeTipo
        , strAbreviatura : _strAbreviatura
        , strGrupo       : _strGrupo
        , strSubGrupo    : _strSubGrupo
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/IUTGTipo',
        { Objeto: ObjetoTGTipo, intTipoOperacion: 2, objSession: SesionMovi },
        (response) => {

            if (response.type !== '') {
                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Tipo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    listarTablaTipoGrupo();
                    $('#myModal_ne').modal('toggle');
                }else {
                    if (response.type === 'info') { // ==============================Descripción (*) EXISTENTE
                        var nomMantemiento = 'Tipo';
                        var campo = 'txtDescripcion_ne';
                        var msj = (response.message).slice(-0, -14);
                        var response = "info";
                        var deta = 'notifry_error1';
                        //Pintar el borde del textbox del error en cuestion (del codigo)
                        document.getElementById("txtDescripcion_ne").style.borderColor = "#3498dbe0";
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;

                    }

                    else if (response.type === 'info') {

                        var nomMantemiento = 'Tipo';

                        var campo = 'txtDescripcion_ne';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_errordes';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtDescripcion_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }

                    else if (response.type === 'info') {

                        var nomMantemiento = 'Tipo';

                        var campo = 'txtAbreviatura_ne';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_errordes';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtAbreviatura_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }



                    else { // ==============================Abreviatura (*) EXISTENTE
                        var nomMantemiento = 'Tipo';
                        var campo = 'txtAbreviatura_ne';
                        var msj = (response.message).slice(-0, -14);
                        var response = "info";
                        var deta = 'notifry_info_abreviatura';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtAbreviatura_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});


//===============================================================================================
//================================== CARGAR COMBO TIPO ==========================================
function CargarComboTipoSubGrupo() {
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'SERVICIOS' },
        (response) => {

            $('#cboSubGrupoTipo_ne').empty();
            $('#cboSubGrupoTipo_ne').append('<option value="0">Seleccione</option>');

            response.forEach(element => {

                $('#cboSubGrupoTipo_ne').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });

        });
}

function triguer_menu_principal() {

    $("#Asistencia_Servicio").click();//Menu Principal

}

/************************************************************************************************
                            MINI MANTENIMIENTO TIPOS - FINAL
*************************************************************************************************/















    

